<application>
  <component name="VimHistorySettings">
    <history>
      <history-search>
        <entry encoding="base64">ZmlsbEluID0gbmV3IEludGVudA==</entry>
        <entry encoding="base64">bVNlbnRJbnRlbnQ=</entry>
        <entry encoding="base64">bWVzc2FnZVR5cGUgPSBTbXMuTUVTU0FHRQ==</entry>
        <entry encoding="base64">U21zLk1FU1NBR0VfVFlQRV9GQUlMRUQ=</entry>
        <entry encoding="base64">cGVyc2lzdE9yVXBkYXRlTWVzc2FnZSg=</entry>
        <entry encoding="base64">cGVyc2lzdFNlbnRNZXNzYWdlSWZSZXF1aXJlZCg=</entry>
        <entry encoding="base64">c2VuZFRleHRGb3I=</entry>
        <entry encoding="base64">Z2V0UGhvbmU=</entry>
        <entry encoding="base64">c21z</entry>
        <entry encoding="base64">U21z</entry>
        <entry encoding="base64">Y2VsbA==</entry>
        <entry encoding="base64">Z2V0QWxsQ2VsbEluZm8=</entry>
        <entry encoding="base64">cmVxdWVzdENlbGxJbmZvVXBkYXRl</entry>
        <entry encoding="base64">aW50ZW50</entry>
        <entry encoding="base64">c21zUGR1</entry>
        <entry encoding="base64">U21zUGR1</entry>
        <entry encoding="base64">cGVuZGluZ0ludGVudA==</entry>
        <entry encoding="base64">SW5qZWN0U21zUGR1</entry>
        <entry encoding="base64">aW5qZWN0U21zUGR1</entry>
        <entry encoding="base64">UGVuZGluZ0ludGVudA==</entry>
        <entry encoding="base64">c2VudEludGVudA==</entry>
        <entry encoding="base64">c2VuZFRleHRNZXNzYWdlSW50ZXJuYWw=</entry>
        <entry encoding="base64">RVZFTlRfU0VORF9DT05GSVJNRURfU01T</entry>
        <entry encoding="base64">ZGVmYXVsdA==</entry>
        <entry encoding="base64">ZGVsaGl2ZXJ5</entry>
        <entry encoding="base64">UHJlU2VuZA==</entry>
        <entry encoding="base64">c3RhcnRTZXJ2aWNl</entry>
        <entry encoding="base64">c2VuZFRleHRNZXNzYWdlSW50ZXJuYWwo</entry>
        <entry encoding="base64">dm9pZCBzZW5kVGV4dE1lc3NhZ2VJbnRlcm5hbCg=</entry>
        <entry encoding="base64">dm9pZCBzZW5kRGF0YU1lc3NhZ2U=</entry>
        <entry encoding="base64">U2ltSW5mbw==</entry>
        <entry encoding="base64">c2V0UGhvbmU=</entry>
        <entry encoding="base64">bm90aWZ5RXJyb3I=</entry>
        <entry encoding="base64">bm90aWZ5</entry>
        <entry encoding="base64">bm90aWZ5U21zU3VjY2Vzcw==</entry>
        <entry encoding="base64">QWN0aXZpdHk=</entry>
        <entry encoding="base64">dm9pZCBzZW5kVGV4dE1lc3NhZ2VJbnRlcm5hbA==</entry>
        <entry encoding="base64">cmVwb3NpdG9yaWVz</entry>
        <entry encoding="base64">dGhpcw==</entry>
        <entry encoding="base64">UGlja0RvY3VtZW50Q29udHJhY3Q=</entry>
        <entry encoding="base64">TG9n</entry>
        <entry encoding="base64">Y29pbA==</entry>
        <entry encoding="base64">dmVyc2lvbg==</entry>
        <entry encoding="base64">Kg==</entry>
        <entry encoding="base64">a2xpbmtlcg==</entry>
        <entry encoding="base64">a290bGlueC1zZXJpYWw=</entry>
        <entry encoding="base64">c2hvd0FsbG93UGVybWlzc2lvbkJ0bi52YWx1ZQ==</entry>
        <entry encoding="base64">ZmlyZWJhc2U=</entry>
        <entry encoding="base64">aW5zZXJ0</entry>
        <entry encoding="base64">QWN0aXZpdHkuUkVTVUxUX09LQVk=</entry>
      </history-search>
      <history-cmd>
        <entry encoding="base64">c3BsaXQ=</entry>
        <entry encoding="base64">dnNwbGl0</entry>
        <entry encoding="base64">TkVSRFRyZWVUb2dnbGU=</entry>
        <entry encoding="base64">JzwsJz5ub3JtISBJQENvbHVtbkluZm8obmFtZSA9ICIiKSA=</entry>
        <entry encoding="base64">JzwsJz4gbm9ybSEgSXZhbCA=</entry>
        <entry encoding="base64">JzwsJz4gbm9ybSEgeCwgQSIi</entry>
        <entry encoding="base64">JzwsJz4gbm9ybSEgeCw=</entry>
        <entry encoding="base64">JzwsJz4gbm9ybSEgQSI6dyI=</entry>
        <entry encoding="base64">JzwsJz4gbm9ybSEgeGludGVudA==</entry>
        <entry encoding="base64">JzwsJz5ub3JtISB4ImludGVudCI=</entry>
        <entry encoding="base64">JzwsJz5ub3JtISB4XGludGVudA==</entry>
        <entry encoding="base64">JzwsJz5ub3JtISBpc2VuZFNlc3Npb25JbnRlbnQ=</entry>
        <entry encoding="base64">d2E=</entry>
        <entry encoding="base64">cQ==</entry>
        <entry encoding="base64">dw==</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
  </component>
  <component name="VimMarksSettings">
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/aosp-telephony/SmsController.opt.java" timestamp="1701599801798">
        <mark key="'" line="162" column="28" />
      </file>
      <file name="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/ToDoListViewModel.kt" timestamp="1701105946708">
        <mark key="[" line="63" column="59" />
        <mark key="]" line="63" column="72" />
        <mark key="." line="63" column="71" />
        <mark key="^" line="63" column="72" />
      </file>
      <file name="$USER_HOME$/android_frameworks_base/telephony/java/android/telephony/TelephonyManager.java" timestamp="1701601006719">
        <mark key="'" line="154" column="2" />
      </file>
      <file name="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/notification/AlarmReceiver.kt" timestamp="1701106240364">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="60" column="0" />
        <mark key="]" line="60" column="0" />
        <mark key="^" line="72" column="46" />
        <mark key="." line="60" column="0" />
      </file>
      <file name="$USER_HOME$/interview/build.gradle" timestamp="1701108864917">
        <mark key="[" line="10" column="55" />
        <mark key="]" line="10" column="55" />
        <mark key="^" line="10" column="55" />
        <mark key="." line="10" column="54" />
      </file>
      <file name="$USER_HOME$/interview/usertracker/src/main/AndroidManifest.xml" timestamp="1701108241310">
        <mark key="[" line="1" column="68" />
        <mark key="]" line="2" column="40" />
        <mark key="^" line="2" column="40" />
        <mark key="." line="2" column="39" />
      </file>
      <file name="$USER_HOME$/aosp-telephony/SubscriptionManager.java" timestamp="1701601146015">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="4661" column="1" />
      </file>
      <file name="$USER_HOME$/android_frameworks_base/telephony/java/android/telephony/SmsManager.java" timestamp="1701596458696">
        <mark key="'" line="584" column="21" />
      </file>
      <file name="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/dto/NotificationDto.kt" timestamp="1701104992650">
        <mark key="[" line="5" column="20" />
        <mark key="]" line="5" column="31" />
        <mark key="^" line="5" column="31" />
        <mark key="." line="5" column="30" />
      </file>
      <file name="$USER_HOME$/interview/usertracker/build.gradle" timestamp="1701107702707">
        <mark key="[" line="6" column="9" />
        <mark key="]" line="10" column="24" />
        <mark key="^" line="10" column="24" />
        <mark key="." line="10" column="23" />
      </file>
      <file name="$USER_HOME$/interview/README.md" timestamp="1701105417268">
        <mark key="[" line="43" column="59" />
        <mark key="]" line="43" column="58" />
        <mark key="." line="43" column="57" />
        <mark key="^" line="43" column="58" />
      </file>
      <file name="/Dummy.txt" timestamp="1701601167135">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/android_frameworks_base/telephony/java/android/telephony/SubscriptionManager.java" timestamp="1701601362184">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="3377" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/ListAdapter.kt" timestamp="1701105780918">
        <mark key="'" line="31" column="27" />
      </file>
      <file name="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/tasks/services/SendSessionDataService.kt" timestamp="1701107393157">
        <mark key="'" line="81" column="39" />
        <mark key="[" line="34" column="17" />
        <mark key="]" line="30" column="36" />
        <mark key="." line="30" column="37" />
        <mark key="^" line="30" column="61" />
      </file>
      <file name="$USER_HOME$/interview/app/build.gradle" timestamp="1701107630349">
        <mark key="[" line="12" column="24" />
        <mark key="]" line="12" column="24" />
        <mark key="^" line="12" column="24" />
        <mark key="." line="12" column="23" />
      </file>
      <file name="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" timestamp="1701106033643">
        <mark key="'" line="83" column="54" />
        <mark key="[" line="80" column="33" />
        <mark key="]" line="80" column="50" />
        <mark key="." line="80" column="49" />
        <mark key="^" line="80" column="50" />
      </file>
      <file name="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/OnItemClick.kt" timestamp="1701105764071">
        <mark key="'" line="9" column="13" />
      </file>
    </filemarks>
    <jumps>
      <jump line="0" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/SmsBroadcastReceiver.kt" />
      <jump line="16" column="38" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/observers/SmsOberver.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/observers/SmsOberver.kt" />
      <jump line="2" column="28" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/broadcasts/TxnSmsReceiveBroadcast.kt" />
      <jump line="40" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/broadcasts/TxnSmsReceiveBroadcast.kt" />
      <jump line="13" column="40" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/broadcasts/TxnSmsReceiveBroadcast.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/broadcasts/TxnSmsReceiveBroadcast.kt" />
      <jump line="18" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/broadcasts/SmsReceiveBroadcast.kt" />
      <jump line="16" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/broadcasts/SmsSendBroadcast.kt" />
      <jump line="23" column="63" filename="$USER_HOME$/DelhiveryAdmin/app/src/main/java/com/delhivery/admin/tasks/broadcasts/SmsReceiveBroadcast.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/DelhiveryAdmin/app/src/main/java/com/delhivery/admin/tasks/broadcasts/SmsReceiveBroadcast.kt" />
      <jump line="41" column="2" filename="$USER_HOME$/DelhiveryAdmin/app/src/main/java/com/delhivery/admin/ui/checkAdmin/CheckAdmin.comp.kt" />
      <jump line="27" column="36" filename="$USER_HOME$/DelhiveryAdmin/app/src/main/java/com/delhivery/admin/ui/checkAdmin/CheckAdmin.comp.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/DelhiveryAdmin/app/src/main/java/com/delhivery/admin/ui/checkAdmin/CheckAdmin.comp.kt" />
      <jump line="41" column="16" filename="$USER_HOME$/DelhiveryAdmin/app/src/main/java/com/delhivery/admin/tasks/workers/ObserveMessages.kt" />
      <jump line="77" column="44" filename="$USER_HOME$/DelhiveryAdmin/app/src/main/java/com/delhivery/admin/tasks/workers/ObserveMessages.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/DelhiveryAdmin/app/src/main/java/com/delhivery/admin/tasks/workers/ObserveMessages.kt" />
      <jump line="29" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCM.kt" />
      <jump line="28" column="83" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCM.kt" />
      <jump line="2" column="10" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCMC.kt" />
      <jump line="80" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCMC.kt" />
      <jump line="49" column="25" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCM.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCM.kt" />
      <jump line="37" column="8" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCMC.kt" />
      <jump line="49" column="47" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCMC.kt" />
      <jump line="86" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCMC.kt" />
      <jump line="53" column="16" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCMC.kt" />
      <jump line="120" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCMC.kt" />
      <jump line="77" column="59" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCMC.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCMC.kt" />
      <jump line="119" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/tasks/services/FCMC.kt" />
      <jump line="92" column="27" filename="$USER_HOME$/Delhivery/app/build.gradle.kts" />
      <jump line="96" column="0" filename="$USER_HOME$/Delhivery/app/src/main/java/com/delhivery/ui/screens/LoginScreen.kt" />
      <jump line="6" column="9" filename="$USER_HOME$/interview/README.md" />
      <jump line="19" column="24" filename="$USER_HOME$/interview/README.md" />
      <jump line="31" column="53" filename="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/notification/AlarmReceiver.kt" />
      <jump line="9" column="44" filename="$USER_HOME$/interview/README.md" />
      <jump line="22" column="0" filename="$USER_HOME$/interview/README.md" />
      <jump line="21" column="0" filename="$USER_HOME$/interview/README.md" />
      <jump line="0" column="0" filename="$USER_HOME$/interview/README.md" />
      <jump line="40" column="0" filename="$USER_HOME$/interview/usertracker/build.gradle" />
      <jump line="11" column="97" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="19" column="55" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="10" column="17" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="31" column="29" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="16" column="0" filename="$USER_HOME$/DelhiveryAdmin/app/src/main/java/com/delhivery/admin/di/TasksRetrofitInstance.kt" />
      <jump line="2" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/RetrofitInstance.kt" />
      <jump line="17" column="27" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/RetrofitInstance.kt" />
      <jump line="18" column="13" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/RetrofitInstance.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/RetrofitInstance.kt" />
      <jump line="10" column="30" filename="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/database/ToDoListDataEntity.kt" />
      <jump line="30" column="38" filename="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/notification/AlarmReceiver.kt" />
      <jump line="76" column="54" filename="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/notification/AlarmReceiver.kt" />
      <jump line="22" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="24" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/db/usersession/UserSessionDb.kt" />
      <jump line="10" column="21" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/db/usersession/UserSessionDb.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/db/usersession/UserSessionDb.kt" />
      <jump line="23" column="42" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="59" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="37" column="5" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="45" column="16" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/tasks/services/SendData.service.kt" />
      <jump line="11" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/tasks/services/SaveData.service.kt" />
      <jump line="16" column="16" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/tasks/services/SaveData.service.kt" />
      <jump line="16" column="29" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/db/usersession/UserSessionEntity.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/db/usersession/UserSessionEntity.kt" />
      <jump line="40" column="4" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/db/usersession/UserSessionDao.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/db/usersession/UserSessionDao.kt" />
      <jump line="18" column="16" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/db/server/ServerDao.kt" />
      <jump line="47" column="19" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/tasks/services/SaveData.service.kt" />
      <jump line="6" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/tasks/services/SaveData.service.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/tasks/services/SaveData.service.kt" />
      <jump line="15" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/db/server/ServerDao.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/db/server/ServerDao.kt" />
      <jump line="72" column="27" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/tasks/services/SendSessionDataService.kt" />
      <jump line="67" column="39" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/tasks/services/SendSessionDataService.kt" />
      <jump line="50" column="48" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/tasks/services/SaveSessionDataService.kt" />
      <jump line="26" column="25" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="105" column="4" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="32" column="33" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="134" column="31" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="75" column="50" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="84" column="54" filename="$USER_HOME$/interview/usertracker/src/main/java/com/example/usertracker/UserTracker.kt" />
      <jump line="24" column="49" filename="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/notification/AlarmReceiver.kt" />
      <jump line="97" column="0" filename="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/notification/AlarmReceiver.kt" />
      <jump line="22" column="0" filename="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/notification/AlarmReceiver.kt" />
      <jump line="53" column="32" filename="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/notification/AlarmReceiver.kt" />
      <jump line="9" column="13" filename="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/OnItemClick.kt" />
      <jump line="31" column="27" filename="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/ListAdapter.kt" />
      <jump line="75" column="2" filename="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/notification/AlarmReceiver.kt" />
      <jump line="0" column="0" filename="$USER_HOME$/interview/app/src/main/java/com/example/todolistinkotlin/notification/AlarmReceiver.kt" />
      <jump line="584" column="21" filename="$USER_HOME$/android_frameworks_base/telephony/java/android/telephony/SmsManager.java" />
      <jump line="0" column="0" filename="$USER_HOME$/android_frameworks_base/test.java" />
      <jump line="162" column="28" filename="$USER_HOME$/aosp-telephony/SmsController.opt.java" />
      <jump line="154" column="2" filename="$USER_HOME$/android_frameworks_base/telephony/java/android/telephony/TelephonyManager.java" />
      <jump line="247" column="0" filename="$USER_HOME$/aosp-telephony/SubscriptionManager.java" />
      <jump line="0" column="0" filename="$USER_HOME$/aosp-telephony/SubscriptionManager.java" />
      <jump line="86" column="2" filename="$USER_HOME$/android_frameworks_base/telephony/java/android/telephony/SubscriptionManager.java" />
      <jump line="8" column="1" filename="$USER_HOME$/android_frameworks_base/telephony/java/android/telephony/SubscriptionManager.java" />
      <jump line="0" column="0" filename="$USER_HOME$/android_frameworks_base/telephony/java/android/telephony/SubscriptionManager.java" />
    </jumps>
  </component>
  <component name="VimRegisterSettings">
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="+" type="2">
        <text encoding="base64">ICAgICAgICAgICAgcmV0dXJuIFBob25lQ29uc3RhbnRzLmdldE1TSVNETigpOwo=</text>
      </register>
      <register name="-" type="4">
        <text encoding="base64">d2l0aCBzdGF0dXMgW2BUT1NFTkRgXQ==</text>
      </register>
      <register name="." type="4">
        <text encoding="base64"></text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">QWN0aXZpdHkuUkVTVUxUX09LQVk=</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">LyoKICogQ29weXJpZ2h0IChDKSAyMDE0IFRoZSBBbmRyb2lkIE9wZW4gU291cmNlIFByb2plY3QKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwoKcGFja2FnZSBhbmRyb2lkLnRlbGVwaG9ueTsKCmltcG9ydCBzdGF0aWMgYW5kcm9pZC5uZXQuTmV0d29ya1BvbGljeU1hbmFnZXIuU1VCU0NSSVBUSU9OX09WRVJSSURFX0NPTkdFU1RFRDsKaW1wb3J0IHN0YXRpYyBhbmRyb2lkLm5ldC5OZXR3b3JrUG9saWN5TWFuYWdlci5TVUJTQ1JJUFRJT05fT1ZFUlJJREVfVU5NRVRFUkVEOwoKaW1wb3J0IGFuZHJvaWQuTWFuaWZlc3Q7CmltcG9ydCBhbmRyb2lkLmFubm90YXRpb24uQ2FsbGJhY2tFeGVjdXRvcjsKaW1wb3J0IGFuZHJvaWQuYW5ub3RhdGlvbi5Db2xvckludDsKaW1wb3J0IGFuZHJvaWQuYW5ub3RhdGlvbi5EdXJhdGlvbk1pbGxpc0xvbmc7CmltcG9ydCBhbmRyb2lkLmFubm90YXRpb24uSW50RGVmOwppbXBvcnQgYW5kcm9pZC5hbm5vdGF0aW9uLk5vbk51bGw7CmltcG9ydCBhbmRyb2lkLmFubm90YXRpb24uTnVsbGFibGU7CmltcG9ydCBhbmRyb2lkLmFubm90YXRpb24uUmVxdWlyZXNGZWF0dXJlOwppbXBvcnQgYW5kcm9pZC5hbm5vdGF0aW9uLlJlcXVpcmVzUGVybWlzc2lvbjsKaW1wb3J0IGFuZHJvaWQuYW5ub3RhdGlvbi5TZGtDb25zdGFudDsKaW1wb3J0IGFuZHJvaWQuYW5ub3RhdGlvbi5TZGtDb25zdGFudC5TZGtDb25zdGFudFR5cGU7CmltcG9ydCBhbmRyb2lkLmFubm90YXRpb24uU3VwcHJlc3NBdXRvRG9jOwppbXBvcnQgYW5kcm9pZC5hbm5vdGF0aW9uLlN5c3RlbUFwaTsKaW1wb3J0IGFuZHJvaWQuYW5ub3RhdGlvbi5TeXN0ZW1TZXJ2aWNlOwppbXBvcnQgYW5kcm9pZC5hcHAuUGVuZGluZ0ludGVudDsKaW1wb3J0IGFuZHJvaWQuYXBwLlByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZTsKaW1wb3J0IGFuZHJvaWQuY29tcGF0LmFubm90YXRpb24uVW5zdXBwb3J0ZWRBcHBVc2FnZTsKaW1wb3J0IGFuZHJvaWQuY29udGVudC5Db250ZXh0OwppbXBvcnQgYW5kcm9pZC5jb250ZW50LkludGVudDsKaW1wb3J0IGFuZHJvaWQuY29udGVudC5wbS5QYWNrYWdlSW5mbzsKaW1wb3J0IGFuZHJvaWQuY29udGVudC5wbS5QYWNrYWdlTWFuYWdlcjsKaW1wb3J0IGFuZHJvaWQuY29udGVudC5yZXMuQ29uZmlndXJhdGlvbjsKaW1wb3J0IGFuZHJvaWQuY29udGVudC5yZXMuUmVzb3VyY2VzOwppbXBvcnQgYW5kcm9pZC5kYXRhYmFzZS5Db250ZW50T2JzZXJ2ZXI7CmltcG9ydCBhbmRyb2lkLm5ldC5OZXR3b3JrQ2FwYWJpbGl0aWVzOwppbXBvcnQgYW5kcm9pZC5uZXQuTmV0d29ya1BvbGljeU1hbmFnZXI7CmltcG9ydCBhbmRyb2lkLm5ldC5Vcmk7CmltcG9ydCBhbmRyb2lkLm9zLkJpbmRlcjsKaW1wb3J0IGFuZHJvaWQub3MuQnVpbGQ7CmltcG9ydCBhbmRyb2lkLm9zLkJ1bmRsZTsKaW1wb3J0IGFuZHJvaWQub3MuSGFuZGxlcjsKaW1wb3J0IGFuZHJvaWQub3MuTG9vcGVyOwppbXBvcnQgYW5kcm9pZC5vcy5QYXJjZWxVdWlkOwppbXBvcnQgYW5kcm9pZC5vcy5Qcm9jZXNzOwppbXBvcnQgYW5kcm9pZC5vcy5SZW1vdGVFeGNlcHRpb247CmltcG9ydCBhbmRyb2lkLnByb3ZpZGVyLlRlbGVwaG9ueS5TaW1JbmZvOwppbXBvcnQgYW5kcm9pZC50ZWxlcGhvbnkuZXVpY2MuRXVpY2NNYW5hZ2VyOwppbXBvcnQgYW5kcm9pZC50ZWxlcGhvbnkuaW1zLkltc01tVGVsTWFuYWdlcjsKaW1wb3J0IGFuZHJvaWQudXRpbC5CYXNlNjQ7CmltcG9ydCBhbmRyb2lkLnV0aWwuTG9nOwppbXBvcnQgYW5kcm9pZC51dGlsLlBhaXI7CgppbXBvcnQgY29tLmFuZHJvaWQuaW50ZXJuYWwudGVsZXBob255LklTZXRPcHBvcnR1bmlzdGljRGF0YUNhbGxiYWNrOwppbXBvcnQgY29tLmFuZHJvaWQuaW50ZXJuYWwudGVsZXBob255LklTdWI7CmltcG9ydCBjb20uYW5kcm9pZC5pbnRlcm5hbC50ZWxlcGhvbnkuUGhvbmVDb25zdGFudHM7CmltcG9ydCBjb20uYW5kcm9pZC5pbnRlcm5hbC50ZWxlcGhvbnkudXRpbC5IYW5kbGVyRXhlY3V0b3I7CmltcG9ydCBjb20uYW5kcm9pZC5pbnRlcm5hbC51dGlsLkZ1bmN0aW9uYWxVdGlsczsKaW1wb3J0IGNvbS5hbmRyb2lkLmludGVybmFsLnV0aWwuUHJlY29uZGl0aW9uczsKaW1wb3J0IGNvbS5hbmRyb2lkLnRlbGVwaG9ueS5SbG9nOwoKaW1wb3J0IGphdmEuaW8uQnl0ZUFycmF5SW5wdXRTdHJlYW07CmltcG9ydCBqYXZhLmlvLkJ5dGVBcnJheU91dHB1dFN0cmVhbTsKaW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247CmltcG9ydCBqYXZhLmlvLk9iamVjdElucHV0U3RyZWFtOwppbXBvcnQgamF2YS5pby5PYmplY3RPdXRwdXRTdHJlYW07CmltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi5SZXRlbnRpb247CmltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi5SZXRlbnRpb25Qb2xpY3k7CmltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwppbXBvcnQgamF2YS51dGlsLkFycmF5czsKaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uczsKaW1wb3J0IGphdmEudXRpbC5IYXNoTWFwOwppbXBvcnQgamF2YS51dGlsLkxpc3Q7CmltcG9ydCBqYXZhLnV0aWwuTG9jYWxlOwppbXBvcnQgamF2YS51dGlsLk1hcDsKaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbmN1cnJlbnRIYXNoTWFwOwppbXBvcnQgamF2YS51dGlsLmNvbmN1cnJlbnQuRXhlY3V0b3I7CmltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uQ29uc3VtZXI7CmltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7CgovKioKICogU3Vic2NyaXB0aW9uTWFuYWdlciBpcyB0aGUgYXBwbGljYXRpb24gaW50ZXJmYWNlIHRvIFN1YnNjcmlwdGlvbkNvbnRyb2xsZXIKICogYW5kIHByb3ZpZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IFRlbGVwaG9ueSBTdWJzY3JpcHRpb25zLgogKi8KQFN5c3RlbVNlcnZpY2UoQ29udGV4dC5URUxFUEhPTllfU1VCU0NSSVBUSU9OX1NFUlZJQ0UpCkBSZXF1aXJlc0ZlYXR1cmUoUGFja2FnZU1hbmFnZXIuRkVBVFVSRV9URUxFUEhPTllfU1VCU0NSSVBUSU9OKQpwdWJsaWMgY2xhc3MgU3Vic2NyaXB0aW9uTWFuYWdlciB7CiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgTE9HX1RBRyA9ICJTdWJzY3JpcHRpb25NYW5hZ2VyIjsKICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIGJvb2xlYW4gREJHID0gZmFsc2U7CiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBib29sZWFuIFZEQkcgPSBmYWxzZTsKCiAgICAvKiogQW4gaW52YWxpZCBzdWJzY3JpcHRpb24gaWRlbnRpZmllciAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgSU5WQUxJRF9TVUJTQ1JJUFRJT05fSUQgPSAtMTsKCiAgICAvKiogQmFzZSB2YWx1ZSBmb3IgcGxhY2Vob2xkZXIgU1VCU0NSSVBUSU9OX0lEJ3MuICovCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFBMQUNFSE9MREVSX1NVQlNDUklQVElPTl9JRF9CQVNFID0gSU5WQUxJRF9TVUJTQ1JJUFRJT05fSUQgLSAxOwoKICAgIC8qKiBBbiBpbnZhbGlkIHBob25lIGlkZW50aWZpZXIgKi8KICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgSU5WQUxJRF9QSE9ORV9JTkRFWCA9IC0xOwoKICAgIC8qKgogICAgICogSW5kaWNhdGVzIGludmFsaWQgc2ltIHNsb3QuIFRoaXMgY2FuIGJlIHJldHVybmVkIGJ5CiAgICAgKiB7QGxpbmsgI2dldFNsb3RJbmRleChpbnQpfS4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgSU5WQUxJRF9TSU1fU0xPVF9JTkRFWCA9IC0xOwoKICAgIC8qKiBJbmRpY2F0ZXMgdGhlIGRlZmF1bHQgc3Vic2NyaXB0aW9uIElEIGluIFRlbGVwaG9ueS4gKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IERFRkFVTFRfU1VCU0NSSVBUSU9OX0lEID0gSW50ZWdlci5NQVhfVkFMVUU7CgogICAgLyoqCiAgICAgKiBJbmRpY2F0ZXMgdGhlIGNhbGxlciB3YW50cyB0aGUgZGVmYXVsdCBwaG9uZSBpZC4KICAgICAqIFVzZWQgaW4gU3Vic2NyaXB0aW9uQ29udHJvbGxlciBhbmQgUGhvbmUgYnV0IGRvIHdlIHJlYWxseSBuZWVkIGl0Pz8/CiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IERFRkFVTFRfUEhPTkVfSU5ERVggPSBJbnRlZ2VyLk1BWF9WQUxVRTsKCiAgICAvKiogSW5kaWNhdGVzIHRoZSBjYWxsZXIgd2FudHMgdGhlIGRlZmF1bHQgc2xvdCBpZC4gTk9UIHVzZWQgcmVtb3ZlPyAqLwogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBERUZBVUxUX1NJTV9TTE9UX0lOREVYID0gSW50ZWdlci5NQVhfVkFMVUU7CgogICAgLyoqIE1pbmltdW0gcG9zc2libGUgc3ViaWQgdGhhdCByZXByZXNlbnRzIGEgc3Vic2NyaXB0aW9uICovCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE1JTl9TVUJTQ1JJUFRJT05fSURfVkFMVUUgPSAwOwoKICAgIC8qKiBNYXhpbXVtIHBvc3NpYmxlIHN1YmlkIHRoYXQgcmVwcmVzZW50cyBhIHN1YnNjcmlwdGlvbiAqLwogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBNQVhfU1VCU0NSSVBUSU9OX0lEX1ZBTFVFID0gREVGQVVMVF9TVUJTQ1JJUFRJT05fSUQgLSAxOwoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UobWF4VGFyZ2V0U2RrID0gQnVpbGQuVkVSU0lPTl9DT0RFUy5SLCB0cmFja2luZ0J1ZyA9IDE3MDcyOTU1MykKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgVXJpIENPTlRFTlRfVVJJID0gU2ltSW5mby5DT05URU5UX1VSSTsKCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENBQ0hFX0tFWV9ERUZBVUxUX1NVQl9JRF9QUk9QRVJUWSA9ICJjYWNoZV9rZXkudGVsZXBob255LmdldF9kZWZhdWx0X3N1Yl9pZCI7CgogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQUNIRV9LRVlfREVGQVVMVF9EQVRBX1NVQl9JRF9QUk9QRVJUWSA9ICJjYWNoZV9rZXkudGVsZXBob255LmdldF9kZWZhdWx0X2RhdGFfc3ViX2lkIjsKCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENBQ0hFX0tFWV9ERUZBVUxUX1NNU19TVUJfSURfUFJPUEVSVFkgPSAiY2FjaGVfa2V5LnRlbGVwaG9ueS5nZXRfZGVmYXVsdF9zbXNfc3ViX2lkIjsKCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENBQ0hFX0tFWV9BQ1RJVkVfREFUQV9TVUJfSURfUFJPUEVSVFkgPSAiY2FjaGVfa2V5LnRlbGVwaG9ueS5nZXRfYWN0aXZlX2RhdGFfc3ViX2lkIjsKCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENBQ0hFX0tFWV9TTE9UX0lOREVYX1BST1BFUlRZID0gImNhY2hlX2tleS50ZWxlcGhvbnkuZ2V0X3Nsb3RfaW5kZXgiOwoKICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgR0VUX1NJTV9TUEVDSUZJQ19TRVRUSU5HU19NRVRIT0RfTkFNRSA9ICJnZXRTaW1TcGVjaWZpY1NldHRpbmdzIjsKCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIFJFU1RPUkVfU0lNX1NQRUNJRklDX1NFVFRJTkdTX01FVEhPRF9OQU1FID0gInJlc3RvcmVTaW1TcGVjaWZpY1NldHRpbmdzIjsKCiAgICAvKioKICAgICAqIEtleSB0byB0aGUgYmFja3VwICYgcmVzdG9yZSBkYXRhIGJ5dGUgYXJyYXkgaW4gdGhlIEJ1bmRsZSB0aGF0IGlzIHJldHVybmVkIGJ5CiAgICAgKiB7QGxpbmsKICAgICAqICNnZXRBbGxTaW1TcGVjaWZpY1NldHRpbmdzRm9yQmFja3VwKCl9IG9yIHRvIGJlIHBhc3MgaW4gdG8ge0BsaW5rCiAgICAgKiAjcmVzdG9yZUFsbFNpbVNwZWNpZmljU2V0dGluZ3MoKX0uCiAgICAgKgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgS0VZX1NJTV9TUEVDSUZJQ19TRVRUSU5HU19EQVRBID0gIktFWV9TSU1fU1BFQ0lGSUNfU0VUVElOR1NfREFUQSI7CgogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgaW50IE1BWF9DQUNIRV9TSVpFID0gNDsKCiAgICBwcml2YXRlIHN0YXRpYyBjbGFzcyBWb2lkUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlPFQ+CiAgICAgICAgICAgIGV4dGVuZHMgUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlPFZvaWQsIFQ+IHsKICAgICAgICBwcml2YXRlIGZpbmFsIEZ1bmN0aW9uYWxVdGlscy5UaHJvd2luZ0Z1bmN0aW9uPElTdWIsIFQ+IG1JbnRlcmZhY2VNZXRob2Q7CiAgICAgICAgcHJpdmF0ZSBmaW5hbCBTdHJpbmcgbUNhY2hlS2V5UHJvcGVydHk7CiAgICAgICAgcHJpdmF0ZSBmaW5hbCBUIG1EZWZhdWx0VmFsdWU7CgogICAgICAgIFZvaWRQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGUoCiAgICAgICAgICAgICAgICBGdW5jdGlvbmFsVXRpbHMuVGhyb3dpbmdGdW5jdGlvbjxJU3ViLCBUPiBzdWJzY3JpcHRpb25JbnRlcmZhY2VNZXRob2QsCiAgICAgICAgICAgICAgICBTdHJpbmcgY2FjaGVLZXlQcm9wZXJ0eSwKICAgICAgICAgICAgICAgIFQgZGVmYXVsdFZhbHVlKSB7CiAgICAgICAgICAgIHN1cGVyKE1BWF9DQUNIRV9TSVpFLCBjYWNoZUtleVByb3BlcnR5KTsKICAgICAgICAgICAgbUludGVyZmFjZU1ldGhvZCA9IHN1YnNjcmlwdGlvbkludGVyZmFjZU1ldGhvZDsKICAgICAgICAgICAgbUNhY2hlS2V5UHJvcGVydHkgPSBjYWNoZUtleVByb3BlcnR5OwogICAgICAgICAgICBtRGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlOwogICAgICAgIH0KCiAgICAgICAgQE92ZXJyaWRlCiAgICAgICAgcHVibGljIFQgcmVjb21wdXRlKFZvaWQgYVZvaWQpIHsKICAgICAgICAgICAgVCByZXN1bHQgPSBtRGVmYXVsdFZhbHVlOwoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG1JbnRlcmZhY2VNZXRob2QuYXBwbHlPclRocm93KGlTdWIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgICAgIFJsb2cudyhMT0dfVEFHLCAiRmFpbGVkIHRvIHJlY29tcHV0ZSBjYWNoZSBrZXkgZm9yICIgKyBtQ2FjaGVLZXlQcm9wZXJ0eSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChWREJHKQogICAgICAgICAgICAgICAgbG9nZCgicmVjb21wdXRpbmcgIiArIG1DYWNoZUtleVByb3BlcnR5ICsgIiwgcmVzdWx0ID0gIiArIHJlc3VsdCk7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgfQoKICAgIHByaXZhdGUgc3RhdGljIGNsYXNzIEludGVnZXJQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGU8VD4KICAgICAgICAgICAgZXh0ZW5kcyBQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGU8SW50ZWdlciwgVD4gewogICAgICAgIHByaXZhdGUgZmluYWwgRnVuY3Rpb25hbFV0aWxzLlRocm93aW5nQmlGdW5jdGlvbjxJU3ViLCBJbnRlZ2VyLCBUPiBtSW50ZXJmYWNlTWV0aG9kOwogICAgICAgIHByaXZhdGUgZmluYWwgU3RyaW5nIG1DYWNoZUtleVByb3BlcnR5OwogICAgICAgIHByaXZhdGUgZmluYWwgVCBtRGVmYXVsdFZhbHVlOwoKICAgICAgICBJbnRlZ2VyUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlKAogICAgICAgICAgICAgICAgRnVuY3Rpb25hbFV0aWxzLlRocm93aW5nQmlGdW5jdGlvbjxJU3ViLCBJbnRlZ2VyLCBUPiBzdWJzY3JpcHRpb25JbnRlcmZhY2VNZXRob2QsCiAgICAgICAgICAgICAgICBTdHJpbmcgY2FjaGVLZXlQcm9wZXJ0eSwKICAgICAgICAgICAgICAgIFQgZGVmYXVsdFZhbHVlKSB7CiAgICAgICAgICAgIHN1cGVyKE1BWF9DQUNIRV9TSVpFLCBjYWNoZUtleVByb3BlcnR5KTsKICAgICAgICAgICAgbUludGVyZmFjZU1ldGhvZCA9IHN1YnNjcmlwdGlvbkludGVyZmFjZU1ldGhvZDsKICAgICAgICAgICAgbUNhY2hlS2V5UHJvcGVydHkgPSBjYWNoZUtleVByb3BlcnR5OwogICAgICAgICAgICBtRGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlOwogICAgICAgIH0KCiAgICAgICAgQE92ZXJyaWRlCiAgICAgICAgcHVibGljIFQgcmVjb21wdXRlKEludGVnZXIgcXVlcnkpIHsKICAgICAgICAgICAgVCByZXN1bHQgPSBtRGVmYXVsdFZhbHVlOwoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG1JbnRlcmZhY2VNZXRob2QuYXBwbHlPclRocm93KGlTdWIsIHF1ZXJ5KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgICAgICBSbG9nLncoTE9HX1RBRywgIkZhaWxlZCB0byByZWNvbXB1dGUgY2FjaGUga2V5IGZvciAiICsgbUNhY2hlS2V5UHJvcGVydHkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoVkRCRykKICAgICAgICAgICAgICAgIGxvZ2QoInJlY29tcHV0aW5nICIgKyBtQ2FjaGVLZXlQcm9wZXJ0eSArICIsIHJlc3VsdCA9ICIgKyByZXN1bHQpOwogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgIH0KCiAgICBwcml2YXRlIHN0YXRpYyBWb2lkUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlPEludGVnZXI+IHNEZWZhdWx0U3ViSWRDYWNoZSA9IG5ldyBWb2lkUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlPD4oCiAgICAgICAgICAgIElTdWI6OmdldERlZmF1bHRTdWJJZCwKICAgICAgICAgICAgQ0FDSEVfS0VZX0RFRkFVTFRfU1VCX0lEX1BST1BFUlRZLAogICAgICAgICAgICBJTlZBTElEX1NVQlNDUklQVElPTl9JRCk7CgogICAgcHJpdmF0ZSBzdGF0aWMgVm9pZFByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZTxJbnRlZ2VyPiBzRGVmYXVsdERhdGFTdWJJZENhY2hlID0gbmV3IFZvaWRQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGU8PigKICAgICAgICAgICAgSVN1Yjo6Z2V0RGVmYXVsdERhdGFTdWJJZCwKICAgICAgICAgICAgQ0FDSEVfS0VZX0RFRkFVTFRfREFUQV9TVUJfSURfUFJPUEVSVFksCiAgICAgICAgICAgIElOVkFMSURfU1VCU0NSSVBUSU9OX0lEKTsKCiAgICBwcml2YXRlIHN0YXRpYyBWb2lkUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlPEludGVnZXI+IHNEZWZhdWx0U21zU3ViSWRDYWNoZSA9IG5ldyBWb2lkUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlPD4oCiAgICAgICAgICAgIElTdWI6OmdldERlZmF1bHRTbXNTdWJJZCwKICAgICAgICAgICAgQ0FDSEVfS0VZX0RFRkFVTFRfU01TX1NVQl9JRF9QUk9QRVJUWSwKICAgICAgICAgICAgSU5WQUxJRF9TVUJTQ1JJUFRJT05fSUQpOwoKICAgIHByaXZhdGUgc3RhdGljIFZvaWRQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGU8SW50ZWdlcj4gc0FjdGl2ZURhdGFTdWJJZENhY2hlID0gbmV3IFZvaWRQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGU8PigKICAgICAgICAgICAgSVN1Yjo6Z2V0QWN0aXZlRGF0YVN1YnNjcmlwdGlvbklkLAogICAgICAgICAgICBDQUNIRV9LRVlfQUNUSVZFX0RBVEFfU1VCX0lEX1BST1BFUlRZLAogICAgICAgICAgICBJTlZBTElEX1NVQlNDUklQVElPTl9JRCk7CgogICAgcHJpdmF0ZSBzdGF0aWMgSW50ZWdlclByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZTxJbnRlZ2VyPiBzU2xvdEluZGV4Q2FjaGUgPSBuZXcgSW50ZWdlclByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZTw+KAogICAgICAgICAgICBJU3ViOjpnZXRTbG90SW5kZXgsCiAgICAgICAgICAgIENBQ0hFX0tFWV9TTE9UX0lOREVYX1BST1BFUlRZLAogICAgICAgICAgICBJTlZBTElEX1NJTV9TTE9UX0lOREVYKTsKCiAgICAvKiogQ2FjaGUgZGVwZW5kcyBvbiBnZXREZWZhdWx0U3ViSWQsIHNvIHdlIHVzZSB0aGUgZGVmYXVsdFN1YklkIGNhY2hlIGtleSAqLwogICAgcHJpdmF0ZSBzdGF0aWMgSW50ZWdlclByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZTxJbnRlZ2VyPiBzUGhvbmVJZENhY2hlID0gbmV3IEludGVnZXJQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGU8PigKICAgICAgICAgICAgSVN1Yjo6Z2V0UGhvbmVJZCwKICAgICAgICAgICAgQ0FDSEVfS0VZX0RFRkFVTFRfU1VCX0lEX1BST1BFUlRZLAogICAgICAgICAgICBJTlZBTElEX1BIT05FX0lOREVYKTsKCiAgICAvKioKICAgICAqIEdlbmVyYXRlcyBhIGNvbnRlbnQge0BsaW5rIFVyaX0gdXNlZCB0byByZWNlaXZlIHVwZGF0ZXMgb24gc2ltSW5mbyBjaGFuZ2UKICAgICAqIG9uIHRoZSBnaXZlbiBzdWJzY3JpcHRpb25JZAogICAgICogCiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uSWQgdGhlIHN1YnNjcmlwdGlvbklkIHRvIHJlY2VpdmUgdXBkYXRlcyBvbgogICAgICogQHJldHVybiB0aGUgVXJpIHVzZWQgdG8gb2JzZXJ2ZSBjYXJyaWVyIGlkZW50aXR5IGNoYW5nZXMKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgVXJpIGdldFVyaUZvclN1YnNjcmlwdGlvbklkKGludCBzdWJzY3JpcHRpb25JZCkgewogICAgICAgIHJldHVybiBVcmkud2l0aEFwcGVuZGVkUGF0aChDT05URU5UX1VSSSwgU3RyaW5nLnZhbHVlT2Yoc3Vic2NyaXB0aW9uSWQpKTsKICAgIH0KCiAgICAvKioKICAgICAqIEEgY29udGVudCB7QGxpbmsgVXJpfSB1c2VkIHRvIHJlY2VpdmUgdXBkYXRlcyBvbiB3ZmMgZW5hYmxlZCB1c2VyIHNldHRpbmcuCiAgICAgKiA8cD4KICAgICAqIFVzZSB0aGlzIHtAbGluayBVcml9IHdpdGggYSB7QGxpbmsgQ29udGVudE9ic2VydmVyfSB0byBiZSBub3RpZmllZCBvZiBjaGFuZ2VzCiAgICAgKiB0byB0aGUKICAgICAqIHN1YnNjcmlwdGlvbiB3ZmMgZW5hYmxlZCB7QGxpbmsgSW1zTW1UZWxNYW5hZ2VyI2lzVm9XaUZpU2V0dGluZ0VuYWJsZWQoKX0KICAgICAqIHdoaWxlIHlvdXIgYXBwIGlzIHJ1bm5pbmcuIFlvdSBjYW4gYWxzbyB1c2UgYQogICAgICoge0BsaW5rIGFuZHJvaWQuYXBwLmpvYi5Kb2JTZXJ2aWNlfQogICAgICogdG8gZW5zdXJlIHlvdXIgYXBwCiAgICAgKiBpcyBub3RpZmllZCBvZiBjaGFuZ2VzIHRvIHRoZSB7QGxpbmsgVXJpfSBldmVuIHdoZW4gaXQgaXMgbm90IHJ1bm5pbmcuCiAgICAgKiBOb3RlLCBob3dldmVyLCB0aGF0IHVzaW5nIGEge0BsaW5rIGFuZHJvaWQuYXBwLmpvYi5Kb2JTZXJ2aWNlfSBkb2VzIG5vdAogICAgICogZ3VhcmFudGVlIHRpbWVseQogICAgICogZGVsaXZlcnkgb2YgdXBkYXRlcyB0byB0aGUge0BsaW5rIFVyaX0uCiAgICAgKiBUbyBiZSBub3RpZmllZCBvZiBjaGFuZ2VzIHRvIGEgc3BlY2lmaWMgc3ViSWQsIGFwcGVuZCBzdWJJZCB0byB0aGUgVVJJCiAgICAgKiB7QGxpbmsgVXJpI3dpdGhBcHBlbmRlZFBhdGgoVXJpLCBTdHJpbmcpfS4KICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgQE5vbk51bGwKICAgIEBTeXN0ZW1BcGkKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgVXJpIFdGQ19FTkFCTEVEX0NPTlRFTlRfVVJJID0gVXJpLndpdGhBcHBlbmRlZFBhdGgoQ09OVEVOVF9VUkksICJ3ZmMiKTsKCiAgICAvKioKICAgICAqIEEgY29udGVudCB7QGxpbmsgVXJpfSB1c2VkIHRvIHJlY2VpdmUgdXBkYXRlcyBvbiBhZHZhbmNlZCBjYWxsaW5nIHVzZXIKICAgICAqIHNldHRpbmcKICAgICAqIAogICAgICogQHNlZSBJbXNNbVRlbE1hbmFnZXIjaXNBZHZhbmNlZENhbGxpbmdTZXR0aW5nRW5hYmxlZCgpLgogICAgICogICAgICA8cD4KICAgICAqICAgICAgVXNlIHRoaXMge0BsaW5rIFVyaX0gd2l0aCBhIHtAbGluayBDb250ZW50T2JzZXJ2ZXJ9IHRvIGJlIG5vdGlmaWVkIG9mCiAgICAgKiAgICAgIGNoYW5nZXMgdG8gdGhlCiAgICAgKiAgICAgIHN1YnNjcmlwdGlvbiBhZHZhbmNlZCBjYWxsaW5nIGVuYWJsZWQKICAgICAqICAgICAge0BsaW5rIEltc01tVGVsTWFuYWdlciNpc0FkdmFuY2VkQ2FsbGluZ1NldHRpbmdFbmFibGVkKCl9IHdoaWxlIHlvdXIgYXBwCiAgICAgKiAgICAgIGlzIHJ1bm5pbmcuCiAgICAgKiAgICAgIFlvdSBjYW4gYWxzbyB1c2UgYSB7QGxpbmsgYW5kcm9pZC5hcHAuam9iLkpvYlNlcnZpY2V9IHRvIGVuc3VyZSB5b3VyIGFwcAogICAgICogICAgICBpcyBub3RpZmllZCBvZgogICAgICogICAgICBjaGFuZ2VzIHRvIHRoZSB7QGxpbmsgVXJpfSBldmVuIHdoZW4gaXQgaXMgbm90IHJ1bm5pbmcuCiAgICAgKiAgICAgIE5vdGUsIGhvd2V2ZXIsIHRoYXQgdXNpbmcgYSB7QGxpbmsgYW5kcm9pZC5hcHAuam9iLkpvYlNlcnZpY2V9IGRvZXMgbm90CiAgICAgKiAgICAgIGd1YXJhbnRlZSB0aW1lbHkKICAgICAqICAgICAgZGVsaXZlcnkgb2YgdXBkYXRlcyB0byB0aGUge0BsaW5rIFVyaX0uCiAgICAgKiAgICAgIFRvIGJlIG5vdGlmaWVkIG9mIGNoYW5nZXMgdG8gYSBzcGVjaWZpYyBzdWJJZCwgYXBwZW5kIHN1YklkIHRvIHRoZSBVUkkKICAgICAqICAgICAge0BsaW5rIFVyaSN3aXRoQXBwZW5kZWRQYXRoKFVyaSwgU3RyaW5nKX0uCiAgICAgKiBAaGlkZQogICAgICovCiAgICBATm9uTnVsbAogICAgQFN5c3RlbUFwaQogICAgcHVibGljIHN0YXRpYyBmaW5hbCBVcmkgQURWQU5DRURfQ0FMTElOR19FTkFCTEVEX0NPTlRFTlRfVVJJID0gVXJpLndpdGhBcHBlbmRlZFBhdGgoCiAgICAgICAgICAgIENPTlRFTlRfVVJJLCAiYWR2YW5jZWRfY2FsbGluZyIpOwoKICAgIC8qKgogICAgICogQSBjb250ZW50IHtAbGluayBVcml9IHVzZWQgdG8gcmVjZWl2ZSB1cGRhdGVzIG9uIHdmYyBtb2RlIHNldHRpbmcuCiAgICAgKiA8cD4KICAgICAqIFVzZSB0aGlzIHtAbGluayBVcml9IHdpdGggYSB7QGxpbmsgQ29udGVudE9ic2VydmVyfSB0byBiZSBub3RpZmllZCBvZiBjaGFuZ2VzCiAgICAgKiB0byB0aGUKICAgICAqIHN1YnNjcmlwdGlvbiB3ZmMgbW9kZSB7QGxpbmsgSW1zTW1UZWxNYW5hZ2VyI2dldFZvV2lGaU1vZGVTZXR0aW5nKCl9CiAgICAgKiB3aGlsZSB5b3VyIGFwcCBpcyBydW5uaW5nLiBZb3UgY2FuIGFsc28gdXNlIGEKICAgICAqIHtAbGluayBhbmRyb2lkLmFwcC5qb2IuSm9iU2VydmljZX0gdG8gZW5zdXJlCiAgICAgKiB5b3VyIGFwcCBpcyBub3RpZmllZCBvZiBjaGFuZ2VzIHRvIHRoZSB7QGxpbmsgVXJpfSBldmVuIHdoZW4gaXQgaXMgbm90CiAgICAgKiBydW5uaW5nLgogICAgICogTm90ZSwgaG93ZXZlciwgdGhhdCB1c2luZyBhIHtAbGluayBhbmRyb2lkLmFwcC5qb2IuSm9iU2VydmljZX0gZG9lcyBub3QKICAgICAqIGd1YXJhbnRlZSB0aW1lbHkKICAgICAqIGRlbGl2ZXJ5IG9mIHVwZGF0ZXMgdG8gdGhlIHtAbGluayBVcml9LgogICAgICogVG8gYmUgbm90aWZpZWQgb2YgY2hhbmdlcyB0byBhIHNwZWNpZmljIHN1YklkLCBhcHBlbmQgc3ViSWQgdG8gdGhlIFVSSQogICAgICoge0BsaW5rIFVyaSN3aXRoQXBwZW5kZWRQYXRoKFVyaSwgU3RyaW5nKX0uCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBOb25OdWxsCiAgICBAU3lzdGVtQXBpCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFVyaSBXRkNfTU9ERV9DT05URU5UX1VSSSA9IFVyaS53aXRoQXBwZW5kZWRQYXRoKENPTlRFTlRfVVJJLCAid2ZjX21vZGUiKTsKCiAgICAvKioKICAgICAqIEEgY29udGVudCB7QGxpbmsgVXJpfSB1c2VkIHRvIHJlY2VpdmUgdXBkYXRlcyBvbiB3ZmMgcm9hbWluZyBtb2RlIHNldHRpbmcuCiAgICAgKiA8cD4KICAgICAqIFVzZSB0aGlzIHtAbGluayBVcml9IHdpdGggYSB7QGxpbmsgQ29udGVudE9ic2VydmVyfSB0byBiZSBub3RpZmllZCBvZiBjaGFuZ2VzCiAgICAgKiB0byB0aGUKICAgICAqIHN1YnNjcmlwdGlvbiB3ZmMgcm9hbWluZyBtb2RlCiAgICAgKiB7QGxpbmsgSW1zTW1UZWxNYW5hZ2VyI2dldFZvV2lGaVJvYW1pbmdNb2RlU2V0dGluZygpfQogICAgICogd2hpbGUgeW91ciBhcHAgaXMgcnVubmluZy4gWW91IGNhbiBhbHNvIHVzZSBhCiAgICAgKiB7QGxpbmsgYW5kcm9pZC5hcHAuam9iLkpvYlNlcnZpY2V9CiAgICAgKiB0byBlbnN1cmUgeW91ciBhcHAgaXMgbm90aWZpZWQgb2YgY2hhbmdlcyB0byB0aGUge0BsaW5rIFVyaX0gZXZlbiB3aGVuIGl0IGlzCiAgICAgKiBub3QgcnVubmluZy4KICAgICAqIE5vdGUsIGhvd2V2ZXIsIHRoYXQgdXNpbmcgYSB7QGxpbmsgYW5kcm9pZC5hcHAuam9iLkpvYlNlcnZpY2V9IGRvZXMgbm90CiAgICAgKiBndWFyYW50ZWUgdGltZWx5CiAgICAgKiBkZWxpdmVyeSBvZiB1cGRhdGVzIHRvIHRoZSB7QGxpbmsgVXJpfS4KICAgICAqIFRvIGJlIG5vdGlmaWVkIG9mIGNoYW5nZXMgdG8gYSBzcGVjaWZpYyBzdWJJZCwgYXBwZW5kIHN1YklkIHRvIHRoZSBVUkkKICAgICAqIHtAbGluayBVcmkjd2l0aEFwcGVuZGVkUGF0aChVcmksIFN0cmluZyl9LgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBATm9uTnVsbAogICAgQFN5c3RlbUFwaQogICAgcHVibGljIHN0YXRpYyBmaW5hbCBVcmkgV0ZDX1JPQU1JTkdfTU9ERV9DT05URU5UX1VSSSA9IFVyaS53aXRoQXBwZW5kZWRQYXRoKAogICAgICAgICAgICBDT05URU5UX1VSSSwgIndmY19yb2FtaW5nX21vZGUiKTsKCiAgICAvKioKICAgICAqIEEgY29udGVudCB7QGxpbmsgVXJpfSB1c2VkIHRvIHJlY2VpdmUgdXBkYXRlcyBvbiB2dCh2aWRlbyB0ZWxlcGhvbnkgb3ZlciBJTVMpCiAgICAgKiBlbmFibGVkCiAgICAgKiBzZXR0aW5nLgogICAgICogPHA+CiAgICAgKiBVc2UgdGhpcyB7QGxpbmsgVXJpfSB3aXRoIGEge0BsaW5rIENvbnRlbnRPYnNlcnZlcn0gdG8gYmUgbm90aWZpZWQgb2YgY2hhbmdlcwogICAgICogdG8gdGhlCiAgICAgKiBzdWJzY3JpcHRpb24gdnQgZW5hYmxlZCB7QGxpbmsgSW1zTW1UZWxNYW5hZ2VyI2lzVnRTZXR0aW5nRW5hYmxlZCgpfQogICAgICogd2hpbGUgeW91ciBhcHAgaXMgcnVubmluZy4gWW91IGNhbiBhbHNvIHVzZSBhCiAgICAgKiB7QGxpbmsgYW5kcm9pZC5hcHAuam9iLkpvYlNlcnZpY2V9IHRvIGVuc3VyZQogICAgICogeW91ciBhcHAgaXMgbm90aWZpZWQgb2YgY2hhbmdlcyB0byB0aGUge0BsaW5rIFVyaX0gZXZlbiB3aGVuIGl0IGlzIG5vdAogICAgICogcnVubmluZy4KICAgICAqIE5vdGUsIGhvd2V2ZXIsIHRoYXQgdXNpbmcgYSB7QGxpbmsgYW5kcm9pZC5hcHAuam9iLkpvYlNlcnZpY2V9IGRvZXMgbm90CiAgICAgKiBndWFyYW50ZWUgdGltZWx5CiAgICAgKiBkZWxpdmVyeSBvZiB1cGRhdGVzIHRvIHRoZSB7QGxpbmsgVXJpfS4KICAgICAqIFRvIGJlIG5vdGlmaWVkIG9mIGNoYW5nZXMgdG8gYSBzcGVjaWZpYyBzdWJJZCwgYXBwZW5kIHN1YklkIHRvIHRoZSBVUkkKICAgICAqIHtAbGluayBVcmkjd2l0aEFwcGVuZGVkUGF0aChVcmksIFN0cmluZyl9LgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBATm9uTnVsbAogICAgQFN5c3RlbUFwaQogICAgcHVibGljIHN0YXRpYyBmaW5hbCBVcmkgVlRfRU5BQkxFRF9DT05URU5UX1VSSSA9IFVyaS53aXRoQXBwZW5kZWRQYXRoKAogICAgICAgICAgICBDT05URU5UX1VSSSwgInZ0X2VuYWJsZWQiKTsKCiAgICAvKioKICAgICAqIEEgY29udGVudCB7QGxpbmsgVXJpfSB1c2VkIHRvIHJlY2VpdmUgdXBkYXRlcyBvbiB3ZmMgcm9hbWluZyBlbmFibGVkIHNldHRpbmcuCiAgICAgKiA8cD4KICAgICAqIFVzZSB0aGlzIHtAbGluayBVcml9IHdpdGggYSB7QGxpbmsgQ29udGVudE9ic2VydmVyfSB0byBiZSBub3RpZmllZCBvZiBjaGFuZ2VzCiAgICAgKiB0byB0aGUKICAgICAqIHN1YnNjcmlwdGlvbiB3ZmMgcm9hbWluZyBlbmFibGVkCiAgICAgKiB7QGxpbmsgSW1zTW1UZWxNYW5hZ2VyI2lzVm9XaUZpUm9hbWluZ1NldHRpbmdFbmFibGVkKCl9CiAgICAgKiB3aGlsZSB5b3VyIGFwcCBpcyBydW5uaW5nLiBZb3UgY2FuIGFsc28gdXNlIGEKICAgICAqIHtAbGluayBhbmRyb2lkLmFwcC5qb2IuSm9iU2VydmljZX0gdG8gZW5zdXJlCiAgICAgKiB5b3VyIGFwcCBpcyBub3RpZmllZCBvZiBjaGFuZ2VzIHRvIHRoZSB7QGxpbmsgVXJpfSBldmVuIHdoZW4gaXQgaXMgbm90CiAgICAgKiBydW5uaW5nLgogICAgICogTm90ZSwgaG93ZXZlciwgdGhhdCB1c2luZyBhIHtAbGluayBhbmRyb2lkLmFwcC5qb2IuSm9iU2VydmljZX0gZG9lcyBub3QKICAgICAqIGd1YXJhbnRlZSB0aW1lbHkKICAgICAqIGRlbGl2ZXJ5IG9mIHVwZGF0ZXMgdG8gdGhlIHtAbGluayBVcml9LgogICAgICogVG8gYmUgbm90aWZpZWQgb2YgY2hhbmdlcyB0byBhIHNwZWNpZmljIHN1YklkLCBhcHBlbmQgc3ViSWQgdG8gdGhlIFVSSQogICAgICoge0BsaW5rIFVyaSN3aXRoQXBwZW5kZWRQYXRoKFVyaSwgU3RyaW5nKX0uCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBOb25OdWxsCiAgICBAU3lzdGVtQXBpCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFVyaSBXRkNfUk9BTUlOR19FTkFCTEVEX0NPTlRFTlRfVVJJID0gVXJpLndpdGhBcHBlbmRlZFBhdGgoCiAgICAgICAgICAgIENPTlRFTlRfVVJJLCAid2ZjX3JvYW1pbmdfZW5hYmxlZCIpOwoKICAgIC8qKgogICAgICogQSBjb250ZW50IHtAbGluayB1cml9IHVzZWQgdG8gY2FsbCB0aGUgYXBwcm9wcmlhdGUgYmFja3VwIG9yIHJlc3RvcmUgbWV0aG9kCiAgICAgKiBmb3Igc2ltLXNwZWNpZmljCiAgICAgKiBzZXR0aW5ncwogICAgICogPHA+CiAgICAgKiBTZWUge0BsaW5rICNHRVRfU0lNX1NQRUNJRklDX1NFVFRJTkdTX01FVEhPRF9OQU1FfSBhbmQge0BsaW5rCiAgICAgKiAjUkVTVE9SRV9TSU1fU1BFQ0lGSUNfU0VUVElOR1NfTUVUSE9EX05BTUV9IGZvciBpbmZvcm1hdGlvbiBvbiB3aGF0IG1ldGhvZCB0bwogICAgICogY2FsbC4KICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgQE5vbk51bGwKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgVXJpIFNJTV9JTkZPX0JBQ0tVUF9BTkRfUkVTVE9SRV9DT05URU5UX1VSSSA9IFVyaS53aXRoQXBwZW5kZWRQYXRoKAogICAgICAgICAgICBDT05URU5UX1VSSSwgImJhY2t1cF9hbmRfcmVzdG9yZSIpOwoKICAgIC8qKgogICAgICogQSBjb250ZW50IHtAbGluayB1cml9IHVzZWQgdG8gbm90aWZ5IGNvbnRlbnRvYnNlcnZlcnMgbGlzdGVuaW5nIHRvIHNpbWluZm8KICAgICAqIHJlc3RvcmUgZHVyaW5nCiAgICAgKiBTdVcuCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBOb25OdWxsCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFVyaSBTSU1fSU5GT19TVVdfUkVTVE9SRV9DT05URU5UX1VSSSA9IFVyaS53aXRoQXBwZW5kZWRQYXRoKAogICAgICAgICAgICBTSU1fSU5GT19CQUNLVVBfQU5EX1JFU1RPUkVfQ09OVEVOVF9VUkksICJzdXdfcmVzdG9yZSIpOwoKICAgIC8qKgogICAgICogQSBjb250ZW50IHtAbGluayBVcml9IHVzZWQgdG8gcmVjZWl2ZSB1cGRhdGVzIG9uIGNyb3NzIHNpbSBlbmFibGVkIHVzZXIKICAgICAqIHNldHRpbmcuCiAgICAgKiA8cD4KICAgICAqIFVzZSB0aGlzIHtAbGluayBVcml9IHdpdGggYSB7QGxpbmsgQ29udGVudE9ic2VydmVyfSB0byBiZSBub3RpZmllZCBvZiBjaGFuZ2VzCiAgICAgKiB0byB0aGUKICAgICAqIHN1YnNjcmlwdGlvbiBjcm9zcyBzaW0gY2FsbGluZyBlbmFibGVkCiAgICAgKiB7QGxpbmsgSW1zTW1UZWxNYW5hZ2VyI2lzQ3Jvc3NTaW1DYWxsaW5nRW5hYmxlZCgpfQogICAgICogd2hpbGUgeW91ciBhcHAgaXMgcnVubmluZy4gWW91IGNhbiBhbHNvIHVzZSBhCiAgICAgKiB7QGxpbmsgYW5kcm9pZC5hcHAuam9iLkpvYlNlcnZpY2V9CiAgICAgKiB0byBlbnN1cmUgeW91ciBhcHAKICAgICAqIGlzIG5vdGlmaWVkIG9mIGNoYW5nZXMgdG8gdGhlIHtAbGluayBVcml9IGV2ZW4gd2hlbiBpdCBpcyBub3QgcnVubmluZy4KICAgICAqIE5vdGUsIGhvd2V2ZXIsIHRoYXQgdXNpbmcgYSB7QGxpbmsgYW5kcm9pZC5hcHAuam9iLkpvYlNlcnZpY2V9IGRvZXMgbm90CiAgICAgKiBndWFyYW50ZWUgdGltZWx5CiAgICAgKiBkZWxpdmVyeSBvZiB1cGRhdGVzIHRvIHRoZSB7QGxpbmsgVXJpfS4KICAgICAqIFRvIGJlIG5vdGlmaWVkIG9mIGNoYW5nZXMgdG8gYSBzcGVjaWZpYyBzdWJJZCwgYXBwZW5kIHN1YklkIHRvIHRoZSBVUkkKICAgICAqIHtAbGluayBVcmkjd2l0aEFwcGVuZGVkUGF0aChVcmksIFN0cmluZyl9LgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBATm9uTnVsbAogICAgQFN5c3RlbUFwaQogICAgcHVibGljIHN0YXRpYyBmaW5hbCBVcmkgQ1JPU1NfU0lNX0VOQUJMRURfQ09OVEVOVF9VUkkgPSBVcmkud2l0aEFwcGVuZGVkUGF0aChDT05URU5UX1VSSSwKICAgICAgICAgICAgU2ltSW5mby5DT0xVTU5fQ1JPU1NfU0lNX0NBTExJTkdfRU5BQkxFRCk7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciB1bmlxdWUga2V5IGNvbHVtbiBuYW1lIGlzIHRoZSBzdWJzY3JpcHRpb24gaWQuCiAgICAgKiA8UD4KICAgICAqIFR5cGU6IFRFWFQgKFN0cmluZykKICAgICAqIDwvUD4KICAgICAqLwogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBVTklRVUVfS0VZX1NVQlNDUklQVElPTl9JRCA9IFNpbUluZm8uQ09MVU1OX1VOSVFVRV9LRVlfU1VCU0NSSVBUSU9OX0lEOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIGEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBzdWJzY3JpcHRpb24KICAgICAqIHdpdGhpbiB0aGUKICAgICAqIHNwZWNpZmljIHN1YnNjcmlwdGlvbiB0eXBlLiBGb3IgZXhhbXBsZSwgaXQgY29udGFpbnMgU0lNIElDQyBJZGVudGlmaWVyCiAgICAgKiBzdWJzY3JpcHRpb25zCiAgICAgKiBvbiBMb2NhbCBTSU1zLiBhbmQgTWFjLWFkZHJlc3MgZm9yIFJlbW90ZS1TSU0gU3Vic2NyaXB0aW9ucyBmb3IgQmx1ZXRvb3RoCiAgICAgKiBkZXZpY2VzLgogICAgICogPFA+CiAgICAgKiBUeXBlOiBURVhUIChTdHJpbmcpCiAgICAgKiA8L1A+CiAgICAgKi8KICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgSUNDX0lEID0gU2ltSW5mby5DT0xVTU5fSUNDX0lEOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHVzZXIgU0lNX1NsT1RfSU5ERVgKICAgICAqIDxQPgogICAgICogVHlwZTogSU5URUdFUiAoaW50KQogICAgICogPC9QPgogICAgICovCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIFNJTV9TTE9UX0lOREVYID0gU2ltSW5mby5DT0xVTU5fU0lNX1NMT1RfSU5ERVg7CgogICAgLyoqIFNJTSBpcyBub3QgaW5zZXJ0ZWQgKi8KICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgU0lNX05PVF9JTlNFUlRFRCA9IFNpbUluZm8uU0lNX05PVF9JTlNFUlRFRDsKCiAgICAvKioKICAgICAqIFRoZSBzbG90LWluZGV4IGZvciBCbHVldG9vdGggUmVtb3RlLVNJTSBzdWJzY3JpcHRpb25zCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFNMT1RfSU5ERVhfRk9SX1JFTU9URV9TSU1fU1VCID0gSU5WQUxJRF9TSU1fU0xPVF9JTkRFWDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIFN1YnNjcmlwdGlvbi10eXBlLgogICAgICogPFA+CiAgICAgKiBUeXBlOiBJTlRFR0VSIChpbnQpCiAgICAgKiA8L1A+CiAgICAgKiB7QGxpbmsgI1NVQlNDUklQVElPTl9UWVBFX0xPQ0FMX1NJTX0gZm9yIExvY2FsLVNJTSBTdWJzY3JpcHRpb25zLAogICAgICoge0BsaW5rICNTVUJTQ1JJUFRJT05fVFlQRV9SRU1PVEVfU0lNfSBmb3IgUmVtb3RlLVNJTSBTdWJzY3JpcHRpb25zLgogICAgICogRGVmYXVsdCB2YWx1ZSBpcyAwLgogICAgICovCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIFNVQlNDUklQVElPTl9UWVBFID0gU2ltSW5mby5DT0xVTU5fU1VCU0NSSVBUSU9OX1RZUEU7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBkYXRhX2VuYWJsZWRfb3ZlcnJpZGVfcnVsZXMuCiAgICAgKiBJdCdzIGEgbGlzdCBvZiBydWxlcyBmb3Igb3ZlcnJpZGluZyBkYXRhIGVuYWJsZWQgc2V0dGluZ3MuIFRoZSBzeW50YXggaXMKICAgICAqIEZvciBleGFtcGxlLCAibW1zPW5vbkRlZmF1bHQiIGluZGljYXRlcyBlbmFibGluZyBkYXRhIGZvciBtbXMgaW4gbm9uLWRlZmF1bHQKICAgICAqIHN1YnNjcmlwdGlvbi4KICAgICAqICJkZWZhdWx0PW5vbkRlZmF1bHQmaW5Wb2ljZUNhbGwiIGluZGljYXRlcyBlbmFibGluZyBkYXRhIGZvciBpbnRlcm5ldCBpbgogICAgICogbm9uLWRlZmF1bHQKICAgICAqIHN1YnNjcmlwdGlvbiBhbmQgd2hpbGUgaXMgaW4gdm9pY2UgY2FsbC4KICAgICAqCiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGVtcHR5IHN0cmluZy4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBEQVRBX0VOQUJMRURfT1ZFUlJJREVfUlVMRVMgPSBTaW1JbmZvLkNPTFVNTl9EQVRBX0VOQUJMRURfT1ZFUlJJREVfUlVMRVM7CgogICAgLyoqIEBoaWRlICovCiAgICBAUmV0ZW50aW9uKFJldGVudGlvblBvbGljeS5TT1VSQ0UpCiAgICBASW50RGVmKHByZWZpeCA9IHsgIlNVQlNDUklQVElPTl9UWVBFXyIgfSwgdmFsdWUgPSB7CiAgICAgICAgICAgIFNVQlNDUklQVElPTl9UWVBFX0xPQ0FMX1NJTSwKICAgICAgICAgICAgU1VCU0NSSVBUSU9OX1RZUEVfUkVNT1RFX1NJTSB9KQogICAgcHVibGljIEBpbnRlcmZhY2UgU3Vic2NyaXB0aW9uVHlwZSB7CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGlzIGNvbnN0YW50IGlzIHRvIGRlc2lnbmF0ZSBhIHN1YnNjcmlwdGlvbiBhcyBhIExvY2FsLVNJTSBTdWJzY3JpcHRpb24uCiAgICAgKiA8cD4KICAgICAqIEEgTG9jYWwtU0lNIGNhbiBiZSBhIHBoeXNpY2FsIFNJTSBpbnNlcnRlZCBpbnRvIGEgc2ltLXNsb3QgaW4gdGhlIGRldmljZSwgb3IKICAgICAqIGVTSU0gb24gdGhlCiAgICAgKiBkZXZpY2UuCiAgICAgKiA8L3A+CiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFNVQlNDUklQVElPTl9UWVBFX0xPQ0FMX1NJTSA9IFNpbUluZm8uU1VCU0NSSVBUSU9OX1RZUEVfTE9DQUxfU0lNOwoKICAgIC8qKgogICAgICogVGhpcyBjb25zdGFudCBpcyB0byBkZXNpZ25hdGUgYSBzdWJzY3JpcHRpb24gYXMgYSBSZW1vdGUtU0lNIFN1YnNjcmlwdGlvbi4KICAgICAqIDxwPgogICAgICogQSBSZW1vdGUtU0lNIHN1YnNjcmlwdGlvbiBpcyBmb3IgYSBTSU0gb24gYSBwaG9uZSBjb25uZWN0ZWQgdG8gdGhpcyBkZXZpY2UKICAgICAqIHZpYSBzb21lCiAgICAgKiBjb25uZWN0aXZpdHkgbWVjaGFuaXNtLCBmb3IgZXhhbXBsZSBibHVldG9vdGguIFNpbWlsYXIgdG8gTG9jYWwgU0lNLCB0aGlzCiAgICAgKiBzdWJzY3JpcHRpb24gY2FuCiAgICAgKiBiZSB1c2VkIGZvciBTTVMsIFZvaWNlIGFuZCBkYXRhIGJ5IHByb3h5aW5nIGRhdGEgdGhyb3VnaCB0aGUgY29ubmVjdGVkCiAgICAgKiBkZXZpY2UuCiAgICAgKiBDZXJ0YWluIGRhdGEgb2YgdGhlIFNJTSwgc3VjaCBhcyBJTUVJLCBhcmUgbm90IGFjY2Vzc2libGUgZm9yIFJlbW90ZSBTSU1zLgogICAgICogPC9wPgogICAgICoKICAgICAqIDxwPgogICAgICogQSBSZW1vdGUtU0lNIGlzIGF2YWlsYWJsZSBvbmx5IGFzIGxvbmcgdGhlIHBob25lIHN0YXlzIGNvbm5lY3RlZCB0byB0aGlzCiAgICAgKiBkZXZpY2UuCiAgICAgKiBXaGVuIHRoZSBwaG9uZSBkaXNjb25uZWN0cywgUmVtb3RlLVNJTSBzdWJzY3JpcHRpb24gaXMgcmVtb3ZlZCBmcm9tIHRoaXMKICAgICAqIGRldmljZSBhbmQgaXMKICAgICAqIG5vIGxvbmdlciBrbm93bi4gQWxsIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBzdWJzY3JpcHRpb24sIHN1Y2ggYXMgc3RvcmVkCiAgICAgKiBTTVMsIGNhbGwgbG9ncywKICAgICAqIGNvbnRhY3RzIGV0YywgYXJlIHJlbW92ZWQgZnJvbSB0aGlzIGRldmljZS4KICAgICAqIDwvcD4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIElmIHRoZSBwaG9uZSByZS1jb25uZWN0cyB0byB0aGlzIGRldmljZSwgYSBuZXcgUmVtb3RlLVNJTSBzdWJzY3JpcHRpb24gaXMKICAgICAqIGNyZWF0ZWQgZm9yCiAgICAgKiB0aGUgcGhvbmUuIFRoZSBTdWJzY3JpcHRpb24gSWQgYXNzb2NpYXRlZCB3aXRoIHRoZSBuZXcgc3Vic2NyaXB0aW9uIGlzCiAgICAgKiBkaWZmZXJlbnQgZnJvbQogICAgICogdGhlIFN1YnNjcmlwdGlvbiBJZCBvZiB0aGUgcHJldmlvdXMgUmVtb3RlLVNJTSBzdWJzY3JpcHRpb24gY3JlYXRlZCAoYW5kCiAgICAgKiByZW1vdmVkKSBmb3IgdGhlCiAgICAgKiBwaG9uZTsgaS5lLiwgbmV3IFJlbW90ZS1TSU0gc3Vic2NyaXB0aW9uIHRyZWF0cyB0aGUgcmVjb25uZWN0ZWQgcGhvbmUgYXMgYQogICAgICogUmVtb3RlLVNJTSB0aGF0CiAgICAgKiB3YXMgbmV2ZXIgc2VlbiBiZWZvcmUuCiAgICAgKiA8L3A+CiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFNVQlNDUklQVElPTl9UWVBFX1JFTU9URV9TSU0gPSBTaW1JbmZvLlNVQlNDUklQVElPTl9UWVBFX1JFTU9URV9TSU07CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgdXNlciBkaXNwbGF5ZWQgbmFtZS4KICAgICAqIDxQPgogICAgICogVHlwZTogVEVYVCAoU3RyaW5nKQogICAgICogPC9QPgogICAgICovCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIERJU1BMQVlfTkFNRSA9IFNpbUluZm8uQ09MVU1OX0RJU1BMQVlfTkFNRTsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciB0aGUgc2VydmljZSBwcm92aWRlciBuYW1lIGZvciB0aGUgU0lNLgogICAgICogPFA+CiAgICAgKiBUeXBlOiBURVhUIChTdHJpbmcpCiAgICAgKiA8L1A+CiAgICAgKi8KICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0FSUklFUl9OQU1FID0gU2ltSW5mby5DT0xVTU5fQ0FSUklFUl9OQU1FOwoKICAgIC8qKgogICAgICogRGVmYXVsdCBuYW1lIHJlc291cmNlCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IERFRkFVTFRfTkFNRV9SRVMgPSBjb20uYW5kcm9pZC5pbnRlcm5hbC5SLnN0cmluZy51bmtub3duTmFtZTsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBzb3VyY2Ugb2YgdGhlIHVzZXIgZGlzcGxheWVkIG5hbWUuCiAgICAgKiA8UD4KICAgICAqIFR5cGU6IElOVCAoaW50KQogICAgICogPC9QPgogICAgICogd2l0aCBvbmUgb2YgdGhlIE5BTUVfU09VUkNFX1hYWFggdmFsdWVzIGJlbG93CiAgICAgKgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgTkFNRV9TT1VSQ0UgPSBTaW1JbmZvLkNPTFVNTl9OQU1FX1NPVVJDRTsKCiAgICAvKioKICAgICAqIFRoZSBuYW1lX3NvdXJjZSBpcyBmcm9tIHRoZSBjYXJyaWVyIGlkLgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBOQU1FX1NPVVJDRV9DQVJSSUVSX0lEID0gU2ltSW5mby5OQU1FX1NPVVJDRV9DQVJSSUVSX0lEOwoKICAgIC8qKgogICAgICogVGhlIG5hbWVfc291cmNlIGlzIGZyb20gU0lNIEVGX1NQTi4KICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgTkFNRV9TT1VSQ0VfU0lNX1NQTiA9IFNpbUluZm8uTkFNRV9TT1VSQ0VfU0lNX1NQTjsKCiAgICAvKioKICAgICAqIFRoZSBuYW1lX3NvdXJjZSBpcyBmcm9tIHVzZXIgaW5wdXQKICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UobWF4VGFyZ2V0U2RrID0gQnVpbGQuVkVSU0lPTl9DT0RFUy5QLCB0cmFja2luZ0J1ZyA9IDExNTYwOTAyMykKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE5BTUVfU09VUkNFX1VTRVJfSU5QVVQgPSBTaW1JbmZvLk5BTUVfU09VUkNFX1VTRVJfSU5QVVQ7CgogICAgLyoqCiAgICAgKiBUaGUgbmFtZV9zb3VyY2UgaXMgY2FycmllciAoY2FycmllciBhcHAsIGNhcnJpZXIgY29uZmlnLCBldGMuKQogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBOQU1FX1NPVVJDRV9DQVJSSUVSID0gU2ltSW5mby5OQU1FX1NPVVJDRV9DQVJSSUVSOwoKICAgIC8qKgogICAgICogVGhlIG5hbWVfc291cmNlIGlzIGZyb20gU0lNIEVGX1BOTi4KICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgTkFNRV9TT1VSQ0VfU0lNX1BOTiA9IFNpbUluZm8uTkFNRV9TT1VSQ0VfU0lNX1BOTjsKCiAgICAvKiogQGhpZGUgKi8KICAgIEBSZXRlbnRpb24oUmV0ZW50aW9uUG9saWN5LlNPVVJDRSkKICAgIEBJbnREZWYocHJlZml4ID0geyAiTkFNRV9TT1VSQ0VfIiB9LCB2YWx1ZSA9IHsKICAgICAgICAgICAgTkFNRV9TT1VSQ0VfQ0FSUklFUl9JRCwKICAgICAgICAgICAgTkFNRV9TT1VSQ0VfU0lNX1NQTiwKICAgICAgICAgICAgTkFNRV9TT1VSQ0VfVVNFUl9JTlBVVCwKICAgICAgICAgICAgTkFNRV9TT1VSQ0VfQ0FSUklFUiwKICAgICAgICAgICAgTkFNRV9TT1VSQ0VfU0lNX1BOTgogICAgfSkKICAgIHB1YmxpYyBAaW50ZXJmYWNlIFNpbURpc3BsYXlOYW1lU291cmNlIHsKICAgIH0KCiAgICAvKioKICAgICAqIERldmljZSBzdGF0dXMgaXMgbm90IHNoYXJlZCB0byBhIHJlbW90ZSBwYXJ0eS4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgRDJEX1NIQVJJTkdfRElTQUJMRUQgPSAwOwoKICAgIC8qKgogICAgICogRGV2aWNlIHN0YXR1cyBpcyBzaGFyZWQgd2l0aCBhbGwgbnVtYmVycyBpbiB0aGUgdXNlcidzIGNvbnRhY3RzLgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBEMkRfU0hBUklOR19BTExfQ09OVEFDVFMgPSAxOwoKICAgIC8qKgogICAgICogRGV2aWNlIHN0YXR1cyBpcyBzaGFyZWQgd2l0aCBhbGwgc2VsZWN0ZWQgY29udGFjdHMuCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IEQyRF9TSEFSSU5HX1NFTEVDVEVEX0NPTlRBQ1RTID0gMjsKCiAgICAvKioKICAgICAqIERldmljZSBzdGF0dXMgaXMgc2hhcmVkIHdoZW5ldmVyIHBvc3NpYmxlLgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBEMkRfU0hBUklOR19BTEwgPSAzOwoKICAgIC8qKiBAaGlkZSAqLwogICAgQFJldGVudGlvbihSZXRlbnRpb25Qb2xpY3kuU09VUkNFKQogICAgQEludERlZihwcmVmaXggPSB7ICJEMkRfU0hBUklOR18iIH0sIHZhbHVlID0gewogICAgICAgICAgICBEMkRfU0hBUklOR19ESVNBQkxFRCwKICAgICAgICAgICAgRDJEX1NIQVJJTkdfQUxMX0NPTlRBQ1RTLAogICAgICAgICAgICBEMkRfU0hBUklOR19TRUxFQ1RFRF9DT05UQUNUUywKICAgICAgICAgICAgRDJEX1NIQVJJTkdfQUxMCiAgICB9KQogICAgcHVibGljIEBpbnRlcmZhY2UgRGV2aWNlVG9EZXZpY2VTdGF0dXNTaGFyaW5nUHJlZmVyZW5jZSB7CiAgICB9CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgZGV2aWNlIHRvIGRldmljZSBzaGFyaW5nIHN0YXR1cy4KICAgICAqIDxQPgogICAgICogVHlwZTogSU5URUdFUiAoaW50KQogICAgICogPC9QPgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBEMkRfU1RBVFVTX1NIQVJJTkcgPSBTaW1JbmZvLkNPTFVNTl9EMkRfU1RBVFVTX1NIQVJJTkc7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgY29udGFjdHMgaW5mb3JtYXRpb24gdGhhdCBhbGxvdyBkZXZpY2UgdG8KICAgICAqIGRldmljZSBzaGFyaW5nLgogICAgICogPFA+CiAgICAgKiBUeXBlOiBURVhUIChTdHJpbmcpCiAgICAgKiA8L1A+CiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIEQyRF9TVEFUVVNfU0hBUklOR19TRUxFQ1RFRF9DT05UQUNUUyA9IFNpbUluZm8uQ09MVU1OX0QyRF9TVEFUVVNfU0hBUklOR19TRUxFQ1RFRF9DT05UQUNUUzsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciB0aGUgY29sb3Igb2YgYSBTSU0uCiAgICAgKiA8UD4KICAgICAqIFR5cGU6IElOVEVHRVIgKGludCkKICAgICAqIDwvUD4KICAgICAqLwogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBIVUUgPSBTaW1JbmZvLkNPTFVNTl9DT0xPUjsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciB0aGUgcGhvbmUgbnVtYmVyIG9mIGEgU0lNLgogICAgICogPFA+CiAgICAgKiBUeXBlOiBURVhUIChTdHJpbmcpCiAgICAgKiA8L1A+CiAgICAgKi8KICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgTlVNQkVSID0gU2ltSW5mby5DT0xVTU5fTlVNQkVSOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHdoZXRoZXIgZGF0YSByb2FtaW5nIGlzIGVuYWJsZWQuCiAgICAgKiA8UD4KICAgICAqIFR5cGU6IElOVEVHRVIgKGludCkKICAgICAqIDwvUD4KICAgICAqLwogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBEQVRBX1JPQU1JTkcgPSBTaW1JbmZvLkNPTFVNTl9EQVRBX1JPQU1JTkc7CgogICAgLyoqIEluZGljYXRlcyB0aGF0IGRhdGEgcm9hbWluZyBpcyBlbmFibGVkIGZvciBhIHN1YnNjcmlwdGlvbiAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgREFUQV9ST0FNSU5HX0VOQUJMRSA9IFNpbUluZm8uREFUQV9ST0FNSU5HX0VOQUJMRTsKCiAgICAvKiogSW5kaWNhdGVzIHRoYXQgZGF0YSByb2FtaW5nIGlzIGRpc2FibGVkIGZvciBhIHN1YnNjcmlwdGlvbiAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgREFUQV9ST0FNSU5HX0RJU0FCTEUgPSBTaW1JbmZvLkRBVEFfUk9BTUlOR19ESVNBQkxFOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHN1YnNjcmlwdGlvbiBjYXJyaWVyIGlkLgogICAgICogCiAgICAgKiBAc2VlIFRlbGVwaG9ueU1hbmFnZXIjZ2V0U2ltQ2FycmllcklkKCkKICAgICAqICAgICAgPHA+CiAgICAgKiAgICAgIFR5cGU6IElOVEVHRVIgKGludCkKICAgICAqICAgICAgPC9wPgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0FSUklFUl9JRCA9IFNpbUluZm8uQ09MVU1OX0NBUlJJRVJfSUQ7CgogICAgLyoqCiAgICAgKiBAaGlkZSBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIEVIUExNTnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBzdWJzY3JpcHRpb24KICAgICAqICAgICAgIDxQPgogICAgICogICAgICAgVHlwZTogVEVYVCAoU3RyaW5nKQogICAgICogICAgICAgPC9QPgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBFSFBMTU5TID0gU2ltSW5mby5DT0xVTU5fRUhQTE1OUzsKCiAgICAvKioKICAgICAqIEBoaWRlIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgSFBMTU5zIGFzc29jaWF0ZWQgd2l0aCB0aGUgc3Vic2NyaXB0aW9uCiAgICAgKiAgICAgICA8UD4KICAgICAqICAgICAgIFR5cGU6IFRFWFQgKFN0cmluZykKICAgICAqICAgICAgIDwvUD4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgSFBMTU5TID0gU2ltSW5mby5DT0xVTU5fSFBMTU5TOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHRoZSBNQ0MgYXNzb2NpYXRlZCB3aXRoIGEgU0lNLCBzdG9yZWQgYXMgYQogICAgICogc3RyaW5nLgogICAgICogPFA+CiAgICAgKiBUeXBlOiBURVhUIChTdHJpbmcpCiAgICAgKiA8L1A+CiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE1DQ19TVFJJTkcgPSBTaW1JbmZvLkNPTFVNTl9NQ0NfU1RSSU5HOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHRoZSBNTkMgYXNzb2NpYXRlZCB3aXRoIGEgU0lNLCBzdG9yZWQgYXMgYQogICAgICogc3RyaW5nLgogICAgICogPFA+CiAgICAgKiBUeXBlOiBURVhUIChTdHJpbmcpCiAgICAgKiA8L1A+CiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE1OQ19TVFJJTkcgPSBTaW1JbmZvLkNPTFVNTl9NTkNfU1RSSU5HOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHRoZSBNQ0MgYXNzb2NpYXRlZCB3aXRoIGEgU0lNLgogICAgICogPFA+CiAgICAgKiBUeXBlOiBJTlRFR0VSIChpbnQpCiAgICAgKiA8L1A+CiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE1DQyA9IFNpbUluZm8uQ09MVU1OX01DQzsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciB0aGUgTU5DIGFzc29jaWF0ZWQgd2l0aCBhIFNJTS4KICAgICAqIDxQPgogICAgICogVHlwZTogSU5URUdFUiAoaW50KQogICAgICogPC9QPgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBNTkMgPSBTaW1JbmZvLkNPTFVNTl9NTkM7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgdGhlIGlzbyBjb3VudHJ5IGNvZGUgYXNzb2NpYXRlZCB3aXRoIGEgU0lNLgogICAgICogPFA+CiAgICAgKiBUeXBlOiBURVhUIChTdHJpbmcpCiAgICAgKiA8L1A+CiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIElTT19DT1VOVFJZX0NPREUgPSBTaW1JbmZvLkNPTFVNTl9JU09fQ09VTlRSWV9DT0RFOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHdoZXRoZXIgYSBzdWJzY3JpcHRpb24gaXMgZW1iZWRkZWQgKHRoYXQKICAgICAqIGlzLCBwcmVzZW50IG9uIGFuCiAgICAgKiBlU0lNKS4KICAgICAqIDxwPgogICAgICogVHlwZTogSU5URUdFUiAoaW50KSwgMSBmb3IgZW1iZWRkZWQgb3IgMCBmb3Igbm9uLWVtYmVkZGVkLgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBJU19FTUJFRERFRCA9IFNpbUluZm8uQ09MVU1OX0lTX0VNQkVEREVEOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIFNJTSBjYXJkIGlkZW50aWZpZXIuIEZvciBVSUNDIGNhcmQgaXQgaXMKICAgICAqIHRoZSBJQ0NJRCBvZiB0aGUKICAgICAqIGN1cnJlbnQgZW5hYmxlZCBwcm9maWxlIG9uIHRoZSBjYXJkLCB3aGlsZSBmb3IgZVVJQ0MgY2FyZCBpdCBpcyB0aGUgRUlEIG9mCiAgICAgKiB0aGUgY2FyZC4KICAgICAqIDxQPgogICAgICogVHlwZTogVEVYVCAoU3RyaW5nKQogICAgICogPC9QPgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQVJEX0lEID0gU2ltSW5mby5DT0xVTU5fQ0FSRF9JRDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciB0aGUgZW5jb2RlZCB7QGxpbmsgVWljY0FjY2Vzc1J1bGV9cyBmcm9tCiAgICAgKiB7QGxpbmsgVWljY0FjY2Vzc1J1bGUjZW5jb2RlUnVsZXN9LiBPbmx5IHByZXNlbnQgaWYge0BsaW5rICNJU19FTUJFRERFRH0gaXMKICAgICAqIDEuCiAgICAgKiA8cD4KICAgICAqIFRZUEU6IEJMT0IKICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQUNDRVNTX1JVTEVTID0gU2ltSW5mby5DT0xVTU5fQUNDRVNTX1JVTEVTOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHRoZSBlbmNvZGVkIHtAbGluayBVaWNjQWNjZXNzUnVsZX1zIGZyb20KICAgICAqIHtAbGluayBVaWNjQWNjZXNzUnVsZSNlbmNvZGVSdWxlc30gYnV0IGZvciB0aGUgcnVsZXMgdGhhdCBjb21lIGZyb20KICAgICAqIENhcnJpZXJDb25maWdzLgogICAgICogT25seSBwcmVzZW50IGlmIHRoZXJlIGFyZSBhY2Nlc3MgcnVsZXMgaW4gQ2FycmllckNvbmZpZ3MKICAgICAqIDxwPgogICAgICogVFlQRTogQkxPQgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBBQ0NFU1NfUlVMRVNfRlJPTV9DQVJSSUVSX0NPTkZJR1MgPSBTaW1JbmZvLkNPTFVNTl9BQ0NFU1NfUlVMRVNfRlJPTV9DQVJSSUVSX0NPTkZJR1M7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBpZGVudGlmeWluZyB3aGV0aGVyIGFuIGVtYmVkZGVkIHN1YnNjcmlwdGlvbiBpcwogICAgICogb24gYSByZW1vdmFibGUKICAgICAqIGNhcmQuIFN1Y2ggc3Vic2NyaXB0aW9ucyBhcmUgbWFya2VkIGluYWNjZXNzaWJsZSBhcyBzb29uIGFzIHRoZSBjdXJyZW50IGNhcmQKICAgICAqIGlzIHJlbW92ZWQuCiAgICAgKiBPdGhlcndpc2UsIHRoZXkgd2lsbCByZW1haW4gYWNjZXNzaWJsZSB1bmxlc3MgZXhwbGljaXRseSBkZWxldGVkLiBPbmx5CiAgICAgKiBwcmVzZW50IGlmCiAgICAgKiB7QGxpbmsgI0lTX0VNQkVEREVEfSBpcyAxLgogICAgICogPHA+CiAgICAgKiBUWVBFOiBJTlRFR0VSIChpbnQpLCAxIGZvciByZW1vdmFibGUgb3IgMCBmb3Igbm9uLXJlbW92YWJsZS4KICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgSVNfUkVNT1ZBQkxFID0gU2ltSW5mby5DT0xVTU5fSVNfUkVNT1ZBQkxFOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIGV4dHJlbWUgdGhyZWF0IGluIENCIHNldHRpbmdzCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENCX0VYVFJFTUVfVEhSRUFUX0FMRVJUID0gU2ltSW5mby5DT0xVTU5fQ0JfRVhUUkVNRV9USFJFQVRfQUxFUlQ7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3Igc2V2ZXJlIHRocmVhdCBpbiBDQiBzZXR0aW5ncwogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQl9TRVZFUkVfVEhSRUFUX0FMRVJUID0gU2ltSW5mby5DT0xVTU5fQ0JfU0VWRVJFX1RIUkVBVF9BTEVSVDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBhbWJlciBhbGVydCBpbiBDQiBzZXR0aW5ncwogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQl9BTUJFUl9BTEVSVCA9IFNpbUluZm8uQ09MVU1OX0NCX0FNQkVSX0FMRVJUOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIGVtZXJnZW5jeSBhbGVydCBpbiBDQiBzZXR0aW5ncwogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQl9FTUVSR0VOQ1lfQUxFUlQgPSBTaW1JbmZvLkNPTFVNTl9DQl9FTUVSR0VOQ1lfQUxFUlQ7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgYWxlcnQgc291bmQgZHVyYXRpb24gaW4gQ0Igc2V0dGluZ3MKICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0JfQUxFUlRfU09VTkRfRFVSQVRJT04gPSBTaW1JbmZvLkNPTFVNTl9DQl9BTEVSVF9TT1VORF9EVVJBVElPTjsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBhbGVydCByZW1pbmRlciBpbnRlcnZhbCBpbiBDQiBzZXR0aW5ncwogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQl9BTEVSVF9SRU1JTkRFUl9JTlRFUlZBTCA9IFNpbUluZm8uQ09MVU1OX0NCX0FMRVJUX1JFTUlOREVSX0lOVEVSVkFMOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIGVuYWJsaW5nIHZpYnJhdGUgaW4gQ0Igc2V0dGluZ3MKICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0JfQUxFUlRfVklCUkFURSA9IFNpbUluZm8uQ09MVU1OX0NCX0FMRVJUX1ZJQlJBVEU7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgZW5hYmxpbmcgYWxlcnQgc3BlZWNoIGluIENCIHNldHRpbmdzCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENCX0FMRVJUX1NQRUVDSCA9IFNpbUluZm8uQ09MVU1OX0NCX0FMRVJUX1NQRUVDSDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBFVFdTIHRlc3QgYWxlcnQgaW4gQ0Igc2V0dGluZ3MKICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0JfRVRXU19URVNUX0FMRVJUID0gU2ltSW5mby5DT0xVTU5fQ0JfRVRXU19URVNUX0FMRVJUOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIGVuYWJsZSBjaGFubmVsNTAgYWxlcnQgaW4gQ0Igc2V0dGluZ3MKICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0JfQ0hBTk5FTF81MF9BTEVSVCA9IFNpbUluZm8uQ09MVU1OX0NCX0NIQU5ORUxfNTBfQUxFUlQ7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgQ01BUyB0ZXN0IGFsZXJ0IGluIENCIHNldHRpbmdzCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENCX0NNQVNfVEVTVF9BTEVSVCA9IFNpbUluZm8uQ09MVU1OX0NCX0NNQVNfVEVTVF9BTEVSVDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBPcHQgb3V0IGRpYWxvZyBpbiBDQiBzZXR0aW5ncwogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQl9PUFRfT1VUX0RJQUxPRyA9IFNpbUluZm8uQ09MVU1OX0NCX09QVF9PVVRfRElBTE9HOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIGVuYWJsZSBWb2x0ZS4KICAgICAqCiAgICAgKiBJZiB0aGlzIHNldHRpbmcgaXMgbm90IGluaXRpYWxpemVkIChzZXQgdG8gLTEpIHRoZW4gd2UgdXNlIHRoZSBDYXJyaWVyIENvbmZpZwogICAgICogdmFsdWUKICAgICAqIHtAbGluayBDYXJyaWVyQ29uZmlnTWFuYWdlciNLRVlfRU5IQU5DRURfNEdfTFRFX09OX0JZX0RFRkFVTFRfQk9PTH0uCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIEVOSEFOQ0VEXzRHX01PREVfRU5BQkxFRCA9IFNpbUluZm8uQ09MVU1OX0VOSEFOQ0VEXzRHX01PREVfRU5BQkxFRDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBlbmFibGUgVlQgKFZpZGVvIFRlbGVwaG9ueSBvdmVyIElNUykKICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgVlRfSU1TX0VOQUJMRUQgPSBTaW1JbmZvLkNPTFVNTl9WVF9JTVNfRU5BQkxFRDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBlbmFibGUgV2lmaSBjYWxsaW5nCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIFdGQ19JTVNfRU5BQkxFRCA9IFNpbUluZm8uQ09MVU1OX1dGQ19JTVNfRU5BQkxFRDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBXaWZpIGNhbGxpbmcgbW9kZQogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBXRkNfSU1TX01PREUgPSBTaW1JbmZvLkNPTFVNTl9XRkNfSU1TX01PREU7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgV2lmaSBjYWxsaW5nIG1vZGUgaW4gcm9hbWluZwogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBXRkNfSU1TX1JPQU1JTkdfTU9ERSA9IFNpbUluZm8uQ09MVU1OX1dGQ19JTVNfUk9BTUlOR19NT0RFOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIGVuYWJsZSBXaWZpIGNhbGxpbmcgaW4gcm9hbWluZwogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBXRkNfSU1TX1JPQU1JTkdfRU5BQkxFRCA9IFNpbUluZm8uQ09MVU1OX1dGQ19JTVNfUk9BTUlOR19FTkFCTEVEOwoKICAgIC8qKgogICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgdXNlciBoYXMgZW5hYmxlZCBJTVMgUkNTIFVzZXIgQ2FwYWJpbGl0eSBFeGNoYW5nZSAoVUNFKSBmb3IKICAgICAqIHRoaXMKICAgICAqIHN1YnNjcmlwdGlvbi4KICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgSU1TX1JDU19VQ0VfRU5BQkxFRCA9IFNpbUluZm8uQ09MVU1OX0lNU19SQ1NfVUNFX0VOQUJMRUQ7CgogICAgLyoqCiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSB1c2VyIGhhcyBlbmFibGVkIGNyb3NzIFNJTSBjYWxsaW5nIGZvciB0aGlzIHN1YnNjcmlwdGlvbi4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDUk9TU19TSU1fQ0FMTElOR19FTkFCTEVEID0gU2ltSW5mby5DT0xVTU5fQ1JPU1NfU0lNX0NBTExJTkdfRU5BQkxFRDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciB3aGV0aGVyIGEgc3Vic2NyaXB0aW9uIGlzIG9wcG9ydHVuaXN0aWMsCiAgICAgKiB0aGF0IGlzLAogICAgICogd2hldGhlciB0aGUgbmV0d29yayBpdCBjb25uZWN0cyB0byBpcyBsaW1pdGVkIGluIGZ1bmN0aW9uYWxpdHkgb3IgY292ZXJhZ2UuCiAgICAgKiBGb3IgZXhhbXBsZSwgQ0JSUy4KICAgICAqIDxwPgogICAgICogVHlwZTogSU5URUdFUiAoaW50KSwgMSBmb3Igb3Bwb3J0dW5pc3RpYyBvciAwIGZvciBub24tb3Bwb3J0dW5pc3RpYy4KICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgSVNfT1BQT1JUVU5JU1RJQyA9IFNpbUluZm8uQ09MVU1OX0lTX09QUE9SVFVOSVNUSUM7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgZ3JvdXAgSUQuIFN1YnNjcmlwdGlvbnMgd2l0aCBzYW1lIGdyb3VwIElECiAgICAgKiBhcmUgY29uc2lkZXJlZCBidW5kbGVkIHRvZ2V0aGVyLCBhbmQgc2hvdWxkIGJlaGF2ZSBhcyBhIHNpbmdsZSBzdWJzY3JpcHRpb24KICAgICAqIGF0CiAgICAgKiBjZXJ0YWluIHNjZW5hcmlvcy4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBHUk9VUF9VVUlEID0gU2ltSW5mby5DT0xVTU5fR1JPVVBfVVVJRDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBncm91cCBvd25lci4gSXQncyB0aGUgcGFja2FnZSBuYW1lIHdobwogICAgICogY3JlYXRlZAogICAgICogdGhlIHN1YnNjcmlwdGlvbiBncm91cC4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBHUk9VUF9PV05FUiA9IFNpbUluZm8uQ09MVU1OX0dST1VQX09XTkVSOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHRoZSBwcm9maWxlIGNsYXNzIG9mIGEgc3Vic2NyaXB0aW9uCiAgICAgKiBPbmx5IHByZXNlbnQgaWYge0BsaW5rICNJU19FTUJFRERFRH0gaXMgMS4KICAgICAqIDxQPgogICAgICogVHlwZTogSU5URUdFUiAoaW50KQogICAgICogPC9QPgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBQUk9GSUxFX0NMQVNTID0gU2ltSW5mby5DT0xVTU5fUFJPRklMRV9DTEFTUzsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciB0aGUgcG9ydCBpbmRleCBvZiB0aGUgYWN0aXZlIFVJQ0MgcG9ydC4KICAgICAqIDxQPgogICAgICogVHlwZTogSU5URUdFUiAoaW50KQogICAgICogPC9QPgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBQT1JUX0lOREVYID0gU2ltSW5mby5DT0xVTU5fUE9SVF9JTkRFWDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBWb0lNUyBvcHQtaW4gc3RhdHVzLgogICAgICoKICAgICAqIDxQPgogICAgICogVHlwZTogSU5URUdFUiAoaW50KQogICAgICogPC9QPgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBWT0lNU19PUFRfSU5fU1RBVFVTID0gU2ltSW5mby5DT0xVTU5fVk9JTVNfT1BUX0lOX1NUQVRVUzsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBOUiBBZHZhbmNlZCBjYWxsaW5nCiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSB1c2VyIGhhcyBlbmFibGVkIFZvTlIgc2V0dGluZ3MgZm9yIHRoaXMgc3Vic2NyaXB0aW9uLgogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE5SX0FEVkFOQ0VEX0NBTExJTkdfRU5BQkxFRCA9IFNpbUluZm8uQ09MVU1OX05SX0FEVkFOQ0VEX0NBTExJTkdfRU5BQkxFRDsKCiAgICAvKioKICAgICAqIFByb2ZpbGUgY2xhc3Mgb2YgdGhlIHN1YnNjcmlwdGlvbgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAUmV0ZW50aW9uKFJldGVudGlvblBvbGljeS5TT1VSQ0UpCiAgICBASW50RGVmKHByZWZpeCA9IHsgIlBST0ZJTEVfQ0xBU1NfIiB9LCB2YWx1ZSA9IHsKICAgICAgICAgICAgU2ltSW5mby5QUk9GSUxFX0NMQVNTX1RFU1RJTkcsCiAgICAgICAgICAgIFNpbUluZm8uUFJPRklMRV9DTEFTU19QUk9WSVNJT05JTkcsCiAgICAgICAgICAgIFNpbUluZm8uUFJPRklMRV9DTEFTU19PUEVSQVRJT05BTCwKICAgICAgICAgICAgU2ltSW5mby5QUk9GSUxFX0NMQVNTX1VOU0VULAogICAgfSkKICAgIHB1YmxpYyBAaW50ZXJmYWNlIFByb2ZpbGVDbGFzcyB7CiAgICB9CgogICAgLyoqCiAgICAgKiBBIHRlc3RpbmcgcHJvZmlsZSBjYW4gYmUgcHJlLWxvYWRlZCBvciBkb3dubG9hZGVkIG9udG8KICAgICAqIHRoZSBlVUlDQyBhbmQgcHJvdmlkZXMgY29ubmVjdGl2aXR5IHRvIHRlc3QgZXF1aXBtZW50CiAgICAgKiBmb3IgdGhlIHB1cnBvc2Ugb2YgdGVzdGluZyB0aGUgZGV2aWNlIGFuZCB0aGUgZVVJQ0MuIEl0CiAgICAgKiBpcyBub3QgaW50ZW5kZWQgdG8gc3RvcmUgYW55IG9wZXJhdG9yIGNyZWRlbnRpYWxzLgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAU3lzdGVtQXBpCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBQUk9GSUxFX0NMQVNTX1RFU1RJTkcgPSBTaW1JbmZvLlBST0ZJTEVfQ0xBU1NfVEVTVElORzsKCiAgICAvKioKICAgICAqIEEgcHJvdmlzaW9uaW5nIHByb2ZpbGUgaXMgcHJlLWxvYWRlZCBvbnRvIHRoZSBlVUlDQyBhbmQKICAgICAqIHByb3ZpZGVzIGNvbm5lY3Rpdml0eSB0byBhIG1vYmlsZSBuZXR3b3JrIHNvbGVseSBmb3IgdGhlCiAgICAgKiBwdXJwb3NlIG9mIHByb3Zpc2lvbmluZyBwcm9maWxlcy4KICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgUFJPRklMRV9DTEFTU19QUk9WSVNJT05JTkcgPSBTaW1JbmZvLlBST0ZJTEVfQ0xBU1NfUFJPVklTSU9OSU5HOwoKICAgIC8qKgogICAgICogQW4gb3BlcmF0aW9uYWwgcHJvZmlsZSBjYW4gYmUgcHJlLWxvYWRlZCBvciBkb3dubG9hZGVkCiAgICAgKiBvbnRvIHRoZSBlVUlDQyBhbmQgcHJvdmlkZXMgc2VydmljZXMgcHJvdmlkZWQgYnkgdGhlCiAgICAgKiBvcGVyYXRvci4KICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgUFJPRklMRV9DTEFTU19PUEVSQVRJT05BTCA9IFNpbUluZm8uUFJPRklMRV9DTEFTU19PUEVSQVRJT05BTDsKCiAgICAvKioKICAgICAqIFRoZSBwcm9maWxlIGNsYXNzIGlzIHVuc2V0LiBUaGlzIG9jY3VycyB3aGVuIHByb2ZpbGUgY2xhc3MKICAgICAqIGluZm8gaXMgbm90IGF2YWlsYWJsZS4gVGhlIHN1YnNjcmlwdGlvbiBlaXRoZXIgaGFzIG5vIHByb2ZpbGUKICAgICAqIG1ldGFkYXRhIG9yIHRoZSBwcm9maWxlIG1ldGFkYXRhIGRpZCBub3QgZW5jb2RlIHByb2ZpbGUgY2xhc3MuCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBTeXN0ZW1BcGkKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFBST0ZJTEVfQ0xBU1NfVU5TRVQgPSBTaW1JbmZvLlBST0ZJTEVfQ0xBU1NfVU5TRVQ7CgogICAgLyoqCiAgICAgKiBEZWZhdWx0IHByb2ZpbGUgY2xhc3MKICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgQERlcHJlY2F0ZWQKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFBST0ZJTEVfQ0xBU1NfREVGQVVMVCA9IFNpbUluZm8uUFJPRklMRV9DTEFTU19VTlNFVDsKCiAgICAvKioKICAgICAqIElNU0kgKEludGVybmF0aW9uYWwgTW9iaWxlIFN1YnNjcmliZXIgSWRlbnRpdHkpLgogICAgICogPFA+CiAgICAgKiBUeXBlOiBURVhUCiAgICAgKiA8L1A+CiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIC8vIFRPRE86IGFkZCBAU3lzdGVtQXBpCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBJTVNJID0gU2ltSW5mby5DT0xVTU5fSU1TSTsKCiAgICAvKioKICAgICAqIFdoZXRoZXIgdWljYyBhcHBsaWNhdGlvbnMgaXMgc2V0IHRvIGJlIGVuYWJsZWQgb3IgZGlzYWJsZWQuIEJ5IGRlZmF1bHQgaXQncwogICAgICogZW5hYmxlZC4KICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgVUlDQ19BUFBMSUNBVElPTlNfRU5BQkxFRCA9IFNpbUluZm8uQ09MVU1OX1VJQ0NfQVBQTElDQVRJT05TX0VOQUJMRUQ7CgogICAgLyoqCiAgICAgKiBJbmRpY2F0ZSB3aGljaCBuZXR3b3JrIHR5cGUgaXMgYWxsb3dlZC4KICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQUxMT1dFRF9ORVRXT1JLX1RZUEVTID0gU2ltSW5mby5DT0xVTU5fQUxMT1dFRF9ORVRXT1JLX1RZUEVTX0ZPUl9SRUFTT05TOwoKICAgIC8qKiBAaGlkZSAqLwogICAgQFJldGVudGlvbihSZXRlbnRpb25Qb2xpY3kuU09VUkNFKQogICAgQEludERlZihwcmVmaXggPSB7ICJVU0FHRV9TRVRUSU5HXyIgfSwgdmFsdWUgPSB7CiAgICAgICAgICAgIFVTQUdFX1NFVFRJTkdfVU5LTk9XTiwKICAgICAgICAgICAgVVNBR0VfU0VUVElOR19ERUZBVUxULAogICAgICAgICAgICBVU0FHRV9TRVRUSU5HX1ZPSUNFX0NFTlRSSUMsCiAgICAgICAgICAgIFVTQUdFX1NFVFRJTkdfREFUQV9DRU5UUklDIH0pCiAgICBwdWJsaWMgQGludGVyZmFjZSBVc2FnZVNldHRpbmcgewogICAgfQoKICAgIC8qKgogICAgICogVGhlIHVzYWdlIHNldHRpbmcgaXMgdW5rbm93bi4KICAgICAqCiAgICAgKiBUaGlzIHdpbGwgYmUgdGhlIHVzYWdlIHNldHRpbmcgcmV0dXJuZWQgb24gZGV2aWNlcyB0aGF0IGRvIG5vdCBzdXBwb3J0CiAgICAgKiBxdWVyeWluZyB0aGUKICAgICAqIG9yIHNldHRpbmcgdGhlIHVzYWdlIHNldHRpbmcuCiAgICAgKgogICAgICogSXQgbWF5IGFsc28gYmUgcHJvdmlkZWQgYnkgYSBjYXJyaWVyIHRoYXQgd2lzaGVzIHRvIHByb3ZpZGUgYSB2YWx1ZSB0byBhdm9pZAogICAgICogbWFraW5nIGFueQogICAgICogc2V0dGluZ3MgY2hhbmdlcy4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgVVNBR0VfU0VUVElOR19VTktOT1dOID0gLTE7CgogICAgLyoqCiAgICAgKiBTdWJzY3JpcHRpb24gdXNlcyB0aGUgZGVmYXVsdCBzZXR0aW5nLgogICAgICoKICAgICAqIFRoZSB2YWx1ZSBpcyBiYXNlZCB1cG9uIGRldmljZSBjYXBhYmlsaXR5IGFuZCB0aGUgb3RoZXIgcHJvcGVydGllcyBvZiB0aGUKICAgICAqIHN1YnNjcmlwdGlvbi4KICAgICAqCiAgICAgKiBNb3N0IHN1YnNjcmlwdGlvbnMgd2lsbCBkZWZhdWx0IHRvIHZvaWNlLWNlbnRyaWMgd2hlbiBpbiBhIHBob25lLgogICAgICoKICAgICAqIEFuIG9wcG9ydHVuaXN0aWMgc3Vic2NyaXB0aW9uIHdpbGwgZGVmYXVsdCB0byBkYXRhLWNlbnRyaWMuCiAgICAgKgogICAgICoge0BzZWUgU3Vic2NyaXB0aW9uSW5mbyNpc09wcG9ydHVuaXN0aWN9CiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFVTQUdFX1NFVFRJTkdfREVGQVVMVCA9IDA7CgogICAgLyoqCiAgICAgKiBUaGlzIHN1YnNjcmlwdGlvbiBpcyBmb3JjZWQgdG8gdm9pY2UtY2VudHJpYyBtb2RlCiAgICAgKgogICAgICogPHA+CiAgICAgKiBSZWZlciB0byB2b2ljZS1jZW50cmljIG1vZGUgaW4gM2dwcCAyNC4zMDEgc2VjIDQuMyBhbmQgM2dwcCAyNC41MDEgc2VjIDQuMy4KICAgICAqIEFsc28gcmVmZXIgdG8gIlVFJ3MgdXNhZ2Ugc2V0dGluZyIgYXMgZGVmaW5lZCBpbiAzZ3BwIDI0LjMwMSBzZWN0aW9uIDMuMSBhbmQKICAgICAqIDNncHAgMjMuMjIxCiAgICAgKiBBbm5leCBBLgogICAgICoKICAgICAqIDxwPgogICAgICogRGV2aWNlcyB0aGF0IHN1cHBvcnQge0BsaW5rIFBhY2thZ2VNYW5hZ2VyI0ZFQVRVUkVfVEVMRVBIT05ZX0NBTExJTkd9IGFuZAogICAgICogc3VwcG9ydCB1c2FnZQogICAgICogc2V0dGluZyBjb25maWd1cmF0aW9uIG11c3Qgc3VwcG9ydCBzZXR0aW5nIHRoaXMgdmFsdWUgdmlhCiAgICAgKiB7QGxpbmsgQ2FycmllckNvbmZpZ01hbmFnZXIjS0VZX0NFTExVTEFSX1VTQUdFX1NFVFRJTkdfSU5UfS4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgVVNBR0VfU0VUVElOR19WT0lDRV9DRU5UUklDID0gMTsKCiAgICAvKioKICAgICAqIFRoaXMgc3Vic2NyaXB0aW9uIGlzIGZvcmNlZCB0byBkYXRhLWNlbnRyaWMgbW9kZQogICAgICoKICAgICAqIDxwPgogICAgICogUmVmZXIgdG8gZGF0YS1jZW50cmljIG1vZGUgaW4gM2dwcCAyNC4zMDEgc2VjIDQuMyBhbmQgM2dwcCAyNC41MDEgc2VjIDQuMy4KICAgICAqIEFsc28gcmVmZXIgdG8gIlVFJ3MgdXNhZ2Ugc2V0dGluZyIgYXMgZGVmaW5lZCBpbiAzZ3BwIDI0LjMwMSBzZWN0aW9uIDMuMSBhbmQKICAgICAqIDNncHAgMjMuMjIxCiAgICAgKiBBbm5leCBBLgogICAgICoKICAgICAqIDxwPgogICAgICogRGV2aWNlcyB0aGF0IHN1cHBvcnQge0BsaW5rIFBhY2thZ2VNYW5hZ2VyI0ZFQVRVUkVfVEVMRVBIT05ZX0RBVEF9IGFuZAogICAgICogc3VwcG9ydCB1c2FnZQogICAgICogc2V0dGluZyBjb25maWd1cmF0aW9uIG11c3Qgc3VwcG9ydCBzZXR0aW5nIHRoaXMgdmFsdWUgdmlhLgogICAgICoge0BsaW5rIENhcnJpZXJDb25maWdNYW5hZ2VyI0tFWV9DRUxMVUxBUl9VU0FHRV9TRVRUSU5HX0lOVH0uCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFVTQUdFX1NFVFRJTkdfREFUQV9DRU5UUklDID0gMjsKCiAgICAvKioKICAgICAqIEluZGljYXRlIHRoZSBwcmVmZXJyZWQgdXNhZ2Ugc2V0dGluZyBmb3IgdGhlIHN1YnNjcmlwdGlvbi4KICAgICAqCiAgICAgKiAwIC0gRGVmYXVsdCAtIElmIHRoZSB2YWx1ZSBoYXMgbm90IGJlZW4gZXhwbGljaXRseSBzZXQsIGl0IHdpbGwgYmUgImRlZmF1bHQiCiAgICAgKiAxIC0gVm9pY2UtY2VudHJpYwogICAgICogMiAtIERhdGEtY2VudHJpYwogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIFVTQUdFX1NFVFRJTkcgPSBTaW1JbmZvLkNPTFVNTl9VU0FHRV9TRVRUSU5HOwoKICAgIC8qKgogICAgICogQnJvYWRjYXN0IEFjdGlvbjogVGhlIHVzZXIgaGFzIGNoYW5nZWQgb25lIG9mIHRoZSBkZWZhdWx0IHN1YnMgcmVsYXRlZCB0bwogICAgICogZGF0YSwgcGhvbmUgY2FsbHMsIG9yIHNtcwogICAgICogPC9wPgogICAgICoKICAgICAqIFRPRE86IENoYW5nZSB0byBhIGxpc3RlbmVyCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBTZGtDb25zdGFudChTZGtDb25zdGFudFR5cGUuQlJPQURDQVNUX0lOVEVOVF9BQ1RJT04pCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBTVUJfREVGQVVMVF9DSEFOR0VEX0FDVElPTiA9ICJhbmRyb2lkLmludGVudC5hY3Rpb24uU1VCX0RFRkFVTFRfQ0hBTkdFRCI7CgogICAgLyoqCiAgICAgKiBCcm9hZGNhc3QgQWN0aW9uOiBUaGUgZGVmYXVsdCBzdWJzY3JpcHRpb24gaGFzIGNoYW5nZWQuIFRoaXMgaGFzIHRoZQogICAgICogZm9sbG93aW5nCiAgICAgKiBleHRyYSB2YWx1ZXM6CiAgICAgKiA8L3A+CiAgICAgKiBUaGUge0BsaW5rICNFWFRSQV9TVUJTQ1JJUFRJT05fSU5ERVh9IGV4dHJhIGluZGljYXRlcyB0aGUgY3VycmVudCBkZWZhdWx0CiAgICAgKiBzdWJzY3JpcHRpb24gaW5kZXgKICAgICAqLwogICAgQFNka0NvbnN0YW50KFNka0NvbnN0YW50VHlwZS5CUk9BRENBU1RfSU5URU5UX0FDVElPTikKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIEFDVElPTl9ERUZBVUxUX1NVQlNDUklQVElPTl9DSEFOR0VEID0gImFuZHJvaWQudGVsZXBob255LmFjdGlvbi5ERUZBVUxUX1NVQlNDUklQVElPTl9DSEFOR0VEIjsKCiAgICAvKioKICAgICAqIEJyb2FkY2FzdCBBY3Rpb246IFRoZSBkZWZhdWx0IHNtcyBzdWJzY3JpcHRpb24gaGFzIGNoYW5nZWQuIFRoaXMgaGFzIHRoZQogICAgICogZm9sbG93aW5nCiAgICAgKiBleHRyYSB2YWx1ZXM6CiAgICAgKiA8L3A+CiAgICAgKiB7QGxpbmsgI0VYVFJBX1NVQlNDUklQVElPTl9JTkRFWH0gZXh0cmEgaW5kaWNhdGVzIHRoZSBjdXJyZW50IGRlZmF1bHQgc21zCiAgICAgKiBzdWJzY3JpcHRpb24gaW5kZXgKICAgICAqLwogICAgQFNka0NvbnN0YW50KFNka0NvbnN0YW50VHlwZS5CUk9BRENBU1RfSU5URU5UX0FDVElPTikKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIEFDVElPTl9ERUZBVUxUX1NNU19TVUJTQ1JJUFRJT05fQ0hBTkdFRCA9ICJhbmRyb2lkLnRlbGVwaG9ueS5hY3Rpb24uREVGQVVMVF9TTVNfU1VCU0NSSVBUSU9OX0NIQU5HRUQiOwoKICAgIC8qKgogICAgICogQWN0aXZpdHkgQWN0aW9uOiBEaXNwbGF5IFVJIGZvciBtYW5hZ2luZyB0aGUgYmlsbGluZyByZWxhdGlvbnNoaXAgcGxhbnMKICAgICAqIGJldHdlZW4gYSBjYXJyaWVyIGFuZCBhIHNwZWNpZmljIHN1YnNjcmliZXIuCiAgICAgKiA8cD4KICAgICAqIENhcnJpZXIgYXBwcyBhcmUgZW5jb3VyYWdlZCB0byBpbXBsZW1lbnQgdGhpcyBhY3Rpdml0eSwgYW5kIHRoZSBPUyB3aWxsCiAgICAgKiBwcm92aWRlIGFuIGFmZm9yZGFuY2UgdG8gcXVpY2tseSBlbnRlciB0aGlzIGFjdGl2aXR5LCB0eXBpY2FsbHkgdmlhCiAgICAgKiBTZXR0aW5ncy4gVGhpcyBhZmZvcmRhbmNlIHdpbGwgb25seSBiZSBzaG93biB3aGVuIHRoZSBjYXJyaWVyIGFwcCBpcwogICAgICogYWN0aXZlbHkgcHJvdmlkaW5nIHN1YnNjcmlwdGlvbiBwbGFuIGluZm9ybWF0aW9uIHZpYQogICAgICoge0BsaW5rICNzZXRTdWJzY3JpcHRpb25QbGFucyhpbnQsIExpc3QpfS4KICAgICAqIDxwPgogICAgICogQ29udGFpbnMge0BsaW5rICNFWFRSQV9TVUJTQ1JJUFRJT05fSU5ERVh9IHRvIGluZGljYXRlIHdoaWNoIHN1YnNjcmlwdGlvbgogICAgICogdGhlIHVzZXIgaXMgaW50ZXJlc3RlZCBpbi4KICAgICAqLwogICAgQFNka0NvbnN0YW50KFNka0NvbnN0YW50VHlwZS5BQ1RJVklUWV9JTlRFTlRfQUNUSU9OKQogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQUNUSU9OX01BTkFHRV9TVUJTQ1JJUFRJT05fUExBTlMgPSAiYW5kcm9pZC50ZWxlcGhvbnkuYWN0aW9uLk1BTkFHRV9TVUJTQ1JJUFRJT05fUExBTlMiOwoKICAgIC8qKgogICAgICogQnJvYWRjYXN0IEFjdGlvbjogUmVxdWVzdCBhIHJlZnJlc2ggb2YgdGhlIGJpbGxpbmcgcmVsYXRpb25zaGlwIHBsYW5zCiAgICAgKiBiZXR3ZWVuIGEgY2FycmllciBhbmQgYSBzcGVjaWZpYyBzdWJzY3JpYmVyLgogICAgICogPHA+CiAgICAgKiBDYXJyaWVyIGFwcHMgYXJlIGVuY291cmFnZWQgdG8gaW1wbGVtZW50IHRoaXMgcmVjZWl2ZXIsIGFuZCB0aGUgT1Mgd2lsbAogICAgICogcHJvdmlkZSBhbiBhZmZvcmRhbmNlIHRvIHJlcXVlc3QgYSByZWZyZXNoLiBUaGlzIGFmZm9yZGFuY2Ugd2lsbCBvbmx5IGJlCiAgICAgKiBzaG93biB3aGVuIHRoZSBjYXJyaWVyIGFwcCBpcyBhY3RpdmVseSBwcm92aWRpbmcgc3Vic2NyaXB0aW9uIHBsYW4KICAgICAqIGluZm9ybWF0aW9uIHZpYSB7QGxpbmsgI3NldFN1YnNjcmlwdGlvblBsYW5zKGludCwgTGlzdCl9LgogICAgICogPHA+CiAgICAgKiBDb250YWlucyB7QGxpbmsgI0VYVFJBX1NVQlNDUklQVElPTl9JTkRFWH0gdG8gaW5kaWNhdGUgd2hpY2ggc3Vic2NyaXB0aW9uCiAgICAgKiB0aGUgdXNlciBpcyBpbnRlcmVzdGVkIGluLgogICAgICogPHA+CiAgICAgKiBSZWNlaXZlcnMgc2hvdWxkIHByb3RlY3QgdGhlbXNlbHZlcyBieSBjaGVja2luZyB0aGF0IHRoZSBzZW5kZXIgaG9sZHMgdGhlCiAgICAgKiB7QGNvZGUgYW5kcm9pZC5wZXJtaXNzaW9uLk1BTkFHRV9TVUJTQ1JJUFRJT05fUExBTlN9IHBlcm1pc3Npb24uCiAgICAgKi8KICAgIEBTZGtDb25zdGFudChTZGtDb25zdGFudFR5cGUuQlJPQURDQVNUX0lOVEVOVF9BQ1RJT04pCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBBQ1RJT05fUkVGUkVTSF9TVUJTQ1JJUFRJT05fUExBTlMgPSAiYW5kcm9pZC50ZWxlcGhvbnkuYWN0aW9uLlJFRlJFU0hfU1VCU0NSSVBUSU9OX1BMQU5TIjsKCiAgICAvKioKICAgICAqIEJyb2FkY2FzdCBBY3Rpb246IFRoZSBiaWxsaW5nIHJlbGF0aW9uc2hpcCBwbGFucyBiZXR3ZWVuIGEgY2FycmllciBhbmQgYQogICAgICogc3BlY2lmaWMgc3Vic2NyaWJlciBoYXMgY2hhbmdlZC4KICAgICAqIDxwPgogICAgICogQ29udGFpbnMge0BsaW5rICNFWFRSQV9TVUJTQ1JJUFRJT05fSU5ERVh9IHRvIGluZGljYXRlIHdoaWNoIHN1YnNjcmlwdGlvbgogICAgICogY2hhbmdlZC4KICAgICAqIAogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgQFNka0NvbnN0YW50KFNka0NvbnN0YW50VHlwZS5CUk9BRENBU1RfSU5URU5UX0FDVElPTikKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLk1BTkFHRV9TVUJTQ1JJUFRJT05fUExBTlMpCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBBQ1RJT05fU1VCU0NSSVBUSU9OX1BMQU5TX0NIQU5HRUQgPSAiYW5kcm9pZC50ZWxlcGhvbnkuYWN0aW9uLlNVQlNDUklQVElPTl9QTEFOU19DSEFOR0VEIjsKCiAgICAvKioKICAgICAqIEludGVnZXIgZXh0cmEgdXNlZCB3aXRoIHtAbGluayAjQUNUSU9OX0RFRkFVTFRfU1VCU0NSSVBUSU9OX0NIQU5HRUR9IGFuZAogICAgICoge0BsaW5rICNBQ1RJT05fREVGQVVMVF9TTVNfU1VCU0NSSVBUSU9OX0NIQU5HRUR9IHRvIGluZGljYXRlIHRoZSBzdWJzY3JpcHRpb24KICAgICAqIHdoaWNoIGhhcyBjaGFuZ2VkLgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBFWFRSQV9TVUJTQ1JJUFRJT05fSU5ERVggPSAiYW5kcm9pZC50ZWxlcGhvbnkuZXh0cmEuU1VCU0NSSVBUSU9OX0lOREVYIjsKCiAgICAvKioKICAgICAqIEludGVnZXIgZXh0cmEgdG8gc3BlY2lmeSBTSU0gc2xvdCBpbmRleC4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgRVhUUkFfU0xPVF9JTkRFWCA9ICJhbmRyb2lkLnRlbGVwaG9ueS5leHRyYS5TTE9UX0lOREVYIjsKCiAgICAvKioKICAgICAqIEEgc291cmNlIG9mIHBob25lIG51bWJlcjogdGhlIEVGLU1TSVNETiAoc2VlIDNHUFAgVFMgMzEuMTAyKSwKICAgICAqIG9yIEVGLU1ETiBmb3IgQ0RNQSAoc2VlIDNHUFAyIEMuUDAwNjUtQiksIGZyb20gVUlDQyBhcHBsaWNhdGlvbi4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIFRoZSBhdmFpbGFiaWxpdHkgYW5kIGEgb2YgdGhlIG51bWJlciBkZXBlbmRzIG9uIHRoZSBjYXJyaWVyLgogICAgICogVGhlIG51bWJlciBtYXkgYmUgdXBkYXRlZCBieSBvdmVyLXRoZS1haXIgdXBkYXRlIHRvIFVJQ0MgYXBwbGljYXRpb25zCiAgICAgKiBmcm9tIHRoZSBjYXJyaWVyLCBvciBieSBvdGhlciBtZWFucyB3aXRoIHBoeXNpY2FsIGFjY2VzcyB0byB0aGUgU0lNLgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBQSE9ORV9OVU1CRVJfU09VUkNFX1VJQ0MgPSAxOwoKICAgIC8qKgogICAgICogQSBzb3VyY2Ugb2YgcGhvbmUgbnVtYmVyOiBwcm92aWRlZCBieSBhbiBhcHAgdGhhdCBoYXMgY2FycmllciBwcml2aWxlZ2UuCiAgICAgKgogICAgICogPHA+CiAgICAgKiBUaGUgbnVtYmVyIGlzIGludGVuZGVkIHRvIGJlIHNldCBieSBhIGNhcnJpZXIgYXBwIGtub3dpbmcgdGhlIGNvcnJlY3QgbnVtYmVyCiAgICAgKiB3aGljaCBpcywgZm9yIGV4YW1wbGUsIGRpZmZlcmVudCBmcm9tIHRoZSBudW1iZXIgaW4KICAgICAqIHtAbGluayAjUEhPTkVfTlVNQkVSX1NPVVJDRV9VSUNDIFVJQ0N9CiAgICAgKiBmb3Igc29tZSByZWFzb24uCiAgICAgKiBUaGUgbnVtYmVyIGlzIG5vdCBhdmFpbGFibGUgdW50aWwgYSBjYXJyaWVyIGFwcCBzZXRzIG9uZSB2aWEKICAgICAqIHtAbGluayAjc2V0Q2FycmllclBob25lTnVtYmVyKGludCwgU3RyaW5nKX0uCiAgICAgKiBUaGUgYXBwIGNhbiB1cGRhdGUgdGhlIG51bWJlciB3aXRoIHRoZSBzYW1lIEFQSSBzaG91bGQgdGhlIG51bWJlciBjaGFuZ2UuCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFBIT05FX05VTUJFUl9TT1VSQ0VfQ0FSUklFUiA9IDI7CgogICAgLyoqCiAgICAgKiBBIHNvdXJjZSBvZiBwaG9uZSBudW1iZXI6IHByb3ZpZGVkIGJ5IElNUyAoSVAgTXVsdGltZWRpYSBTdWJzeXN0ZW0pCiAgICAgKiBpbXBsZW1lbnRhdGlvbi4KICAgICAqIFdoZW4gSU1TIHNlcnZpY2UgaXMgcmVnaXN0ZXJlZCAoYXMgaW5kaWNhdGVkIGJ5CiAgICAgKiB7QGxpbmsgYW5kcm9pZC50ZWxlcGhvbnkuaW1zLlJlZ2lzdHJhdGlvbk1hbmFnZXIuUmVnaXN0cmF0aW9uQ2FsbGJhY2sjb25SZWdpc3RlcmVkKGludCl9KQogICAgICogdGhlIElNUyBpbXBsZW1lbnRhdGlvbiBtYXkgcmV0dXJuIFAtQXNzb2NpYXRlZC1VcmkgU0lQIGhlYWRlcnMgKFJGQyAzNDU1KS4KICAgICAqIFRoZSBVUklzCiAgICAgKiBhcmUgdGhlIHVzZXLigJlzIHB1YmxpYyB1c2VyIGlkZW50aXRpZXMga25vd24gdG8gdGhlIG5ldHdvcmsgKHNlZSAzR1BQIFRTCiAgICAgKiAyNC4yMjkgNS40LjEuMiksCiAgICAgKiBhbmQgdGhlIHBob25lIG51bWJlciBpcyB0eXBpY2FsbHkgb25lIG9mIHRoZW0gKHNlZSDigJxnbG9iYWwgbnVtYmVy4oCdIGluIDNHUFAgVFMKICAgICAqIDIzLjAwMyAxMy40KS4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIFRoaXMgc291cmNlIHByb3ZpZGVzIHRoZSBwaG9uZSBudW1iZXIgZnJvbSB0aGUgbGFzdCBJTVMgcmVnaXN0cmF0aW9uLgogICAgICogSU1TIHJlZ2lzdHJhdGlvbiBtYXkgaGFwcGVuIG9uIGV2ZXJ5IGRldmljZSByZWJvb3Qgb3Igb3RoZXIgbmV0d29yayBjb25kaXRpb24KICAgICAqIGNoYW5nZXMuCiAgICAgKiBUaGUgbnVtYmVyIHdpbGwgYmUgdXBkYXRlZCBzaG91bGQgdGhlIGFzc29jaWF0ZWQgVVJJIGNoYW5nZSBhZnRlciBhbiBJTVMKICAgICAqIHJlZ2lzdHJhdGlvbi4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgUEhPTkVfTlVNQkVSX1NPVVJDRV9JTVMgPSAzOwoKICAgIC8qKiBAaGlkZSAqLwogICAgQFJldGVudGlvbihSZXRlbnRpb25Qb2xpY3kuU09VUkNFKQogICAgQEludERlZihwcmVmaXggPSB7ICJQSE9ORV9OVU1CRVJfU09VUkNFIiB9LCB2YWx1ZSA9IHsKICAgICAgICAgICAgUEhPTkVfTlVNQkVSX1NPVVJDRV9VSUNDLAogICAgICAgICAgICBQSE9ORV9OVU1CRVJfU09VUkNFX0NBUlJJRVIsCiAgICAgICAgICAgIFBIT05FX05VTUJFUl9TT1VSQ0VfSU1TLAogICAgfSkKICAgIHB1YmxpYyBAaW50ZXJmYWNlIFBob25lTnVtYmVyU291cmNlIHsKICAgIH0KCiAgICBwcml2YXRlIGZpbmFsIENvbnRleHQgbUNvbnRleHQ7CgogICAgLy8gQ2FjaGUgb2YgUmVzb3VyY2UgdGhhdCBoYXMgYmVlbiBjcmVhdGVkIGluIGdldFJlc291cmNlc0ZvclN1YklkLiBLZXkgaXMgYQogICAgLy8gUGFpciBjb250YWluaW5nCiAgICAvLyB0aGUgQ29udGV4dCBhbmQgc3ViSWQuCiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBNYXA8UGFpcjxDb250ZXh0LCBJbnRlZ2VyPiwgUmVzb3VyY2VzPiBzUmVzb3VyY2VzQ2FjaGUgPSBuZXcgQ29uY3VycmVudEhhc2hNYXA8PigpOwoKICAgIC8qKgogICAgICogQSBsaXN0ZW5lciBjbGFzcyBmb3IgbW9uaXRvcmluZyBjaGFuZ2VzIHRvIHtAbGluayBTdWJzY3JpcHRpb25JbmZvfSByZWNvcmRzLgogICAgICogPHA+CiAgICAgKiBPdmVycmlkZSB0aGUgb25TdWJzY3JpcHRpb25zQ2hhbmdlZCBtZXRob2QgaW4gdGhlIG9iamVjdCB0aGF0IGV4dGVuZHMgdGhpcwogICAgICogY2xhc3MgYW5kIHBhc3MgaXQgdG8KICAgICAqIHtAbGluayAjYWRkT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyKE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcil9CiAgICAgKiB0byByZWdpc3RlciB5b3VyIGxpc3RlbmVyIGFuZCB0byB1bnJlZ2lzdGVyIGludm9rZQogICAgICoge0BsaW5rICNyZW1vdmVPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyKX0KICAgICAqIDxwPgogICAgICogUGVybWlzc2lvbnMgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUEhPTkVfU1RBVEUgaXMgcmVxdWlyZWQKICAgICAqIGZvciAjb25TdWJzY3JpcHRpb25zQ2hhbmdlZCB0byBiZSBpbnZva2VkLgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lciB7CiAgICAgICAgcHJpdmF0ZSBjbGFzcyBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJIYW5kbGVyIGV4dGVuZHMgSGFuZGxlciB7CiAgICAgICAgICAgIE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lckhhbmRsZXIoKSB7CiAgICAgICAgICAgICAgICBzdXBlcigpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJIYW5kbGVyKExvb3BlciBsb29wZXIpIHsKICAgICAgICAgICAgICAgIHN1cGVyKGxvb3Blcik7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIFBvc3RlZCBleGVjdXRvciBjYWxsYmFjayBvbiB0aGUgaGFuZGxlciBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiBsb29wZXIuCiAgICAgICAgICogVGhlIGxvb3BlciBjYW4gYmUgdGhlIGNhbGxpbmcgdGhyZWFkJ3MgbG9vcGVyIG9yIHRoZSBsb29wZXIgcGFzc2VkIGZyb20gdGhlCiAgICAgICAgICogY29uc3RydWN0b3Ige0BsaW5rICNPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoTG9vcGVyKX0uCiAgICAgICAgICovCiAgICAgICAgcHJpdmF0ZSBmaW5hbCBIYW5kbGVyRXhlY3V0b3IgbUV4ZWN1dG9yOwoKICAgICAgICAvKioKICAgICAgICAgKiBAaGlkZQogICAgICAgICAqLwogICAgICAgIHB1YmxpYyBIYW5kbGVyRXhlY3V0b3IgZ2V0SGFuZGxlckV4ZWN1dG9yKCkgewogICAgICAgICAgICByZXR1cm4gbUV4ZWN1dG9yOwogICAgICAgIH0KCiAgICAgICAgcHVibGljIE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcigpIHsKICAgICAgICAgICAgbUV4ZWN1dG9yID0gbmV3IEhhbmRsZXJFeGVjdXRvcihuZXcgT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVySGFuZGxlcigpKTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIEFsbG93IGEgbGlzdGVuZXIgdG8gYmUgY3JlYXRlZCB3aXRoIGEgY3VzdG9tIGxvb3BlcgogICAgICAgICAqIAogICAgICAgICAqIEBwYXJhbSBsb29wZXIgdGhlIGxvb3BlciB0aGF0IHRoZSB1bmRlcmxpbmluZyBoYW5kbGVyIHNob3VsZCBydW4gb24KICAgICAgICAgKiBAaGlkZQogICAgICAgICAqLwogICAgICAgIHB1YmxpYyBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoTG9vcGVyIGxvb3BlcikgewogICAgICAgICAgICBtRXhlY3V0b3IgPSBuZXcgSGFuZGxlckV4ZWN1dG9yKG5ldyBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJIYW5kbGVyKGxvb3BlcikpOwogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICogQ2FsbGJhY2sgaW52b2tlZCB3aGVuIHRoZXJlIGlzIGFueSBjaGFuZ2UgdG8gYW55IFN1YnNjcmlwdGlvbkluZm8sIGFzIHdlbGwgYXMKICAgICAgICAgKiBvbmNlIG9uCiAgICAgICAgICogcmVnaXN0ZXJpbmcgZm9yIGNoYW5nZXMgd2l0aCB7QGxpbmsgI2FkZE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcn0uCiAgICAgICAgICogVHlwaWNhbGx5CiAgICAgICAgICogdGhpcyBtZXRob2Qgd291bGQgaW52b2tlIHtAbGluayAjZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mb0xpc3R9CiAgICAgICAgICovCiAgICAgICAgcHVibGljIHZvaWQgb25TdWJzY3JpcHRpb25zQ2hhbmdlZCgpIHsKICAgICAgICAgICAgaWYgKERCRykKICAgICAgICAgICAgICAgIGxvZygib25TdWJzY3JpcHRpb25zQ2hhbmdlZDogTk9UIE9WRVJSSURERU4iKTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIENhbGxiYWNrIGludm9rZWQgd2hlbgogICAgICAgICAqIHtAbGluayBTdWJzY3JpcHRpb25NYW5hZ2VyI2FkZE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcigKICAgICAgICAgKiBFeGVjdXRvciwgT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyKX0gb3IKICAgICAgICAgKiB7QGxpbmsgU3Vic2NyaXB0aW9uTWFuYWdlciNhZGRPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoCiAgICAgICAgICogT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyKX0gZmFpbHMgdG8gY29tcGxldGUgZHVlIHRvIHRoZQogICAgICAgICAqIHtAbGluayBDb250ZXh0I1RFTEVQSE9OWV9SRUdJU1RSWV9TRVJWSUNFfSBiZWluZyB1bmF2YWlsYWJsZS4KICAgICAgICAgKiAKICAgICAgICAgKiBAaGlkZQogICAgICAgICAqLwogICAgICAgIHB1YmxpYyB2b2lkIG9uQWRkTGlzdGVuZXJGYWlsZWQoKSB7CiAgICAgICAgICAgIFJsb2cudyhMT0dfVEFHLCAib25BZGRMaXN0ZW5lckZhaWxlZCBub3Qgb3ZlcnJpZGRlbiIpOwogICAgICAgIH0KCiAgICAgICAgcHJpdmF0ZSB2b2lkIGxvZyhTdHJpbmcgcykgewogICAgICAgICAgICBSbG9nLmQoTE9HX1RBRywgcyk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UKICAgIHB1YmxpYyBTdWJzY3JpcHRpb25NYW5hZ2VyKENvbnRleHQgY29udGV4dCkgewogICAgICAgIGlmIChEQkcpCiAgICAgICAgICAgIGxvZ2QoIlN1YnNjcmlwdGlvbk1hbmFnZXIgY3JlYXRlZCIpOwogICAgICAgIG1Db250ZXh0ID0gY29udGV4dDsKICAgIH0KCiAgICBwcml2YXRlIE5ldHdvcmtQb2xpY3lNYW5hZ2VyIGdldE5ldHdvcmtQb2xpY3lNYW5hZ2VyKCkgewogICAgICAgIHJldHVybiAoTmV0d29ya1BvbGljeU1hbmFnZXIpIG1Db250ZXh0CiAgICAgICAgICAgICAgICAuZ2V0U3lzdGVtU2VydmljZShDb250ZXh0Lk5FVFdPUktfUE9MSUNZX1NFUlZJQ0UpOwogICAgfQoKICAgIC8qKgogICAgICogQGRlcHJlY2F0ZWQgZGV2ZWxvcGVycyBzaG91bGQgYWx3YXlzIG9idGFpbiByZWZlcmVuY2VzIGRpcmVjdGx5IGZyb20KICAgICAqICAgICAgICAgICAgIHtAbGluayBDb250ZXh0I2dldFN5c3RlbVNlcnZpY2UoQ2xhc3MpfS4KICAgICAqLwogICAgQERlcHJlY2F0ZWQKICAgIHB1YmxpYyBzdGF0aWMgU3Vic2NyaXB0aW9uTWFuYWdlciBmcm9tKENvbnRleHQgY29udGV4dCkgewogICAgICAgIHJldHVybiAoU3Vic2NyaXB0aW9uTWFuYWdlcikgY29udGV4dAogICAgICAgICAgICAgICAgLmdldFN5c3RlbVNlcnZpY2UoQ29udGV4dC5URUxFUEhPTllfU1VCU0NSSVBUSU9OX1NFUlZJQ0UpOwogICAgfQoKICAgIC8qKgogICAgICogUmVnaXN0ZXIgZm9yIGNoYW5nZXMgdG8gdGhlIGxpc3Qgb2YgYWN0aXZlIHtAbGluayBTdWJzY3JpcHRpb25JbmZvfSByZWNvcmRzCiAgICAgKiBvciB0byB0aGUKICAgICAqIGluZGl2aWR1YWwgcmVjb3JkcyB0aGVtc2VsdmVzLiBXaGVuIGEgY2hhbmdlIG9jY3VycyB0aGUKICAgICAqIG9uU3Vic2NyaXB0aW9uc0NoYW5nZWQgbWV0aG9kIG9mCiAgICAgKiB0aGUgbGlzdGVuZXIgd2lsbCBiZSBpbnZva2VkIGltbWVkaWF0ZWx5IGlmIHRoZXJlIGhhcyBiZWVuIGEgbm90aWZpY2F0aW9uLgogICAgICogVGhlCiAgICAgKiBvblN1YnNjcmlwdGlvbkNoYW5nZWQgbWV0aG9kIHdpbGwgYWxzbyBiZSB0cmlnZ2VyZWQgb25jZSBpbml0aWFsbHkgd2hlbgogICAgICogY2FsbGluZyB0aGlzCiAgICAgKiBmdW5jdGlvbi4gVGhlIGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZCBvbiB0aGUgbG9vcGVyIHNwZWNpZmllZCBpbiB0aGUKICAgICAqIGxpc3RlbmVyJ3MgY29uc3RydWN0b3IuCiAgICAgKgogICAgICogQHBhcmFtIGxpc3RlbmVyIGFuIGluc3RhbmNlIG9mIHtAbGluayBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJ9IHdpdGgKICAgICAqICAgICAgICAgICAgICAgICBvblN1YnNjcmlwdGlvbnNDaGFuZ2VkIG92ZXJyaWRkZW4uCiAgICAgKgogICAgICogQGRlcHJlY2F0ZWQgV2lsbCBnZXQgZXhjZXB0aW9uIGlmIHRoZSBwYXJhbWV0ZXIgbGlzdGVuZXIgaXMgbm90IGluaXRpYWxpemVkCiAgICAgKiAgICAgICAgICAgICB3aXRoIGEgTG9vcGVyLgogICAgICogICAgICAgICAgICAgVXNlCiAgICAgKiAgICAgICAgICAgICB7QGxpbmsgI2FkZE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcihFeGVjdXRvciwgT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyKX0uCiAgICAgKi8KICAgIEBEZXByZWNhdGVkCiAgICBwdWJsaWMgdm9pZCBhZGRPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyIGxpc3RlbmVyKSB7CiAgICAgICAgaWYgKGxpc3RlbmVyID09IG51bGwpCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICBhZGRPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIobGlzdGVuZXIubUV4ZWN1dG9yLCBsaXN0ZW5lcik7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWdpc3RlciBmb3IgY2hhbmdlcyB0byB0aGUgbGlzdCBvZiBhY3RpdmUge0BsaW5rIFN1YnNjcmlwdGlvbkluZm99IHJlY29yZHMKICAgICAqIG9yIHRvIHRoZQogICAgICogaW5kaXZpZHVhbCByZWNvcmRzIHRoZW1zZWx2ZXMuIFdoZW4gYSBjaGFuZ2Ugb2NjdXJzIHRoZQogICAgICogb25TdWJzY3JpcHRpb25zQ2hhbmdlZCBtZXRob2Qgb2YKICAgICAqIHRoZSBsaXN0ZW5lciB3aWxsIGJlIGludm9rZWQgaW1tZWRpYXRlbHkgaWYgdGhlcmUgaGFzIGJlZW4gYSBub3RpZmljYXRpb24uCiAgICAgKiBUaGUKICAgICAqIG9uU3Vic2NyaXB0aW9uQ2hhbmdlZCBtZXRob2Qgd2lsbCBhbHNvIGJlIHRyaWdnZXJlZCBvbmNlIGluaXRpYWxseSB3aGVuCiAgICAgKiBjYWxsaW5nIHRoaXMKICAgICAqIGZ1bmN0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSBsaXN0ZW5lciBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyfSB3aXRoCiAgICAgKiAgICAgICAgICAgICAgICAgb25TdWJzY3JpcHRpb25zQ2hhbmdlZCBvdmVycmlkZGVuLgogICAgICogQHBhcmFtIGV4ZWN1dG9yIHRoZSBleGVjdXRvciB0aGF0IHdpbGwgZXhlY3V0ZSBjYWxsYmFja3MuCiAgICAgKi8KICAgIHB1YmxpYyB2b2lkIGFkZE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcigKICAgICAgICAgICAgQE5vbk51bGwgQENhbGxiYWNrRXhlY3V0b3IgRXhlY3V0b3IgZXhlY3V0b3IsCiAgICAgICAgICAgIEBOb25OdWxsIE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lciBsaXN0ZW5lcikgewogICAgICAgIFN0cmluZyBwa2dOYW1lID0gbUNvbnRleHQgIT0gbnVsbCA/IG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSA6ICI8dW5rbm93bj4iOwogICAgICAgIGlmIChEQkcpIHsKICAgICAgICAgICAgbG9nZCgicmVnaXN0ZXIgT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyIHBrZ05hbWU9IiArIHBrZ05hbWUKICAgICAgICAgICAgICAgICAgICArICIgbGlzdGVuZXI9IiArIGxpc3RlbmVyKTsKICAgICAgICB9CiAgICAgICAgLy8gV2UgdXNlIHRoZSBUZWxlcGhvbnlSZWdpc3RyeSBhcyBpdCBydW5zIGluIHRoZSBzeXN0ZW0gYW5kIHRodXMgaXMgYWx3YXlzCiAgICAgICAgLy8gYXZhaWxhYmxlLiBXaGVyZSBhcyBTdWJzY3JpcHRpb25Db250cm9sbGVyIGNvdWxkIGNyYXNoIGFuZCBub3QgYmUgYXZhaWxhYmxlCiAgICAgICAgVGVsZXBob255UmVnaXN0cnlNYW5hZ2VyIHRlbGVwaG9ueVJlZ2lzdHJ5TWFuYWdlciA9IChUZWxlcGhvbnlSZWdpc3RyeU1hbmFnZXIpIG1Db250ZXh0CiAgICAgICAgICAgICAgICAuZ2V0U3lzdGVtU2VydmljZShDb250ZXh0LlRFTEVQSE9OWV9SRUdJU1RSWV9TRVJWSUNFKTsKICAgICAgICBpZiAodGVsZXBob255UmVnaXN0cnlNYW5hZ2VyICE9IG51bGwpIHsKICAgICAgICAgICAgdGVsZXBob255UmVnaXN0cnlNYW5hZ2VyLmFkZE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcihsaXN0ZW5lciwKICAgICAgICAgICAgICAgICAgICBleGVjdXRvcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gSWYgdGhlIHRlbGVwaG9ueSByZWdpc3RyeSBpc24ndCBhdmFpbGFibGUsIHdlIHdpbGwgaW5mb3JtIHRoZSBjYWxsZXIgb24gdGhlaXIKICAgICAgICAgICAgLy8gbGlzdGVuZXIgdGhhdCBpdCBmYWlsZWQgc28gdGhleSBjYW4gdHJ5IHRvIHJlLXJlZ2lzdGVyLgogICAgICAgICAgICBsb2dlKCJhZGRPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXI6IHBrZ25hbWU9IiArIHBrZ05hbWUgKyAiIGZhaWxlZCB0byBiZSBhZGRlZCAiCiAgICAgICAgICAgICAgICAgICAgKyAiIGR1ZSB0byBURUxFUEhPTllfUkVHSVNUUllfU0VSVklDRSBiZWluZyB1bmF2YWlsYWJsZS4iKTsKICAgICAgICAgICAgZXhlY3V0b3IuZXhlY3V0ZSgoKSAtPiBsaXN0ZW5lci5vbkFkZExpc3RlbmVyRmFpbGVkKCkpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFVucmVnaXN0ZXIgdGhlIHtAbGluayBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJ9LiBUaGlzIGlzIG5vdCBzdHJpY3RseQogICAgICogbmVjZXNzYXJ5CiAgICAgKiBhcyB0aGUgbGlzdGVuZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHVucmVnaXN0ZXJlZCBpZiBhbiBhdHRlbXB0IHRvIGludm9rZQogICAgICogdGhlIGxpc3RlbmVyCiAgICAgKiBmYWlscy4KICAgICAqCiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgdGhhdCBpcyB0byBiZSB1bnJlZ2lzdGVyZWQuCiAgICAgKi8KICAgIHB1YmxpYyB2b2lkIHJlbW92ZU9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcihPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIgbGlzdGVuZXIpIHsKICAgICAgICBpZiAobGlzdGVuZXIgPT0gbnVsbCkKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIFN0cmluZyBwa2dGb3JEZWJ1ZyA9IG1Db250ZXh0ICE9IG51bGwgPyBtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCkgOiAiPHVua25vd24+IjsKICAgICAgICBpZiAoREJHKSB7CiAgICAgICAgICAgIGxvZ2QoInVucmVnaXN0ZXIgT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyIHBrZ0ZvckRlYnVnPSIgKyBwa2dGb3JEZWJ1ZwogICAgICAgICAgICAgICAgICAgICsgIiBsaXN0ZW5lcj0iICsgbGlzdGVuZXIpOwogICAgICAgIH0KICAgICAgICAvLyBXZSB1c2UgdGhlIFRlbGVwaG9ueVJlZ2lzdHJ5IGFzIGl0IHJ1bnMgaW4gdGhlIHN5c3RlbSBhbmQgdGh1cyBpcyBhbHdheXMKICAgICAgICAvLyBhdmFpbGFibGUgd2hlcmUgYXMgU3Vic2NyaXB0aW9uQ29udHJvbGxlciBjb3VsZCBjcmFzaCBhbmQgbm90IGJlIGF2YWlsYWJsZQogICAgICAgIFRlbGVwaG9ueVJlZ2lzdHJ5TWFuYWdlciB0ZWxlcGhvbnlSZWdpc3RyeU1hbmFnZXIgPSAoVGVsZXBob255UmVnaXN0cnlNYW5hZ2VyKSBtQ29udGV4dAogICAgICAgICAgICAgICAgLmdldFN5c3RlbVNlcnZpY2UoQ29udGV4dC5URUxFUEhPTllfUkVHSVNUUllfU0VSVklDRSk7CiAgICAgICAgaWYgKHRlbGVwaG9ueVJlZ2lzdHJ5TWFuYWdlciAhPSBudWxsKSB7CiAgICAgICAgICAgIHRlbGVwaG9ueVJlZ2lzdHJ5TWFuYWdlci5yZW1vdmVPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIobGlzdGVuZXIpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEEgbGlzdGVuZXIgY2xhc3MgZm9yIG1vbml0b3JpbmcgY2hhbmdlcyB0byB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mb30gcmVjb3JkcwogICAgICogb2Ygb3Bwb3J0dW5pc3RpYwogICAgICogc3Vic2NyaXB0aW9ucy4KICAgICAqIDxwPgogICAgICogT3ZlcnJpZGUgdGhlIG9uT3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnNDaGFuZ2VkIG1ldGhvZCBpbiB0aGUgb2JqZWN0IHRoYXQKICAgICAqIGV4dGVuZHMgdGhpcwogICAgICogb3Ige0BsaW5rICNhZGRPbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyKAogICAgICogRXhlY3V0b3IsIE9uT3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIpfQogICAgICogdG8gcmVnaXN0ZXIgeW91ciBsaXN0ZW5lciBhbmQgdG8gdW5yZWdpc3RlciBpbnZva2UKICAgICAqIHtAbGluayAjcmVtb3ZlT25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcigKICAgICAqIE9uT3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIpfQogICAgICogPHA+CiAgICAgKiBQZXJtaXNzaW9ucyBhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uUkVBRF9QSE9ORV9TVEFURSBpcyByZXF1aXJlZAogICAgICogZm9yICNvbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZCB0byBiZSBpbnZva2VkLgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIE9uT3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIgewogICAgICAgIC8qKgogICAgICAgICAqIENhbGxiYWNrIGludm9rZWQgd2hlbiB0aGVyZSBpcyBhbnkgY2hhbmdlIHRvIGFueSBTdWJzY3JpcHRpb25JbmZvLiBUeXBpY2FsbHkKICAgICAgICAgKiB0aGlzIG1ldGhvZCB3b3VsZCBpbnZva2Uge0BsaW5rICNnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvTGlzdH0KICAgICAgICAgKi8KICAgICAgICBwdWJsaWMgdm9pZCBvbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZCgpIHsKICAgICAgICAgICAgaWYgKERCRykKICAgICAgICAgICAgICAgIGxvZygib25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWQ6IE5PVCBPVkVSUklEREVOIik7CiAgICAgICAgfQoKICAgICAgICBwcml2YXRlIHZvaWQgbG9nKFN0cmluZyBzKSB7CiAgICAgICAgICAgIFJsb2cuZChMT0dfVEFHLCBzKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWdpc3RlciBmb3IgY2hhbmdlcyB0byB0aGUgbGlzdCBvZiBvcHBvcnR1bmlzdGljIHN1YnNjcmlwdGlvbiByZWNvcmRzIG9yIHRvCiAgICAgKiB0aGUKICAgICAqIGluZGl2aWR1YWwgcmVjb3JkcyB0aGVtc2VsdmVzLiBXaGVuIGEgY2hhbmdlIG9jY3VycyB0aGUKICAgICAqIG9uT3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnNDaGFuZ2VkCiAgICAgKiBtZXRob2Qgb2YgdGhlIGxpc3RlbmVyIHdpbGwgYmUgaW52b2tlZCBpbW1lZGlhdGVseSBpZiB0aGVyZSBoYXMgYmVlbiBhCiAgICAgKiBub3RpZmljYXRpb24uCiAgICAgKgogICAgICogQHBhcmFtIGxpc3RlbmVyIGFuIGluc3RhbmNlIG9mCiAgICAgKiAgICAgICAgICAgICAgICAge0BsaW5rIE9uT3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJ9IHdpdGgKICAgICAqICAgICAgICAgICAgICAgICBvbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZCBvdmVycmlkZGVuLgogICAgICovCiAgICBwdWJsaWMgdm9pZCBhZGRPbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyKAogICAgICAgICAgICBATm9uTnVsbCBAQ2FsbGJhY2tFeGVjdXRvciBFeGVjdXRvciBleGVjdXRvciwKICAgICAgICAgICAgQE5vbk51bGwgT25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lciBsaXN0ZW5lcikgewogICAgICAgIGlmIChleGVjdXRvciA9PSBudWxsIHx8IGxpc3RlbmVyID09IG51bGwpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgU3RyaW5nIHBrZ05hbWUgPSBtQ29udGV4dCAhPSBudWxsID8gbUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpIDogIjx1bmtub3duPiI7CiAgICAgICAgaWYgKERCRykgewogICAgICAgICAgICBsb2dkKCJyZWdpc3RlciBhZGRPbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyIHBrZ05hbWU9IiArIHBrZ05hbWUKICAgICAgICAgICAgICAgICAgICArICIgbGlzdGVuZXI9IiArIGxpc3RlbmVyKTsKICAgICAgICB9CgogICAgICAgIC8vIFdlIHVzZSB0aGUgVGVsZXBob255UmVnaXN0cnkgYXMgaXQgcnVucyBpbiB0aGUgc3lzdGVtIGFuZCB0aHVzIGlzIGFsd2F5cwogICAgICAgIC8vIGF2YWlsYWJsZSB3aGVyZSBhcyBTdWJzY3JpcHRpb25Db250cm9sbGVyIGNvdWxkIGNyYXNoIGFuZCBub3QgYmUgYXZhaWxhYmxlCiAgICAgICAgVGVsZXBob255UmVnaXN0cnlNYW5hZ2VyIHRlbGVwaG9ueVJlZ2lzdHJ5TWFuYWdlciA9IChUZWxlcGhvbnlSZWdpc3RyeU1hbmFnZXIpIG1Db250ZXh0CiAgICAgICAgICAgICAgICAuZ2V0U3lzdGVtU2VydmljZShDb250ZXh0LlRFTEVQSE9OWV9SRUdJU1RSWV9TRVJWSUNFKTsKICAgICAgICBpZiAodGVsZXBob255UmVnaXN0cnlNYW5hZ2VyICE9IG51bGwpIHsKICAgICAgICAgICAgdGVsZXBob255UmVnaXN0cnlNYW5hZ2VyLmFkZE9uT3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoCiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIsIGV4ZWN1dG9yKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBVbnJlZ2lzdGVyIHRoZSB7QGxpbmsgT25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcn0gdGhhdCBpcwogICAgICogY3VycmVudGx5CiAgICAgKiBsaXN0ZW5pbmcgb3Bwb3J0dW5pc3RpYyBzdWJzY3JpcHRpb25zIGNoYW5nZS4gVGhpcyBpcyBub3Qgc3RyaWN0bHkgbmVjZXNzYXJ5CiAgICAgKiBhcyB0aGUgbGlzdGVuZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHVucmVnaXN0ZXJlZCBpZiBhbiBhdHRlbXB0IHRvIGludm9rZQogICAgICogdGhlIGxpc3RlbmVyCiAgICAgKiBmYWlscy4KICAgICAqCiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgdGhhdCBpcyB0byBiZSB1bnJlZ2lzdGVyZWQuCiAgICAgKi8KICAgIHB1YmxpYyB2b2lkIHJlbW92ZU9uT3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoCiAgICAgICAgICAgIEBOb25OdWxsIE9uT3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIgbGlzdGVuZXIpIHsKICAgICAgICBQcmVjb25kaXRpb25zLmNoZWNrTm90TnVsbChsaXN0ZW5lciwgImxpc3RlbmVyIGNhbm5vdCBiZSBudWxsIik7CiAgICAgICAgU3RyaW5nIHBrZ0ZvckRlYnVnID0gbUNvbnRleHQgIT0gbnVsbCA/IG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSA6ICI8dW5rbm93bj4iOwogICAgICAgIGlmIChEQkcpIHsKICAgICAgICAgICAgbG9nZCgidW5yZWdpc3RlciBPbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyIHBrZ0ZvckRlYnVnPSIKICAgICAgICAgICAgICAgICAgICArIHBrZ0ZvckRlYnVnICsgIiBsaXN0ZW5lcj0iICsgbGlzdGVuZXIpOwogICAgICAgIH0KICAgICAgICBUZWxlcGhvbnlSZWdpc3RyeU1hbmFnZXIgdGVsZXBob255UmVnaXN0cnlNYW5hZ2VyID0gKFRlbGVwaG9ueVJlZ2lzdHJ5TWFuYWdlcikgbUNvbnRleHQKICAgICAgICAgICAgICAgIC5nZXRTeXN0ZW1TZXJ2aWNlKENvbnRleHQuVEVMRVBIT05ZX1JFR0lTVFJZX1NFUlZJQ0UpOwogICAgICAgIGlmICh0ZWxlcGhvbnlSZWdpc3RyeU1hbmFnZXIgIT0gbnVsbCkgewogICAgICAgICAgICB0ZWxlcGhvbnlSZWdpc3RyeU1hbmFnZXIucmVtb3ZlT25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcihsaXN0ZW5lcik7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBhY3RpdmUgU3Vic2NyaXB0aW9uSW5mbyB3aXRoIHRoZSBpbnB1dCBzdWJJZC4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIFJlcXVpcmVzIFBlcm1pc3Npb246IHtAbGluayBhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24jUkVBRF9QSE9ORV9TVEFURQogICAgICogUkVBRF9QSE9ORV9TVEFURX0KICAgICAqIG9yIHRoYXQgdGhlIGNhbGxpbmcgYXBwIGhhcyBjYXJyaWVyIHByaXZpbGVnZXMgKHNlZQogICAgICoge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjaGFzQ2FycmllclByaXZpbGVnZXN9KS4KICAgICAqCiAgICAgKiBAcGFyYW0gc3ViSWQgVGhlIHVuaXF1ZSBTdWJzY3JpcHRpb25JbmZvIGtleSBpbiBkYXRhYmFzZS4KICAgICAqIEByZXR1cm4gU3Vic2NyaXB0aW9uSW5mbywgbWF5YmUgbnVsbCBpZiBpdHMgbm90IGFjdGl2ZS4KICAgICAqLwogICAgQFN1cHByZXNzQXV0b0RvYyAvLyBCbG9ja2VkIGJ5IGIvNzI5NjcyMzYgLSBubyBzdXBwb3J0IGZvciBjYXJyaWVyIHByaXZpbGVnZXMKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgU3Vic2NyaXB0aW9uSW5mbyBnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvKGludCBzdWJJZCkgewogICAgICAgIGlmIChWREJHKQogICAgICAgICAgICBsb2dkKCJbZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mb10rIHN1YklkPSIgKyBzdWJJZCk7CiAgICAgICAgaWYgKCFpc1ZhbGlkU3Vic2NyaXB0aW9uSWQoc3ViSWQpKSB7CiAgICAgICAgICAgIGlmIChEQkcpIHsKICAgICAgICAgICAgICAgIGxvZ2QoIltnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvXS0gaW52YWxpZCBzdWJJZCIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KCiAgICAgICAgU3Vic2NyaXB0aW9uSW5mbyBzdWJJbmZvID0gbnVsbDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHN1YkluZm8gPSBpU3ViLmdldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm8oc3ViSWQsIG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgbUNvbnRleHQuZ2V0QXR0cmlidXRpb25UYWcoKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc3ViSW5mbzsKICAgIH0KCiAgICAvKioKICAgICAqIEdldHMgYW4gYWN0aXZlIFN1YnNjcmlwdGlvbkluZm8ge0BsaW5rIFN1YnNjcmlwdGlvbkluZm99IGFzc29jaWF0ZWQgd2l0aCB0aGUKICAgICAqIFNpbSBJY2NJZC4KICAgICAqCiAgICAgKiBAcGFyYW0gaWNjSWQgdGhlIEljY0lkIG9mIFNJTSBjYXJkCiAgICAgKiBAcmV0dXJuIFN1YnNjcmlwdGlvbkluZm8sIG1heWJlIG51bGwgaWYgaXRzIG5vdCBhY3RpdmUKICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbi5SRUFEX1BSSVZJTEVHRURfUEhPTkVfU1RBVEUpCiAgICBATnVsbGFibGUKICAgIEBTeXN0ZW1BcGkKICAgIHB1YmxpYyBTdWJzY3JpcHRpb25JbmZvIGdldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9Gb3JJY2MoQE5vbk51bGwgU3RyaW5nIGljY0lkKSB7CiAgICAgICAgaWYgKFZEQkcpCiAgICAgICAgICAgIGxvZ2QoIltnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvRm9ySWNjSW5kZXhdKyBpY2NJZD0iICsgaWNjSWQpOwogICAgICAgIGlmIChpY2NJZCA9PSBudWxsKSB7CiAgICAgICAgICAgIGxvZ2QoIltnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvRm9ySWNjSW5kZXhdLSBudWxsIGljY2lkIik7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KCiAgICAgICAgU3Vic2NyaXB0aW9uSW5mbyByZXN1bHQgPSBudWxsOwoKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmVzdWx0ID0gaVN1Yi5nZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvRm9ySWNjSWQoaWNjSWQsIG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgbUNvbnRleHQuZ2V0QXR0cmlidXRpb25UYWcoKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBhY3RpdmUgU3Vic2NyaXB0aW9uSW5mbyBhc3NvY2lhdGVkIHdpdGggdGhlIHNsb3RJbmRleAogICAgICoKICAgICAqIDxwPgogICAgICogUmVxdWlyZXMgUGVybWlzc2lvbjoge0BsaW5rIGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbiNSRUFEX1BIT05FX1NUQVRFCiAgICAgKiBSRUFEX1BIT05FX1NUQVRFfQogICAgICogb3IgdGhhdCB0aGUgY2FsbGluZyBhcHAgaGFzIGNhcnJpZXIgcHJpdmlsZWdlcyAoc2VlCiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlc30pLgogICAgICoKICAgICAqIEBwYXJhbSBzbG90SW5kZXggdGhlIHNsb3Qgd2hpY2ggdGhlIHN1YnNjcmlwdGlvbiBpcyBpbnNlcnRlZAogICAgICogQHJldHVybiBTdWJzY3JpcHRpb25JbmZvLCBtYXliZSBudWxsIGlmIGl0cyBub3QgYWN0aXZlCiAgICAgKi8KICAgIEBTdXBwcmVzc0F1dG9Eb2MgLy8gQmxvY2tlZCBieSBiLzcyOTY3MjM2IC0gbm8gc3VwcG9ydCBmb3IgY2FycmllciBwcml2aWxlZ2VzCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbi5SRUFEX1BIT05FX1NUQVRFKQogICAgcHVibGljIFN1YnNjcmlwdGlvbkluZm8gZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mb0ZvclNpbVNsb3RJbmRleChpbnQgc2xvdEluZGV4KSB7CiAgICAgICAgaWYgKFZEQkcpCiAgICAgICAgICAgIGxvZ2QoIltnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvRm9yU2ltU2xvdEluZGV4XSsgc2xvdEluZGV4PSIgKyBzbG90SW5kZXgpOwogICAgICAgIGlmICghaXNWYWxpZFNsb3RJbmRleChzbG90SW5kZXgpKSB7CiAgICAgICAgICAgIGxvZ2QoIltnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvRm9yU2ltU2xvdEluZGV4XS0gaW52YWxpZCBzbG90SW5kZXgiKTsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQoKICAgICAgICBTdWJzY3JpcHRpb25JbmZvIHJlc3VsdCA9IG51bGw7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXN1bHQgPSBpU3ViLmdldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9Gb3JTaW1TbG90SW5kZXgoc2xvdEluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICBtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCksIG1Db250ZXh0LmdldEF0dHJpYnV0aW9uVGFnKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIEByZXR1cm4gTGlzdCBvZiBhbGwgU3Vic2NyaXB0aW9uSW5mbyByZWNvcmRzIGluIGRhdGFiYXNlLAogICAgICogICAgICAgICBpbmNsdWRlIHRob3NlIHRoYXQgd2VyZSBpbnNlcnRlZCBiZWZvcmUsIG1heWJlIGVtcHR5IGJ1dCBub3QgbnVsbC4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBOb25OdWxsCiAgICBAVW5zdXBwb3J0ZWRBcHBVc2FnZQogICAgcHVibGljIExpc3Q8U3Vic2NyaXB0aW9uSW5mbz4gZ2V0QWxsU3Vic2NyaXB0aW9uSW5mb0xpc3QoKSB7CiAgICAgICAgaWYgKFZEQkcpCiAgICAgICAgICAgIGxvZ2QoIltnZXRBbGxTdWJzY3JpcHRpb25JbmZvTGlzdF0rIik7CgogICAgICAgIExpc3Q8U3Vic2NyaXB0aW9uSW5mbz4gcmVzdWx0ID0gbnVsbDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlTdWIuZ2V0QWxsU3ViSW5mb0xpc3QobUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpLAogICAgICAgICAgICAgICAgICAgICAgICBtQ29udGV4dC5nZXRBdHRyaWJ1dGlvblRhZygpKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkgewogICAgICAgICAgICByZXN1bHQgPSBDb2xsZWN0aW9ucy5lbXB0eUxpc3QoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgU3Vic2NyaXB0aW9uSW5mbyhzKSBvZiB0aGUgY3VycmVudGx5IGFjdGl2ZSBTSU0ocykuIFRoZSByZWNvcmRzIHdpbGwKICAgICAqIGJlIHNvcnRlZAogICAgICogYnkge0BsaW5rIFN1YnNjcmlwdGlvbkluZm8jZ2V0U2ltU2xvdEluZGV4fSB0aGVuIGJ5CiAgICAgKiB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mbyNnZXRTdWJzY3JpcHRpb25JZH0uCiAgICAgKgogICAgICogPHA+CiAgICAgKiBSZXF1aXJlcyBQZXJtaXNzaW9uOiB7QGxpbmsgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uI1JFQURfUEhPTkVfU1RBVEUKICAgICAqIFJFQURfUEhPTkVfU1RBVEV9CiAgICAgKiBvciB0aGF0IHRoZSBjYWxsaW5nIGFwcCBoYXMgY2FycmllciBwcml2aWxlZ2VzIChzZWUKICAgICAqIHtAbGluayBUZWxlcGhvbnlNYW5hZ2VyI2hhc0NhcnJpZXJQcml2aWxlZ2VzfSkuIEluIHRoZSBsYXR0ZXIgY2FzZSwgb25seQogICAgICogcmVjb3JkcyBhY2Nlc3NpYmxlCiAgICAgKiB0byB0aGUgY2FsbGluZyBhcHAgYXJlIHJldHVybmVkLgogICAgICoKICAgICAqIEByZXR1cm4gU29ydGVkIGxpc3Qgb2YgdGhlIGN1cnJlbnRseSB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mb30gcmVjb3JkcwogICAgICogICAgICAgICBhdmFpbGFibGUgb24gdGhlIGRldmljZS4KICAgICAqICAgICAgICAgPHVsPgogICAgICogICAgICAgICA8bGk+CiAgICAgKiAgICAgICAgIElmIG51bGwgaXMgcmV0dXJuZWQgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5rbm93biBidXQgaWYgYQogICAgICogICAgICAgICB7QGxpbmsgT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyfQogICAgICogICAgICAgICBoYXMgYmVlbiByZWdpc3RlcmVkCiAgICAgKiAgICAgICAgIHtAbGluayBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIjb25TdWJzY3JpcHRpb25zQ2hhbmdlZH0gd2lsbCBiZQogICAgICogICAgICAgICBpbnZva2VkIGluIHRoZSBmdXR1cmUuCiAgICAgKiAgICAgICAgIDwvbGk+CiAgICAgKiAgICAgICAgIDxsaT4KICAgICAqICAgICAgICAgSWYgdGhlIGxpc3QgaXMgZW1wdHkgdGhlbiB0aGVyZSBhcmUgbm8ge0BsaW5rIFN1YnNjcmlwdGlvbkluZm99CiAgICAgKiAgICAgICAgIHJlY29yZHMgY3VycmVudGx5IGF2YWlsYWJsZS4KICAgICAqICAgICAgICAgPC9saT4KICAgICAqICAgICAgICAgPGxpPgogICAgICogICAgICAgICBpZiB0aGUgbGlzdCBpcyBub24tZW1wdHkgdGhlIGxpc3QgaXMgc29ydGVkIGJ5CiAgICAgKiAgICAgICAgIHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFNpbVNsb3RJbmRleH0KICAgICAqICAgICAgICAgdGhlbiBieSB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mbyNnZXRTdWJzY3JpcHRpb25JZH0uCiAgICAgKiAgICAgICAgIDwvbGk+CiAgICAgKiAgICAgICAgIDwvdWw+CiAgICAgKi8KICAgIEBTdXBwcmVzc0F1dG9Eb2MgLy8gQmxvY2tlZCBieSBiLzcyOTY3MjM2IC0gbm8gc3VwcG9ydCBmb3IgY2FycmllciBwcml2aWxlZ2VzCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbi5SRUFEX1BIT05FX1NUQVRFKQogICAgcHVibGljIExpc3Q8U3Vic2NyaXB0aW9uSW5mbz4gZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mb0xpc3QoKSB7CiAgICAgICAgcmV0dXJuIGdldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9MaXN0KC8qIHVzZXJWaXNpYmxlb25seSAqL3RydWUpOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IGJvdGggaGlkZGVuIGFuZCB2aXNpYmxlIFN1YnNjcmlwdGlvbkluZm8ocykgb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUKICAgICAqIFNJTShzKS4KICAgICAqIFRoZSByZWNvcmRzIHdpbGwgYmUgc29ydGVkIGJ5IHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFNpbVNsb3RJbmRleH0KICAgICAqIHRoZW4gYnkge0BsaW5rIFN1YnNjcmlwdGlvbkluZm8jZ2V0U3Vic2NyaXB0aW9uSWR9LgogICAgICoKICAgICAqIEhpZGRlbiBzdWJzY3JpcHRpb25zIHJlZmVyIHRvIHRob3NlIGFyZSBub3QgbWVhbnQgdmlzaWJsZSB0byB0aGUgdXNlcnMuCiAgICAgKiBGb3IgZXhhbXBsZSwgYW4gb3Bwb3J0dW5pc3RpYyBzdWJzY3JpcHRpb24gdGhhdCBpcyBncm91cGVkIHdpdGggb3RoZXIKICAgICAqIHN1YnNjcmlwdGlvbnMgc2hvdWxkIHJlbWFpbiBpbnZpc2libGUgdG8gdXNlcnMgYXMgdGhleSBhcmUgb25seSBmdW5jdGlvbmFsbHkKICAgICAqIHN1cHBsZW1lbnRhcnkgdG8gcHJpbWFyeSBvbmVzLgogICAgICoKICAgICAqIDxwPgogICAgICogUmVxdWlyZXMgUGVybWlzc2lvbjoge0BsaW5rIGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbiNSRUFEX1BIT05FX1NUQVRFCiAgICAgKiBSRUFEX1BIT05FX1NUQVRFfQogICAgICogb3IgdGhhdCB0aGUgY2FsbGluZyBhcHAgaGFzIGNhcnJpZXIgcHJpdmlsZWdlcyAoc2VlCiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlc30pLiBJbiB0aGUgbGF0dGVyIGNhc2UsIG9ubHkKICAgICAqIHJlY29yZHMgYWNjZXNzaWJsZQogICAgICogdG8gdGhlIGNhbGxpbmcgYXBwIGFyZSByZXR1cm5lZC4KICAgICAqCiAgICAgKiBAcmV0dXJuIFNvcnRlZCBsaXN0IG9mIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIHtAbGluayBTdWJzY3JpcHRpb25JbmZvfQogICAgICogICAgICAgICByZWNvcmRzIG9uIHRoZSBkZXZpY2UuCiAgICAgKiAgICAgICAgIFRoaXMgaXMgc2ltaWxhciB0byB7QGxpbmsgI2dldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9MaXN0fSBleGNlcHQgdGhhdAogICAgICogICAgICAgICBpdCB3aWxsIHJldHVybgogICAgICogICAgICAgICBib3RoIGFjdGl2ZSBhbmQgaGlkZGVuIFN1YnNjcmlwdGlvbkluZm9zLgogICAgICoKICAgICAqLwogICAgcHVibGljIEBOb25OdWxsIExpc3Q8U3Vic2NyaXB0aW9uSW5mbz4gZ2V0Q29tcGxldGVBY3RpdmVTdWJzY3JpcHRpb25JbmZvTGlzdCgpIHsKICAgICAgICBMaXN0PFN1YnNjcmlwdGlvbkluZm8+IGNvbXBsZXRlTGlzdCA9IGdldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9MaXN0KAogICAgICAgICAgICAgICAgLyogdXNlclZpc2libGVvbmx5ICovZmFsc2UpOwogICAgICAgIGlmIChjb21wbGV0ZUxpc3QgPT0gbnVsbCkgewogICAgICAgICAgICBjb21wbGV0ZUxpc3QgPSBuZXcgQXJyYXlMaXN0PD4oKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNvbXBsZXRlTGlzdDsKICAgIH0KCiAgICAvKioKICAgICAqIFRoaXMgaXMgc2ltaWxhciB0byB7QGxpbmsgI2dldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9MaXN0KCl9LCBidXQgaWYKICAgICAqIHVzZXJWaXNpYmxlT25seQogICAgICogaXMgdHJ1ZSwgaXQgd2lsbCBmaWx0ZXIgb3V0IHRoZSBoaWRkZW4gc3Vic2NyaXB0aW9ucy4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgQE51bGxhYmxlIExpc3Q8U3Vic2NyaXB0aW9uSW5mbz4gZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mb0xpc3QoYm9vbGVhbiB1c2VyVmlzaWJsZU9ubHkpIHsKICAgICAgICBMaXN0PFN1YnNjcmlwdGlvbkluZm8+IGFjdGl2ZUxpc3QgPSBudWxsOwoKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgYWN0aXZlTGlzdCA9IGlTdWIuZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mb0xpc3QobUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpLAogICAgICAgICAgICAgICAgICAgICAgICBtQ29udGV4dC5nZXRBdHRyaWJ1dGlvblRhZygpKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIGlmICghdXNlclZpc2libGVPbmx5IHx8IGFjdGl2ZUxpc3QgPT0gbnVsbCkgewogICAgICAgICAgICByZXR1cm4gYWN0aXZlTGlzdDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gYWN0aXZlTGlzdC5zdHJlYW0oKS5maWx0ZXIoc3ViSW5mbyAtPiBpc1N1YnNjcmlwdGlvblZpc2libGUoc3ViSW5mbykpCiAgICAgICAgICAgICAgICAgICAgLmNvbGxlY3QoQ29sbGVjdG9ycy50b0xpc3QoKSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogR2V0cyB0aGUgU3Vic2NyaXB0aW9uSW5mbyhzKSBvZiBhbGwgYXZhaWxhYmxlIHN1YnNjcmlwdGlvbnMsIGlmIGFueS4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIEF2YWlsYWJsZSBzdWJzY3JpcHRpb25zIGluY2x1ZGUgYWN0aXZlIG9uZXMgKHRob3NlIHdpdGggYSBub24tbmVnYXRpdmUKICAgICAqIHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFNpbVNsb3RJbmRleCgpfSkgYXMgd2VsbCBhcyBpbmFjdGl2ZSBidXQgaW5zdGFsbGVkCiAgICAgKiBlbWJlZGRlZAogICAgICogc3Vic2NyaXB0aW9ucy4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIFRoZSByZWNvcmRzIHdpbGwgYmUgc29ydGVkIGJ5IHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFNpbVNsb3RJbmRleH0gdGhlbgogICAgICogYnkKICAgICAqIHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFN1YnNjcmlwdGlvbklkfS4KICAgICAqCiAgICAgKiBAcmV0dXJuIFNvcnRlZCBsaXN0IG9mIHRoZSBjdXJyZW50IHtAbGluayBTdWJzY3JpcHRpb25JbmZvfSByZWNvcmRzIGF2YWlsYWJsZQogICAgICogICAgICAgICBvbiB0aGUKICAgICAqICAgICAgICAgZGV2aWNlLgogICAgICogICAgICAgICA8dWw+CiAgICAgKiAgICAgICAgIDxsaT4KICAgICAqICAgICAgICAgSWYgbnVsbCBpcyByZXR1cm5lZCB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmtub3duIGJ1dCBpZiBhCiAgICAgKiAgICAgICAgIHtAbGluayBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJ9IGhhcyBiZWVuIHJlZ2lzdGVyZWQKICAgICAqICAgICAgICAge0BsaW5rIE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lciNvblN1YnNjcmlwdGlvbnNDaGFuZ2VkfSB3aWxsIGJlCiAgICAgKiAgICAgICAgIGludm9rZWQgaW4gdGhlIGZ1dHVyZS4KICAgICAqICAgICAgICAgPGxpPgogICAgICogICAgICAgICBJZiB0aGUgbGlzdCBpcyBlbXB0eSB0aGVuIHRoZXJlIGFyZSBubyB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mb30KICAgICAqICAgICAgICAgcmVjb3JkcyBjdXJyZW50bHkgYXZhaWxhYmxlLgogICAgICogICAgICAgICA8bGk+CiAgICAgKiAgICAgICAgIGlmIHRoZSBsaXN0IGlzIG5vbi1lbXB0eSB0aGUgbGlzdCBpcyBzb3J0ZWQgYnkKICAgICAqICAgICAgICAge0BsaW5rIFN1YnNjcmlwdGlvbkluZm8jZ2V0U2ltU2xvdEluZGV4fQogICAgICogICAgICAgICB0aGVuIGJ5IHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFN1YnNjcmlwdGlvbklkfS4KICAgICAqICAgICAgICAgPC91bD4KICAgICAqCiAgICAgKiAgICAgICAgIDxwPgogICAgICogICAgICAgICBQZXJtaXNzaW9ucyBhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uUkVBRF9QUklWSUxFR0VEX1BIT05FX1NUQVRFCiAgICAgKiAgICAgICAgIGlzIHJlcXVpcmVkCiAgICAgKiAgICAgICAgIGZvciAjZ2V0QXZhaWxhYmxlU3Vic2NyaXB0aW9uSW5mb0xpc3QgdG8gYmUgaW52b2tlZC4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBTeXN0ZW1BcGkKICAgIHB1YmxpYyBMaXN0PFN1YnNjcmlwdGlvbkluZm8+IGdldEF2YWlsYWJsZVN1YnNjcmlwdGlvbkluZm9MaXN0KCkgewogICAgICAgIExpc3Q8U3Vic2NyaXB0aW9uSW5mbz4gcmVzdWx0ID0gbnVsbDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlTdWIuZ2V0QXZhaWxhYmxlU3Vic2NyaXB0aW9uSW5mb0xpc3QobUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpLAogICAgICAgICAgICAgICAgICAgICAgICBtQ29udGV4dC5nZXRBdHRyaWJ1dGlvblRhZygpKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIEdldHMgdGhlIFN1YnNjcmlwdGlvbkluZm8ocykgb2YgYWxsIGVtYmVkZGVkIHN1YnNjcmlwdGlvbnMgYWNjZXNzaWJsZSB0byB0aGUKICAgICAqIGNhbGxpbmcgYXBwLCBpZgogICAgICogYW55LgogICAgICoKICAgICAqIDxwPgogICAgICogT25seSB0aG9zZSBzdWJzY3JpcHRpb25zIGZvciB3aGljaCB0aGUgY2FsbGluZyBhcHAgaGFzIGNhcnJpZXIgcHJpdmlsZWdlcyBwZXIKICAgICAqIHRoZQogICAgICogc3Vic2NyaXB0aW9uIG1ldGFkYXRhLCBpZiBhbnksIHdpbGwgYmUgaW5jbHVkZWQgaW4gdGhlIHJldHVybmVkIGxpc3QuCiAgICAgKgogICAgICogPHA+CiAgICAgKiBUaGUgcmVjb3JkcyB3aWxsIGJlIHNvcnRlZCBieSB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mbyNnZXRTaW1TbG90SW5kZXh9IHRoZW4KICAgICAqIGJ5CiAgICAgKiB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mbyNnZXRTdWJzY3JpcHRpb25JZH0uCiAgICAgKgogICAgICogQHJldHVybiBTb3J0ZWQgbGlzdCBvZiB0aGUgY3VycmVudCBlbWJlZGRlZCB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mb30gcmVjb3JkcwogICAgICogICAgICAgICBhdmFpbGFibGUgb24gdGhlCiAgICAgKiAgICAgICAgIGRldmljZSB3aGljaCBhcmUgYWNjZXNzaWJsZSB0byB0aGUgY2FsbGVyLgogICAgICogICAgICAgICA8dWw+CiAgICAgKiAgICAgICAgIDxsaT4KICAgICAqICAgICAgICAgSWYgbnVsbCBpcyByZXR1cm5lZCB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmtub3duIGJ1dCBpZiBhCiAgICAgKiAgICAgICAgIHtAbGluayBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJ9IGhhcyBiZWVuIHJlZ2lzdGVyZWQKICAgICAqICAgICAgICAge0BsaW5rIE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lciNvblN1YnNjcmlwdGlvbnNDaGFuZ2VkfSB3aWxsIGJlCiAgICAgKiAgICAgICAgIGludm9rZWQgaW4gdGhlIGZ1dHVyZS4KICAgICAqICAgICAgICAgPGxpPgogICAgICogICAgICAgICBJZiB0aGUgbGlzdCBpcyBlbXB0eSB0aGVuIHRoZXJlIGFyZSBubyB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mb30KICAgICAqICAgICAgICAgcmVjb3JkcyBjdXJyZW50bHkgYXZhaWxhYmxlLgogICAgICogICAgICAgICA8bGk+CiAgICAgKiAgICAgICAgIGlmIHRoZSBsaXN0IGlzIG5vbi1lbXB0eSB0aGUgbGlzdCBpcyBzb3J0ZWQgYnkKICAgICAqICAgICAgICAge0BsaW5rIFN1YnNjcmlwdGlvbkluZm8jZ2V0U2ltU2xvdEluZGV4fQogICAgICogICAgICAgICB0aGVuIGJ5IHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFN1YnNjcmlwdGlvbklkfS4KICAgICAqICAgICAgICAgPC91bD4KICAgICAqLwogICAgcHVibGljIExpc3Q8U3Vic2NyaXB0aW9uSW5mbz4gZ2V0QWNjZXNzaWJsZVN1YnNjcmlwdGlvbkluZm9MaXN0KCkgewogICAgICAgIExpc3Q8U3Vic2NyaXB0aW9uSW5mbz4gcmVzdWx0ID0gbnVsbDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlTdWIuZ2V0QWNjZXNzaWJsZVN1YnNjcmlwdGlvbkluZm9MaXN0KG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXF1ZXN0IGEgcmVmcmVzaCBvZiB0aGUgcGxhdGZvcm0gY2FjaGUgb2YgcHJvZmlsZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGVVSUNDCiAgICAgKiB3aGljaAogICAgICogY29ycmVzcG9uZHMgdG8gdGhlIGNhcmQgSUQgcmV0dXJuZWQgYnkKICAgICAqIHtAbGluayBUZWxlcGhvbnlNYW5hZ2VyI2dldENhcmRJZEZvckRlZmF1bHRFdWljYygpfS4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIFNob3VsZCBiZSBjYWxsZWQgYnkgdGhlIEV1aWNjU2VydmljZSBpbXBsZW1lbnRhdGlvbiB3aGVuZXZlciB0aGlzIGluZm9ybWF0aW9uCiAgICAgKiBjaGFuZ2VzIGR1ZQogICAgICogdG8gYW4gb3BlcmF0aW9uIGRvbmUgb3V0c2lkZSB0aGUgc2NvcGUgb2YgYSByZXF1ZXN0IGluaXRpYXRlZCBieSB0aGUgcGxhdGZvcm0KICAgICAqIHRvIHRoZQogICAgICogRXVpY2NTZXJ2aWNlLiBUaGVyZSBpcyBubyBuZWVkIHRvIHJlZnJlc2ggZm9yIGRvd25sb2FkcywgZGVsZXRlcywgb3Igb3RoZXIKICAgICAqIG9wZXJhdGlvbnMgdGhhdAogICAgICogd2VyZSBtYWRlIHRocm91Z2ggdGhlIEV1aWNjU2VydmljZS4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIFJlcXVpcmVzIHRoZSB7QGxpbmsgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uI1dSSVRFX0VNQkVEREVEX1NVQlNDUklQVElPTlN9CiAgICAgKiBwZXJtaXNzaW9uLgogICAgICoKICAgICAqIEBzZWUge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjZ2V0Q2FyZElkRm9yRGVmYXVsdEV1aWNjKCl9IGZvciBtb3JlIGluZm9ybWF0aW9uCiAgICAgKiAgICAgIG9uIHRoZSBjYXJkIElELgogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBTeXN0ZW1BcGkKICAgIHB1YmxpYyB2b2lkIHJlcXVlc3RFbWJlZGRlZFN1YnNjcmlwdGlvbkluZm9MaXN0UmVmcmVzaCgpIHsKICAgICAgICBpbnQgY2FyZElkID0gVGVsZXBob255TWFuYWdlci5mcm9tKG1Db250ZXh0KS5nZXRDYXJkSWRGb3JEZWZhdWx0RXVpY2MoKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaVN1Yi5yZXF1ZXN0RW1iZWRkZWRTdWJzY3JpcHRpb25JbmZvTGlzdFJlZnJlc2goY2FyZElkKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICBsb2dkKCJyZXF1ZXN0RW1iZWRkZWRTdWJzY3JpcHRpb25JbmZvTGlzdEZyZXNoIGZvciBjYXJkID0gIiArIGNhcmRJZCArICIgZmFpbGVkLiIpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFJlcXVlc3QgYSByZWZyZXNoIG9mIHRoZSBwbGF0Zm9ybSBjYWNoZSBvZiBwcm9maWxlIGluZm9ybWF0aW9uIGZvciB0aGUgZVVJQ0MKICAgICAqIHdpdGggdGhlIGdpdmVuCiAgICAgKiB7QGNvZGUgY2FyZElkfS4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIFNob3VsZCBiZSBjYWxsZWQgYnkgdGhlIEV1aWNjU2VydmljZSBpbXBsZW1lbnRhdGlvbiB3aGVuZXZlciB0aGlzIGluZm9ybWF0aW9uCiAgICAgKiBjaGFuZ2VzIGR1ZQogICAgICogdG8gYW4gb3BlcmF0aW9uIGRvbmUgb3V0c2lkZSB0aGUgc2NvcGUgb2YgYSByZXF1ZXN0IGluaXRpYXRlZCBieSB0aGUgcGxhdGZvcm0KICAgICAqIHRvIHRoZQogICAgICogRXVpY2NTZXJ2aWNlLiBUaGVyZSBpcyBubyBuZWVkIHRvIHJlZnJlc2ggZm9yIGRvd25sb2FkcywgZGVsZXRlcywgb3Igb3RoZXIKICAgICAqIG9wZXJhdGlvbnMgdGhhdAogICAgICogd2VyZSBtYWRlIHRocm91Z2ggdGhlIEV1aWNjU2VydmljZS4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIFJlcXVpcmVzIHRoZSB7QGxpbmsgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uI1dSSVRFX0VNQkVEREVEX1NVQlNDUklQVElPTlN9CiAgICAgKiBwZXJtaXNzaW9uLgogICAgICoKICAgICAqIEBwYXJhbSBjYXJkSWQgdGhlIGNhcmQgSUQgb2YgdGhlIGVVSUNDLgogICAgICoKICAgICAqIEBzZWUge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjZ2V0Q2FyZElkRm9yRGVmYXVsdEV1aWNjKCl9IGZvciBtb3JlIGluZm9ybWF0aW9uCiAgICAgKiAgICAgIG9uIHRoZSBjYXJkIElELgogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBTeXN0ZW1BcGkKICAgIHB1YmxpYyB2b2lkIHJlcXVlc3RFbWJlZGRlZFN1YnNjcmlwdGlvbkluZm9MaXN0UmVmcmVzaChpbnQgY2FyZElkKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGlTdWIucmVxdWVzdEVtYmVkZGVkU3Vic2NyaXB0aW9uSW5mb0xpc3RSZWZyZXNoKGNhcmRJZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgbG9nZCgicmVxdWVzdEVtYmVkZGVkU3Vic2NyaXB0aW9uSW5mb0xpc3RGcmVzaCBmb3IgY2FyZCA9ICIgKyBjYXJkSWQgKyAiIGZhaWxlZC4iKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBAcmV0dXJuIHRoZSBjb3VudCBvZiBhbGwgc3Vic2NyaXB0aW9ucyBpbiB0aGUgZGF0YWJhc2UsIHRoaXMgaW5jbHVkZXMKICAgICAqICAgICAgICAgYWxsIHN1YnNjcmlwdGlvbnMgdGhhdCBoYXZlIGJlZW4gc2Vlbi4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBVbnN1cHBvcnRlZEFwcFVzYWdlCiAgICBwdWJsaWMgaW50IGdldEFsbFN1YnNjcmlwdGlvbkluZm9Db3VudCgpIHsKICAgICAgICBpZiAoVkRCRykKICAgICAgICAgICAgbG9nZCgiW2dldEFsbFN1YnNjcmlwdGlvbkluZm9Db3VudF0rIik7CgogICAgICAgIGludCByZXN1bHQgPSAwOwoKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmVzdWx0ID0gaVN1Yi5nZXRBbGxTdWJJbmZvQ291bnQobUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpLAogICAgICAgICAgICAgICAgICAgICAgICBtQ29udGV4dC5nZXRBdHRyaWJ1dGlvblRhZygpKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKgogICAgICogUmVxdWlyZXMgUGVybWlzc2lvbjoge0BsaW5rIGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbiNSRUFEX1BIT05FX1NUQVRFCiAgICAgKiBSRUFEX1BIT05FX1NUQVRFfQogICAgICogb3IgdGhhdCB0aGUgY2FsbGluZyBhcHAgaGFzIGNhcnJpZXIgcHJpdmlsZWdlcyAoc2VlCiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlc30pLiBJbiB0aGUgbGF0dGVyIGNhc2UsIHRoZSBjb3VudAogICAgICogd2lsbCBpbmNsdWRlCiAgICAgKiBvbmx5IHRob3NlIHN1YnNjcmlwdGlvbnMgYWNjZXNzaWJsZSB0byB0aGUgY2FsbGVyLgogICAgICoKICAgICAqIEByZXR1cm4gdGhlIGN1cnJlbnQgbnVtYmVyIG9mIGFjdGl2ZSBzdWJzY3JpcHRpb25zLiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhlCiAgICAgKiAgICAgICAgIHZhbHVlCiAgICAgKiAgICAgICAgIHJldHVybmVkIGJ5IHRoaXMgbWV0aG9kIHdpbGwgYmUgdGhlIHNhbWUgYXMgdGhlIGxlbmd0aCBvZiB0aGUgbGlzdAogICAgICogICAgICAgICByZXR1cm5lZCBieQogICAgICogICAgICAgICB7QGxpbmsgI2dldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9MaXN0fS4KICAgICAqLwogICAgQFN1cHByZXNzQXV0b0RvYyAvLyBCbG9ja2VkIGJ5IGIvNzI5NjcyMzYgLSBubyBzdXBwb3J0IGZvciBjYXJyaWVyIHByaXZpbGVnZXMKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgaW50IGdldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9Db3VudCgpIHsKICAgICAgICBpbnQgcmVzdWx0ID0gMDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlTdWIuZ2V0QWN0aXZlU3ViSW5mb0NvdW50KG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgbUNvbnRleHQuZ2V0QXR0cmlidXRpb25UYWcoKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQHJldHVybiB0aGUgbWF4aW11bSBudW1iZXIgb2YgYWN0aXZlIHN1YnNjcmlwdGlvbnMgdGhhdCB3aWxsIGJlIHJldHVybmVkIGJ5CiAgICAgKiAgICAgICAgIHtAbGluayAjZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mb0xpc3R9IGFuZCB0aGUgdmFsdWUgcmV0dXJuZWQgYnkKICAgICAqICAgICAgICAge0BsaW5rICNnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvQ291bnR9LgogICAgICovCiAgICBwdWJsaWMgaW50IGdldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9Db3VudE1heCgpIHsKICAgICAgICBpbnQgcmVzdWx0ID0gMDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlTdWIuZ2V0QWN0aXZlU3ViSW5mb0NvdW50TWF4KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQWRkIGEgbmV3IFN1YnNjcmlwdGlvbkluZm8gdG8gU3Vic2NyaXB0aW9uSW5mbyBkYXRhYmFzZSBpZiBuZWVkZWQKICAgICAqIAogICAgICogQHBhcmFtIGljY0lkICAgICB0aGUgSWNjSWQgb2YgdGhlIFNJTSBjYXJkCiAgICAgKiBAcGFyYW0gc2xvdEluZGV4IHRoZSBzbG90IHdoaWNoIHRoZSBTSU0gaXMgaW5zZXJ0ZWQKICAgICAqIEByZXR1cm4gdGhlIFVSTCBvZiB0aGUgbmV3bHkgY3JlYXRlZCByb3cgb3IgdGhlIHVwZGF0ZWQgcm93CiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgVXJpIGFkZFN1YnNjcmlwdGlvbkluZm9SZWNvcmQoU3RyaW5nIGljY0lkLCBpbnQgc2xvdEluZGV4KSB7CiAgICAgICAgaWYgKFZEQkcpCiAgICAgICAgICAgIGxvZ2QoIlthZGRTdWJzY3JpcHRpb25JbmZvUmVjb3JkXSsgaWNjSWQ6IiArIGljY0lkICsgIiBzbG90SW5kZXg6IiArIHNsb3RJbmRleCk7CiAgICAgICAgaWYgKGljY0lkID09IG51bGwpIHsKICAgICAgICAgICAgbG9nZCgiW2FkZFN1YnNjcmlwdGlvbkluZm9SZWNvcmRdLSBudWxsIGljY0lkIik7CiAgICAgICAgfQogICAgICAgIGlmICghaXNWYWxpZFNsb3RJbmRleChzbG90SW5kZXgpKSB7CiAgICAgICAgICAgIGxvZ2QoIlthZGRTdWJzY3JpcHRpb25JbmZvUmVjb3JkXS0gaW52YWxpZCBzbG90SW5kZXgiKTsKICAgICAgICB9CgogICAgICAgIGFkZFN1YnNjcmlwdGlvbkluZm9SZWNvcmQoaWNjSWQsIG51bGwsIHNsb3RJbmRleCwgU1VCU0NSSVBUSU9OX1RZUEVfTE9DQUxfU0lNKTsKCiAgICAgICAgLy8gRklYTUU6IEFsd2F5cyByZXR1cm5zIG51bGw/CiAgICAgICAgcmV0dXJuIG51bGw7CgogICAgfQoKICAgIC8qKgogICAgICogQWRkIGEgbmV3IFN1YnNjcmlwdGlvbkluZm8gdG8gU3Vic2NyaXB0aW9uSW5mbyBkYXRhYmFzZSBpZiBuZWVkZWQKICAgICAqIAogICAgICogQHBhcmFtIHVuaXF1ZUlkICAgICAgICAgVGhpcyBpcyB0aGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBzdWJzY3JpcHRpb24KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhpbiB0aGUKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpZmljIHN1YnNjcmlwdGlvbiB0eXBlLgogICAgICogQHBhcmFtIGRpc3BsYXlOYW1lICAgICAgaHVtYW4tcmVhZGFibGUgbmFtZSBvZiB0aGUgZGV2aWNlIHRoZSBzdWJzY3JpcHRpb24KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlc3BvbmRzIHRvLgogICAgICogQHBhcmFtIHNsb3RJbmRleCAgICAgICAgdGhlIHNsb3QgYXNzaWduZWQgdG8gdGhpcyBzdWJzY3JpcHRpb24uIEl0IGlzIGlnbm9yZWQKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBzdWJzY3JpcHRpb25UeXBlCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBvZiB7QGxpbmsgI1NVQlNDUklQVElPTl9UWVBFX1JFTU9URV9TSU19LgogICAgICogQHBhcmFtIHN1YnNjcmlwdGlvblR5cGUgdGhlIHtAbGluayAjU1VCU0NSSVBUSU9OX1RZUEV9CiAgICAgKiBAaGlkZQogICAgICovCiAgICBAU3lzdGVtQXBpKGNsaWVudCA9IFN5c3RlbUFwaS5DbGllbnQuTU9EVUxFX0xJQlJBUklFUykKICAgIHB1YmxpYyB2b2lkIGFkZFN1YnNjcmlwdGlvbkluZm9SZWNvcmQoQE5vbk51bGwgU3RyaW5nIHVuaXF1ZUlkLCBATnVsbGFibGUgU3RyaW5nIGRpc3BsYXlOYW1lLAogICAgICAgICAgICBpbnQgc2xvdEluZGV4LCBAU3Vic2NyaXB0aW9uVHlwZSBpbnQgc3Vic2NyaXB0aW9uVHlwZSkgewogICAgICAgIGlmIChWREJHKSB7CiAgICAgICAgICAgIGxvZ2QoIlthZGRTdWJzY3JpcHRpb25JbmZvUmVjb3JkXSsgdW5pcXVlSWQ6IiArIHVuaXF1ZUlkCiAgICAgICAgICAgICAgICAgICAgKyAiLCBkaXNwbGF5TmFtZToiICsgZGlzcGxheU5hbWUgKyAiLCBzbG90SW5kZXg6IiArIHNsb3RJbmRleAogICAgICAgICAgICAgICAgICAgICsgIiwgc3Vic2NyaXB0aW9uVHlwZTogIiArIHN1YnNjcmlwdGlvblR5cGUpOwogICAgICAgIH0KICAgICAgICBpZiAodW5pcXVlSWQgPT0gbnVsbCkgewogICAgICAgICAgICBMb2cuZShMT0dfVEFHLCAiW2FkZFN1YnNjcmlwdGlvbkluZm9SZWNvcmRdLSB1bmlxdWVJZCBpcyBudWxsIik7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBMb2cuZShMT0dfVEFHLCAiW2FkZFN1YnNjcmlwdGlvbkluZm9SZWNvcmRdLSBJU3ViIHNlcnZpY2UgaXMgbnVsbCIpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGludCByZXN1bHQgPSBpU3ViLmFkZFN1YkluZm8odW5pcXVlSWQsIGRpc3BsYXlOYW1lLCBzbG90SW5kZXgsIHN1YnNjcmlwdGlvblR5cGUpOwogICAgICAgICAgICBpZiAocmVzdWx0IDwgMCkgewogICAgICAgICAgICAgICAgTG9nLmUoTE9HX1RBRywgIkFkZGluZyBvZiBzdWJzY3JpcHRpb24gZGlkbid0IHN1Y2NlZWQ6IGVycm9yID0gIiArIHJlc3VsdCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBsb2dkKCJzdWNjZXNzZnVsbHkgYWRkZWQgbmV3IHN1YnNjcmlwdGlvbiIpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFJlbW92ZSBTdWJzY3JpcHRpb25JbmZvIHJlY29yZCBmcm9tIHRoZSBTdWJzY3JpcHRpb25JbmZvIGRhdGFiYXNlCiAgICAgKiAKICAgICAqIEBwYXJhbSB1bmlxdWVJZCAgICAgICAgIFRoaXMgaXMgdGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgc3Vic2NyaXB0aW9uCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoaW4gdGhlIHNwZWNpZmljCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gdHlwZS4KICAgICAqIEBwYXJhbSBzdWJzY3JpcHRpb25UeXBlIHRoZSB7QGxpbmsgI1NVQlNDUklQVElPTl9UWVBFfQogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaShjbGllbnQgPSBTeXN0ZW1BcGkuQ2xpZW50Lk1PRFVMRV9MSUJSQVJJRVMpCiAgICBwdWJsaWMgdm9pZCByZW1vdmVTdWJzY3JpcHRpb25JbmZvUmVjb3JkKEBOb25OdWxsIFN0cmluZyB1bmlxdWVJZCwKICAgICAgICAgICAgQFN1YnNjcmlwdGlvblR5cGUgaW50IHN1YnNjcmlwdGlvblR5cGUpIHsKICAgICAgICBpZiAoVkRCRykgewogICAgICAgICAgICBsb2dkKCJbcmVtb3ZlU3Vic2NyaXB0aW9uSW5mb1JlY29yZF0rIHVuaXF1ZUlkOiIgKyB1bmlxdWVJZAogICAgICAgICAgICAgICAgICAgICsgIiwgc3Vic2NyaXB0aW9uVHlwZTogIiArIHN1YnNjcmlwdGlvblR5cGUpOwogICAgICAgIH0KICAgICAgICBpZiAodW5pcXVlSWQgPT0gbnVsbCkgewogICAgICAgICAgICBMb2cuZShMT0dfVEFHLCAiW2FkZFN1YnNjcmlwdGlvbkluZm9SZWNvcmRdLSB1bmlxdWVJZCBpcyBudWxsIik7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBMb2cuZShMT0dfVEFHLCAiW3JlbW92ZVN1YnNjcmlwdGlvbkluZm9SZWNvcmRdLSBJU3ViIHNlcnZpY2UgaXMgbnVsbCIpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGludCByZXN1bHQgPSBpU3ViLnJlbW92ZVN1YkluZm8odW5pcXVlSWQsIHN1YnNjcmlwdGlvblR5cGUpOwogICAgICAgICAgICBpZiAocmVzdWx0IDwgMCkgewogICAgICAgICAgICAgICAgTG9nLmUoTE9HX1RBRywgIlJlbW92YWwgb2Ygc3Vic2NyaXB0aW9uIGRpZG4ndCBzdWNjZWVkOiBlcnJvciA9ICIgKyByZXN1bHQpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbG9nZCgic3VjY2Vzc2Z1bGx5IHJlbW92ZWQgc3Vic2NyaXB0aW9uIik7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogU2V0IFNJTSBpY29uIHRpbnQgY29sb3IgZm9yIHN1YnNjcmlwdGlvbiBJRAogICAgICogCiAgICAgKiBAcGFyYW0gdGludCAgdGhlIFJHQiB2YWx1ZSBvZiBpY29uIHRpbnQgY29sb3Igb2YgdGhlIFNJTQogICAgICogQHBhcmFtIHN1YklkIHRoZSB1bmlxdWUgU3Vic2NyaXRwaW9uIElEIGluIGRhdGFiYXNlCiAgICAgKiBAcmV0dXJuIHRoZSBudW1iZXIgb2YgcmVjb3JkcyB1cGRhdGVkCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKE1hbmlmZXN0LnBlcm1pc3Npb24uTU9ESUZZX1BIT05FX1NUQVRFKQogICAgcHVibGljIGludCBzZXRJY29uVGludChAQ29sb3JJbnQgaW50IHRpbnQsIGludCBzdWJJZCkgewogICAgICAgIGlmIChWREJHKQogICAgICAgICAgICBsb2dkKCJbc2V0SWNvblRpbnRdKyB0aW50OiIgKyB0aW50ICsgIiBzdWJJZDoiICsgc3ViSWQpOwogICAgICAgIHJldHVybiBzZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eUhlbHBlcihzdWJJZCwgInNldEljb25UaW50IiwKICAgICAgICAgICAgICAgIChpU3ViKSAtPiBpU3ViLnNldEljb25UaW50KHRpbnQsIHN1YklkKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgdGhlIGRpc3BsYXkgbmFtZSBmb3IgYSBzdWJzY3JpcHRpb24gSUQKICAgICAqIAogICAgICogQHBhcmFtIGRpc3BsYXlOYW1lIHRoZSBkaXNwbGF5IG5hbWUgb2YgU0lNIGNhcmQKICAgICAqIEBwYXJhbSBzdWJJZCAgICAgICB0aGUgdW5pcXVlIFN1YnNjcml0cGlvbiBJRCBpbiBkYXRhYmFzZQogICAgICogQHBhcmFtIG5hbWVTb3VyY2UgIFNJTSBkaXNwbGF5IG5hbWUgc291cmNlCiAgICAgKiBAcmV0dXJuIHRoZSBudW1iZXIgb2YgcmVjb3JkcyB1cGRhdGVkIG9yIDwgMCBpZiBpbnZhbGlkIHN1YklkCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKE1hbmlmZXN0LnBlcm1pc3Npb24uTU9ESUZZX1BIT05FX1NUQVRFKQogICAgcHVibGljIGludCBzZXREaXNwbGF5TmFtZShATnVsbGFibGUgU3RyaW5nIGRpc3BsYXlOYW1lLCBpbnQgc3ViSWQsCiAgICAgICAgICAgIEBTaW1EaXNwbGF5TmFtZVNvdXJjZSBpbnQgbmFtZVNvdXJjZSkgewogICAgICAgIGlmIChWREJHKSB7CiAgICAgICAgICAgIGxvZ2QoIltzZXREaXNwbGF5TmFtZV0rICBkaXNwbGF5TmFtZToiICsgZGlzcGxheU5hbWUgKyAiIHN1YklkOiIgKyBzdWJJZAogICAgICAgICAgICAgICAgICAgICsgIiBuYW1lU291cmNlOiIgKyBuYW1lU291cmNlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNldFN1YnNjcmlwdGlvblByb3BlcnR5SGVscGVyKHN1YklkLCAic2V0RGlzcGxheU5hbWUiLAogICAgICAgICAgICAgICAgKGlTdWIpIC0+IGlTdWIuc2V0RGlzcGxheU5hbWVVc2luZ1NyYyhkaXNwbGF5TmFtZSwgc3ViSWQsIG5hbWVTb3VyY2UpKTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBwaG9uZSBudW1iZXIgYnkgc3ViSWQKICAgICAqIAogICAgICogQHBhcmFtIG51bWJlciB0aGUgcGhvbmUgbnVtYmVyIG9mIHRoZSBTSU0KICAgICAqIEBwYXJhbSBzdWJJZCAgdGhlIHVuaXF1ZSBTdWJzY3JpcHRpb25JbmZvIGluZGV4IGluIGRhdGFiYXNlCiAgICAgKiBAcmV0dXJuIHRoZSBudW1iZXIgb2YgcmVjb3JkcyB1cGRhdGVkCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAVW5zdXBwb3J0ZWRBcHBVc2FnZShtYXhUYXJnZXRTZGsgPSBCdWlsZC5WRVJTSU9OX0NPREVTLlIsIHRyYWNraW5nQnVnID0gMTcwNzI5NTUzKQogICAgcHVibGljIGludCBzZXREaXNwbGF5TnVtYmVyKFN0cmluZyBudW1iZXIsIGludCBzdWJJZCkgewogICAgICAgIGlmIChudW1iZXIgPT0gbnVsbCkgewogICAgICAgICAgICBsb2dkKCJbc2V0RGlzcGxheU51bWJlcl0tIGZhaWwiKTsKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc2V0U3Vic2NyaXB0aW9uUHJvcGVydHlIZWxwZXIoc3ViSWQsICJzZXREaXNwbGF5TnVtYmVyIiwKICAgICAgICAgICAgICAgIChpU3ViKSAtPiBpU3ViLnNldERpc3BsYXlOdW1iZXIobnVtYmVyLCBzdWJJZCkpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IGRhdGEgcm9hbWluZyBieSBzaW1JbmZvIGluZGV4CiAgICAgKiAKICAgICAqIEBwYXJhbSByb2FtaW5nIDA6RG9uJ3QgYWxsb3cgZGF0YSB3aGVuIHJvYW1pbmcsIDE6QWxsb3cgZGF0YSB3aGVuIHJvYW1pbmcKICAgICAqIEBwYXJhbSBzdWJJZCAgIHRoZSB1bmlxdWUgU3Vic2NyaXB0aW9uSW5mbyBpbmRleCBpbiBkYXRhYmFzZQogICAgICogQHJldHVybiB0aGUgbnVtYmVyIG9mIHJlY29yZHMgdXBkYXRlZAogICAgICogQGhpZGUKICAgICAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UobWF4VGFyZ2V0U2RrID0gQnVpbGQuVkVSU0lPTl9DT0RFUy5SLCB0cmFja2luZ0J1ZyA9IDE3MDcyOTU1MykKICAgIHB1YmxpYyBpbnQgc2V0RGF0YVJvYW1pbmcoaW50IHJvYW1pbmcsIGludCBzdWJJZCkgewogICAgICAgIGlmIChWREJHKQogICAgICAgICAgICBsb2dkKCJbc2V0RGF0YVJvYW1pbmddKyByb2FtaW5nOiIgKyByb2FtaW5nICsgIiBzdWJJZDoiICsgc3ViSWQpOwogICAgICAgIHJldHVybiBzZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eUhlbHBlcihzdWJJZCwgInNldERhdGFSb2FtaW5nIiwKICAgICAgICAgICAgICAgIChpU3ViKSAtPiBpU3ViLnNldERhdGFSb2FtaW5nKHJvYW1pbmcsIHN1YklkKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgc2xvdEluZGV4IGFzc29jaWF0ZWQgd2l0aCB0aGUgc3Vic2NyaXB0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSBzdWJzY3JpcHRpb25JZCB0aGUgdW5pcXVlIFN1YnNjcmlwdGlvbkluZm8gaW5kZXggaW4gZGF0YWJhc2UKICAgICAqIEByZXR1cm4gc2xvdEluZGV4IGFzIGEgcG9zaXRpdmUgaW50ZWdlciBvciB7QGxpbmsgI0lOVkFMSURfU0lNX1NMT1RfSU5ERVh9IGlmCiAgICAgKiAgICAgICAgIHRoZSBzdXBwbGllZAogICAgICogICAgICAgICBzdWJzY3JpcHRpb25JZCBkb2Vzbid0IGhhdmUgYW4gYXNzb2NpYXRlZCBzbG90IGluZGV4LgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGludCBnZXRTbG90SW5kZXgoaW50IHN1YnNjcmlwdGlvbklkKSB7CiAgICAgICAgcmV0dXJuIHNTbG90SW5kZXhDYWNoZS5xdWVyeShzdWJzY3JpcHRpb25JZCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgYW4gYXJyYXkgb2YgU3Vic2NyaXB0aW9uIElkcyBmb3Igc3BlY2lmaWVkIHNsb3QgSW5kZXguCiAgICAgKiAKICAgICAqIEBwYXJhbSBzbG90SW5kZXggdGhlIHNsb3QgaW5kZXguCiAgICAgKiBAcmV0dXJuIHN1YnNjcmlwdGlvbiBJZHMgb3IgbnVsbCBpZiB0aGUgZ2l2ZW4gc2xvdCBJbmRleCBpcyBub3QgdmFsaWQgb3IKICAgICAqICAgICAgICAgdGhlcmUgYXJlIG5vIGFjdGl2ZQogICAgICogICAgICAgICBzdWJzY3JpcHRpb25zIGluIHRoZSBzbG90LgogICAgICovCiAgICBATnVsbGFibGUKICAgIHB1YmxpYyBpbnRbXSBnZXRTdWJzY3JpcHRpb25JZHMoaW50IHNsb3RJbmRleCkgewogICAgICAgIHJldHVybiBnZXRTdWJJZChzbG90SW5kZXgpOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UKICAgIHB1YmxpYyBzdGF0aWMgaW50W10gZ2V0U3ViSWQoaW50IHNsb3RJbmRleCkgewogICAgICAgIGlmICghaXNWYWxpZFNsb3RJbmRleChzbG90SW5kZXgpKSB7CiAgICAgICAgICAgIGxvZ2QoIltnZXRTdWJJZF0tIGZhaWwiKTsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQoKICAgICAgICBpbnRbXSBzdWJJZCA9IG51bGw7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBzdWJJZCA9IGlTdWIuZ2V0U3ViSWQoc2xvdEluZGV4KTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIHJldHVybiBzdWJJZDsKICAgIH0KCiAgICAvKiogQGhpZGUgKi8KICAgIEBVbnN1cHBvcnRlZEFwcFVzYWdlKG1heFRhcmdldFNkayA9IEJ1aWxkLlZFUlNJT05fQ09ERVMuUCkKICAgIHB1YmxpYyBzdGF0aWMgaW50IGdldFBob25lSWQoaW50IHN1YklkKSB7CiAgICAgICAgcmV0dXJuIHNQaG9uZUlkQ2FjaGUucXVlcnkoc3ViSWQpOwogICAgfQoKICAgIHByaXZhdGUgc3RhdGljIHZvaWQgbG9nZChTdHJpbmcgbXNnKSB7CiAgICAgICAgUmxvZy5kKExPR19UQUcsIG1zZyk7CiAgICB9CgogICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCBsb2dlKFN0cmluZyBtc2cpIHsKICAgICAgICBSbG9nLmUoTE9HX1RBRywgbXNnKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIHN5c3RlbSdzIGRlZmF1bHQgc3Vic2NyaXB0aW9uIGlkLgogICAgICoKICAgICAqIEZvciBhIHZvaWNlIGNhcGFibGUgZGV2aWNlLCBpdCB3aWxsIHJldHVybiBnZXREZWZhdWx0Vm9pY2VTdWJzY3JpcHRpb25JZC4KICAgICAqIEZvciBhIGRhdGEgb25seSBkZXZpY2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBnZXREZWZhdWx0RGF0YVN1YnNjcmlwdGlvbklkLgogICAgICogTWF5IHJldHVybiBhbiBJTlZBTElEX1NVQlNDUklQVElPTl9JRCBvbiBlcnJvci4KICAgICAqCiAgICAgKiBAcmV0dXJuIHRoZSAic3lzdGVtIiBkZWZhdWx0IHN1YnNjcmlwdGlvbiBpZC4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBpbnQgZ2V0RGVmYXVsdFN1YnNjcmlwdGlvbklkKCkgewogICAgICAgIHJldHVybiBzRGVmYXVsdFN1YklkQ2FjaGUucXVlcnkobnVsbCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBzeXN0ZW0ncyBkZWZhdWx0IHZvaWNlIHN1YnNjcmlwdGlvbiBpZC4KICAgICAqCiAgICAgKiBPbiBhIGRhdGEgb25seSBkZXZpY2Ugb3Igb24gZXJyb3IsIHdpbGwgcmV0dXJuIElOVkFMSURfU1VCU0NSSVBUSU9OX0lELgogICAgICoKICAgICAqIEByZXR1cm4gdGhlIGRlZmF1bHQgdm9pY2Ugc3Vic2NyaXB0aW9uIElkLgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGludCBnZXREZWZhdWx0Vm9pY2VTdWJzY3JpcHRpb25JZCgpIHsKICAgICAgICBpbnQgc3ViSWQgPSBJTlZBTElEX1NVQlNDUklQVElPTl9JRDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHN1YklkID0gaVN1Yi5nZXREZWZhdWx0Vm9pY2VTdWJJZCgpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KCiAgICAgICAgaWYgKFZEQkcpCiAgICAgICAgICAgIGxvZ2QoImdldERlZmF1bHRWb2ljZVN1YnNjcmlwdGlvbklkLCBzdWIgaWQgPSAiICsgc3ViSWQpOwogICAgICAgIHJldHVybiBzdWJJZDsKICAgIH0KCiAgICAvKioKICAgICAqIFNldHMgdGhlIHN5c3RlbSdzIGRlZmF1bHQgdm9pY2Ugc3Vic2NyaXB0aW9uIGlkLgogICAgICoKICAgICAqIE9uIGEgZGF0YS1vbmx5IGRldmljZSwgdGhpcyBpcyBhIG5vLW9wLgogICAgICoKICAgICAqIE1heSB0aHJvdyBhIHtAbGluayBSdW50aW1lRXhjZXB0aW9ufSBpZiB0aGUgcHJvdmlkZWQgc3Vic2NyaXB0aW9uIGlkIGlzIGVxdWFsCiAgICAgKiB0bwogICAgICoge0BsaW5rIFN1YnNjcmlwdGlvbk1hbmFnZXIjREVGQVVMVF9TVUJTQ1JJUFRJT05fSUR9CiAgICAgKgogICAgICogQHBhcmFtIHN1YnNjcmlwdGlvbklkIEEgdmFsaWQgc3Vic2NyaXB0aW9uIElEIHRvIHNldCBhcyB0aGUgc3lzdGVtIGRlZmF1bHQsCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgb3IKICAgICAqICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgU3Vic2NyaXB0aW9uTWFuYWdlciNJTlZBTElEX1NVQlNDUklQVElPTl9JRH0KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBTeXN0ZW1BcGkKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oTWFuaWZlc3QucGVybWlzc2lvbi5NT0RJRllfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgdm9pZCBzZXREZWZhdWx0Vm9pY2VTdWJzY3JpcHRpb25JZChpbnQgc3Vic2NyaXB0aW9uSWQpIHsKICAgICAgICBpZiAoVkRCRykKICAgICAgICAgICAgbG9nZCgic2V0RGVmYXVsdFZvaWNlU3ViSWQgc3ViIGlkID0gIiArIHN1YnNjcmlwdGlvbklkKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaVN1Yi5zZXREZWZhdWx0Vm9pY2VTdWJJZChzdWJzY3JpcHRpb25JZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogU2FtZSBhcyB7QGxpbmsgI3NldERlZmF1bHRWb2ljZVN1YnNjcmlwdGlvbklkKGludCl9LCBidXQgcHJlc2VydmVkIGZvcgogICAgICogYmFja3dhcmRzCiAgICAgKiBjb21wYXRpYmlsaXR5LgogICAgICogCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgdm9pZCBzZXREZWZhdWx0Vm9pY2VTdWJJZChpbnQgc3ViSWQpIHsKICAgICAgICBzZXREZWZhdWx0Vm9pY2VTdWJzY3JpcHRpb25JZChzdWJJZCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gdGhlIFN1YnNjcmlwdGlvbkluZm8gZm9yIGRlZmF1bHQgdm9pY2Ugc3Vic2NyaXB0aW9uLgogICAgICoKICAgICAqIFdpbGwgcmV0dXJuIG51bGwgb24gZGF0YSBvbmx5IGRldmljZXMsIG9yIG9uIGVycm9yLgogICAgICoKICAgICAqIEByZXR1cm4gdGhlIFN1YnNjcmlwdGlvbkluZm8gZm9yIHRoZSBkZWZhdWx0IHZvaWNlIHN1YnNjcmlwdGlvbi4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBVbnN1cHBvcnRlZEFwcFVzYWdlKG1heFRhcmdldFNkayA9IEJ1aWxkLlZFUlNJT05fQ09ERVMuUiwgdHJhY2tpbmdCdWcgPSAxNzA3Mjk1NTMpCiAgICBwdWJsaWMgU3Vic2NyaXB0aW9uSW5mbyBnZXREZWZhdWx0Vm9pY2VTdWJzY3JpcHRpb25JbmZvKCkgewogICAgICAgIHJldHVybiBnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvKGdldERlZmF1bHRWb2ljZVN1YnNjcmlwdGlvbklkKCkpOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UobWF4VGFyZ2V0U2RrID0gQnVpbGQuVkVSU0lPTl9DT0RFUy5SLCB0cmFja2luZ0J1ZyA9IDE3MDcyOTU1MykKICAgIHB1YmxpYyBzdGF0aWMgaW50IGdldERlZmF1bHRWb2ljZVBob25lSWQoKSB7CiAgICAgICAgcmV0dXJuIGdldFBob25lSWQoZ2V0RGVmYXVsdFZvaWNlU3Vic2NyaXB0aW9uSWQoKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBzeXN0ZW0ncyBkZWZhdWx0IFNNUyBzdWJzY3JpcHRpb24gaWQuCiAgICAgKgogICAgICogT24gYSBkYXRhIG9ubHkgZGV2aWNlIG9yIG9uIGVycm9yLCB3aWxsIHJldHVybiBJTlZBTElEX1NVQlNDUklQVElPTl9JRC4KICAgICAqCiAgICAgKiBAcmV0dXJuIHRoZSBkZWZhdWx0IFNNUyBzdWJzY3JpcHRpb24gSWQuCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgaW50IGdldERlZmF1bHRTbXNTdWJzY3JpcHRpb25JZCgpIHsKICAgICAgICByZXR1cm4gc0RlZmF1bHRTbXNTdWJJZENhY2hlLnF1ZXJ5KG51bGwpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHRoZSBzdWJzY3JpcHRpb24gd2hpY2ggd2lsbCBiZSB1c2VkIGJ5IGRlZmF1bHQgZm9yIFNNUywgd2l0aCB0aGUKICAgICAqIHN1YnNjcmlwdGlvbiB3aGljaAogICAgICogdGhlIHN1cHBsaWVkIHN1YnNjcmlwdGlvbiBJRCBjb3JyZXNwb25kcyB0bzsgb3IgdGhyb3cgYSBSdW50aW1lRXhjZXB0aW9uIGlmCiAgICAgKiB0aGUgc3VwcGxpZWQKICAgICAqIHN1YnNjcmlwdGlvbiBJRCBpcyBub3QgdXNhYmxlIChjaGVjayB3aXRoCiAgICAgKiB7QGxpbmsgI2lzVXNhYmxlU3Vic2NyaXB0aW9uSWQoaW50KX0pLgogICAgICoKICAgICAqIEBwYXJhbSBzdWJzY3JpcHRpb25JZCB0aGUgc3VwcGxpZWQgc3Vic2NyaXB0aW9uIElECiAgICAgKgogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgQFJlcXVpcmVzUGVybWlzc2lvbihhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uTU9ESUZZX1BIT05FX1NUQVRFKQogICAgcHVibGljIHZvaWQgc2V0RGVmYXVsdFNtc1N1YklkKGludCBzdWJzY3JpcHRpb25JZCkgewogICAgICAgIGlmIChWREJHKQogICAgICAgICAgICBsb2dkKCJzZXREZWZhdWx0U21zU3ViSWQgc3ViIGlkID0gIiArIHN1YnNjcmlwdGlvbklkKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaVN1Yi5zZXREZWZhdWx0U21zU3ViSWQoc3Vic2NyaXB0aW9uSWQpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIGV4LnJldGhyb3dGcm9tU3lzdGVtU2VydmVyKCk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJuIHRoZSBTdWJzY3JpcHRpb25JbmZvIGZvciBkZWZhdWx0IHZvaWNlIHN1YnNjcmlwdGlvbi4KICAgICAqCiAgICAgKiBXaWxsIHJldHVybiBudWxsIG9uIGRhdGEgb25seSBkZXZpY2VzLCBvciBvbiBlcnJvci4KICAgICAqCiAgICAgKiBAcmV0dXJuIHRoZSBTdWJzY3JpcHRpb25JbmZvIGZvciB0aGUgZGVmYXVsdCBTTVMgc3Vic2NyaXB0aW9uLgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIFN1YnNjcmlwdGlvbkluZm8gZ2V0RGVmYXVsdFNtc1N1YnNjcmlwdGlvbkluZm8oKSB7CiAgICAgICAgcmV0dXJuIGdldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm8oZ2V0RGVmYXVsdFNtc1N1YnNjcmlwdGlvbklkKCkpOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UobWF4VGFyZ2V0U2RrID0gQnVpbGQuVkVSU0lPTl9DT0RFUy5SLCB0cmFja2luZ0J1ZyA9IDE3MDcyOTU1MykKICAgIHB1YmxpYyBpbnQgZ2V0RGVmYXVsdFNtc1Bob25lSWQoKSB7CiAgICAgICAgcmV0dXJuIGdldFBob25lSWQoZ2V0RGVmYXVsdFNtc1N1YnNjcmlwdGlvbklkKCkpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgc3lzdGVtJ3MgZGVmYXVsdCBkYXRhIHN1YnNjcmlwdGlvbiBpZC4KICAgICAqCiAgICAgKiBPbiBhIHZvaWNlIG9ubHkgZGV2aWNlIG9yIG9uIGVycm9yLCB3aWxsIHJldHVybiBJTlZBTElEX1NVQlNDUklQVElPTl9JRC4KICAgICAqCiAgICAgKiBAcmV0dXJuIHRoZSBkZWZhdWx0IGRhdGEgc3Vic2NyaXB0aW9uIElkLgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGludCBnZXREZWZhdWx0RGF0YVN1YnNjcmlwdGlvbklkKCkgewogICAgICAgIHJldHVybiBzRGVmYXVsdERhdGFTdWJJZENhY2hlLnF1ZXJ5KG51bGwpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHRoZSBzdWJzY3JpcHRpb24gd2hpY2ggd2lsbCBiZSB1c2VkIGJ5IGRlZmF1bHQgZm9yIGRhdGEsIHdpdGggdGhlCiAgICAgKiBzdWJzY3JpcHRpb24gd2hpY2gKICAgICAqIHRoZSBzdXBwbGllZCBzdWJzY3JpcHRpb24gSUQgY29ycmVzcG9uZHMgdG87IG9yIHRocm93IGEgUnVudGltZUV4Y2VwdGlvbiBpZgogICAgICogdGhlIHN1cHBsaWVkCiAgICAgKiBzdWJzY3JpcHRpb24gSUQgaXMgbm90IHVzYWJsZSAoY2hlY2sgd2l0aAogICAgICoge0BsaW5rICNpc1VzYWJsZVN1YnNjcmlwdGlvbklkKGludCl9KS4KICAgICAqCiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uSWQgdGhlIHN1cHBsaWVkIHN1YnNjcmlwdGlvbiBJRAogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBTeXN0ZW1BcGkKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLk1PRElGWV9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyB2b2lkIHNldERlZmF1bHREYXRhU3ViSWQoaW50IHN1YnNjcmlwdGlvbklkKSB7CiAgICAgICAgaWYgKFZEQkcpCiAgICAgICAgICAgIGxvZ2QoInNldERhdGFTdWJzY3JpcHRpb24gc3ViIGlkID0gIiArIHN1YnNjcmlwdGlvbklkKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaVN1Yi5zZXREZWZhdWx0RGF0YVN1YklkKHN1YnNjcmlwdGlvbklkKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gdGhlIFN1YnNjcmlwdGlvbkluZm8gZm9yIGRlZmF1bHQgZGF0YSBzdWJzY3JpcHRpb24uCiAgICAgKgogICAgICogV2lsbCByZXR1cm4gbnVsbCBvbiB2b2ljZSBvbmx5IGRldmljZXMsIG9yIG9uIGVycm9yLgogICAgICoKICAgICAqIEByZXR1cm4gdGhlIFN1YnNjcmlwdGlvbkluZm8gZm9yIHRoZSBkZWZhdWx0IGRhdGEgc3Vic2NyaXB0aW9uLgogICAgICogQGhpZGUKICAgICAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UKICAgIHB1YmxpYyBTdWJzY3JpcHRpb25JbmZvIGdldERlZmF1bHREYXRhU3Vic2NyaXB0aW9uSW5mbygpIHsKICAgICAgICByZXR1cm4gZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mbyhnZXREZWZhdWx0RGF0YVN1YnNjcmlwdGlvbklkKCkpOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UKICAgIHB1YmxpYyBpbnQgZ2V0RGVmYXVsdERhdGFQaG9uZUlkKCkgewogICAgICAgIHJldHVybiBnZXRQaG9uZUlkKGdldERlZmF1bHREYXRhU3Vic2NyaXB0aW9uSWQoKSk7CiAgICB9CgogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgdm9pZCBjbGVhclN1YnNjcmlwdGlvbkluZm8oKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGlTdWIuY2xlYXJTdWJJbmZvKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQoKICAgICAgICByZXR1cm47CiAgICB9CgogICAgLy8gRklYTUUgdGhpcyBpcyB2dWxuZXJhYmxlIHRvIHJhY2UgY29uZGl0aW9ucwogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgYm9vbGVhbiBhbGxEZWZhdWx0c1NlbGVjdGVkKCkgewogICAgICAgIGlmICghaXNWYWxpZFN1YnNjcmlwdGlvbklkKGdldERlZmF1bHREYXRhU3Vic2NyaXB0aW9uSWQoKSkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoIWlzVmFsaWRTdWJzY3JpcHRpb25JZChnZXREZWZhdWx0U21zU3Vic2NyaXB0aW9uSWQoKSkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoIWlzVmFsaWRTdWJzY3JpcHRpb25JZChnZXREZWZhdWx0Vm9pY2VTdWJzY3JpcHRpb25JZCgpKSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2sgaWYgdGhlIHN1cHBsaWVkIHN1YnNjcmlwdGlvbiBJRCBpcyB2YWxpZC4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIEEgdmFsaWQgc3Vic2NyaXB0aW9uIElEIGlzIG5vdCBuZWNlc3NhcmlseSBhbiBhY3RpdmUgc3Vic2NyaXB0aW9uIElECiAgICAgKiAoc2VlIHtAbGluayAjaXNBY3RpdmVTdWJzY3JpcHRpb25JZChpbnQpfSkgb3IgYW4gdXNhYmxlIHN1YnNjcmlwdGlvbiBJRAogICAgICogKHNlZSB7QGxpbmsgI2lzVXNhYmxlU3Vic2NyaXB0aW9uSWQoaW50KX0pLiBVbmxlc3Mgc3BlY2lmaWNhbGx5IG5vdGVkLAogICAgICogc3Vic2NyaXB0aW9uCiAgICAgKiBBUElzIHdvcmsgd2l0aCBhIHZhbGlkIHN1YnNjcmlwdGlvbiBJRC4KICAgICAqCiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uSWQgVGhlIHN1YnNjcmlwdGlvbiBJRC4KICAgICAqIEByZXR1cm4ge0Bjb2RlIHRydWV9IGlmIHRoZSBzdXBwbGllZCBzdWJzY3JpcHRpb25JZCBpcyB2YWxpZDsge0Bjb2RlIGZhbHNlfQogICAgICogICAgICAgICBvdGhlcndpc2UuCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiBpc1ZhbGlkU3Vic2NyaXB0aW9uSWQoaW50IHN1YnNjcmlwdGlvbklkKSB7CiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbklkID4gSU5WQUxJRF9TVUJTQ1JJUFRJT05fSUQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVjayBpZiB0aGUgc3VwcGxpZWQgc3Vic2NyaXB0aW9uIElEIGlzIHVzYWJsZS4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIEEgdXNhYmxlIHN1YnNjcmlwdGlvbiBJRCBpcyBhIHZhbGlkIHN1YnNjcmlwdGlvbiBJRCwgYnV0IG5vdCBuZWNlc3NhcmlseSBhbgogICAgICogYWN0aXZlCiAgICAgKiBzdWJzY3JpcHRpb24gSUQgKHNlZSB7QGxpbmsgI2lzQWN0aXZlU3Vic2NyaXB0aW9uSWQoaW50KX0pLiBTb21lIHN1YnNjcmlwdGlvbgogICAgICogQVBJcwogICAgICogcmVxdWlyZSBhIHVzYWJsZSBzdWJzY3JpcHRpb24gSUQsIGFuZCB0aGlzIGlzIG5vdGVkIGluIHRoZWlyIGRvY3VtZW50YXRpb247CiAgICAgKiBvdGhlcndpc2UsIGEKICAgICAqIHN1YnNjcmlwdGlvbiBJRCBkb2VzIG5vdCBuZWVkIHRvIGJlIHVzYWJsZSBmb3Igc3Vic2NyaXB0aW9uIGZ1bmN0aW9ucywgb25seQogICAgICogdmFsaWQuCiAgICAgKgogICAgICogQHBhcmFtIHN1YnNjcmlwdGlvbklkIHRoZSBzdWJzY3JpcHRpb24gSUQKICAgICAqIEByZXR1cm4ge0Bjb2RlIHRydWV9IGlmIHRoZSBzdWJzY3JpcHRpb24gSUQgaXMgdXNhYmxlOyB7QGNvZGUgZmFsc2V9CiAgICAgKiAgICAgICAgIG90aGVyd2lzZS4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBib29sZWFuIGlzVXNhYmxlU3Vic2NyaXB0aW9uSWQoaW50IHN1YnNjcmlwdGlvbklkKSB7CiAgICAgICAgcmV0dXJuIGlzVXNhYmxlU3ViSWRWYWx1ZShzdWJzY3JpcHRpb25JZCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAcmV0dXJuIHRydWUgaWYgc3ViSWQgaXMgYW4gdXNhYmxlIHN1YklkIHZhbHVlIGVsc2UgZmFsc2UuIEEKICAgICAqICAgICAgICAgdXNhYmxlIHN1YklkIG1lYW5zIGl0cyBuZWl0aGVyIGEgSU5WQUxJRF9TVUJTQ1JJUFRJT05fSUQgbm9yIGEKICAgICAqICAgICAgICAgREVGQVVMVF9TVUJfSUQuCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAVW5zdXBwb3J0ZWRBcHBVc2FnZShtYXhUYXJnZXRTZGsgPSBCdWlsZC5WRVJTSU9OX0NPREVTLlApCiAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW4gaXNVc2FibGVTdWJJZFZhbHVlKGludCBzdWJJZCkgewogICAgICAgIHJldHVybiBzdWJJZCA+PSBNSU5fU1VCU0NSSVBUSU9OX0lEX1ZBTFVFICYmIHN1YklkIDw9IE1BWF9TVUJTQ1JJUFRJT05fSURfVkFMVUU7CiAgICB9CgogICAgLyoqIEBoaWRlICovCiAgICBAVW5zdXBwb3J0ZWRBcHBVc2FnZShtYXhUYXJnZXRTZGsgPSBCdWlsZC5WRVJTSU9OX0NPREVTLlAsIHRyYWNraW5nQnVnID0gMTE1NjA5MDIzKQogICAgcHVibGljIHN0YXRpYyBib29sZWFuIGlzVmFsaWRTbG90SW5kZXgoaW50IHNsb3RJbmRleCkgewogICAgICAgIHJldHVybiBzbG90SW5kZXggPj0gMCAmJiBzbG90SW5kZXggPCBUZWxlcGhvbnlNYW5hZ2VyLmdldERlZmF1bHQoKS5nZXRBY3RpdmVNb2RlbUNvdW50KCk7CiAgICB9CgogICAgLyoqIEBoaWRlICovCiAgICBAVW5zdXBwb3J0ZWRBcHBVc2FnZShtYXhUYXJnZXRTZGsgPSBCdWlsZC5WRVJTSU9OX0NPREVTLlIsIHRyYWNraW5nQnVnID0gMTcwNzI5NTUzKQogICAgcHVibGljIHN0YXRpYyBib29sZWFuIGlzVmFsaWRQaG9uZUlkKGludCBwaG9uZUlkKSB7CiAgICAgICAgcmV0dXJuIHBob25lSWQgPj0gMCAmJiBwaG9uZUlkIDwgVGVsZXBob255TWFuYWdlci5nZXREZWZhdWx0KCkuZ2V0QWN0aXZlTW9kZW1Db3VudCgpOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UobWF4VGFyZ2V0U2RrID0gQnVpbGQuVkVSU0lPTl9DT0RFUy5QKQogICAgcHVibGljIHN0YXRpYyB2b2lkIHB1dFBob25lSWRBbmRTdWJJZEV4dHJhKEludGVudCBpbnRlbnQsIGludCBwaG9uZUlkKSB7CiAgICAgICAgaW50W10gc3ViSWRzID0gU3Vic2NyaXB0aW9uTWFuYWdlci5nZXRTdWJJZChwaG9uZUlkKTsKICAgICAgICBpZiAoc3ViSWRzICE9IG51bGwgJiYgc3ViSWRzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgcHV0UGhvbmVJZEFuZFN1YklkRXh0cmEoaW50ZW50LCBwaG9uZUlkLCBzdWJJZHNbMF0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxvZ2QoInB1dFBob25lSWRBbmRTdWJJZEV4dHJhOiBubyB2YWxpZCBzdWJzIik7CiAgICAgICAgICAgIGludGVudC5wdXRFeHRyYShQaG9uZUNvbnN0YW50cy5QSE9ORV9LRVksIHBob25lSWQpOwogICAgICAgICAgICBpbnRlbnQucHV0RXh0cmEoRVhUUkFfU0xPVF9JTkRFWCwgcGhvbmVJZCk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UobWF4VGFyZ2V0U2RrID0gQnVpbGQuVkVSU0lPTl9DT0RFUy5SLCB0cmFja2luZ0J1ZyA9IDE3MDcyOTU1MykKICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBwdXRQaG9uZUlkQW5kU3ViSWRFeHRyYShJbnRlbnQgaW50ZW50LCBpbnQgcGhvbmVJZCwgaW50IHN1YklkKSB7CiAgICAgICAgaWYgKFZEQkcpCiAgICAgICAgICAgIGxvZ2QoInB1dFBob25lSWRBbmRTdWJJZEV4dHJhOiBwaG9uZUlkPSIgKyBwaG9uZUlkICsgIiBzdWJJZD0iICsgc3ViSWQpOwogICAgICAgIGludGVudC5wdXRFeHRyYShFWFRSQV9TTE9UX0lOREVYLCBwaG9uZUlkKTsKICAgICAgICBpbnRlbnQucHV0RXh0cmEoUGhvbmVDb25zdGFudHMuUEhPTkVfS0VZLCBwaG9uZUlkKTsKICAgICAgICBwdXRTdWJzY3JpcHRpb25JZEV4dHJhKGludGVudCwgc3ViSWQpOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHZpc2libGUgc3Vic2NyaXB0aW9uIElkKHMpIG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIFNJTShzKS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHRoZSBsaXN0IG9mIHN1YklkJ3MgdGhhdCBhcmUgYWN0aXZlLAogICAgICogICAgICAgICBpcyBuZXZlciBudWxsIGJ1dCB0aGUgbGVuZ3RoIG1heSBiZSAwLgogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgQFJlcXVpcmVzUGVybWlzc2lvbihNYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUFJJVklMRUdFRF9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBATm9uTnVsbCBpbnRbXSBnZXRBY3RpdmVTdWJzY3JpcHRpb25JZExpc3QoKSB7CiAgICAgICAgcmV0dXJuIGdldEFjdGl2ZVN1YnNjcmlwdGlvbklkTGlzdCgvKiB2aXNpYmxlT25seSAqLyB0cnVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBib3RoIGhpZGRlbiBhbmQgdmlzaWJsZSBzdWJzY3JpcHRpb24gSWQocykgb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUKICAgICAqIFNJTShzKS4KICAgICAqCiAgICAgKiBIaWRkZW4gc3Vic2NyaXB0aW9ucyByZWZlciB0byB0aG9zZSBhcmUgbm90IG1lYW50IHZpc2libGUgdG8gdGhlIHVzZXJzLgogICAgICogRm9yIGV4YW1wbGUsIGFuIG9wcG9ydHVuaXN0aWMgc3Vic2NyaXB0aW9uIHRoYXQgaXMgZ3JvdXBlZCB3aXRoIG90aGVyCiAgICAgKiBzdWJzY3JpcHRpb25zIHNob3VsZCByZW1haW4gaW52aXNpYmxlIHRvIHVzZXJzIGFzIHRoZXkgYXJlIG9ubHkgZnVuY3Rpb25hbGx5CiAgICAgKiBzdXBwbGVtZW50YXJ5IHRvIHByaW1hcnkgb25lcy4KICAgICAqCiAgICAgKiBAcmV0dXJuIHRoZSBsaXN0IG9mIHN1YklkJ3MgdGhhdCBhcmUgYWN0aXZlLAogICAgICogICAgICAgICBpcyBuZXZlciBudWxsIGJ1dCB0aGUgbGVuZ3RoIG1heSBiZSAwLgogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgQFJlcXVpcmVzUGVybWlzc2lvbihNYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUFJJVklMRUdFRF9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBATm9uTnVsbCBpbnRbXSBnZXRDb21wbGV0ZUFjdGl2ZVN1YnNjcmlwdGlvbklkTGlzdCgpIHsKICAgICAgICByZXR1cm4gZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSWRMaXN0KC8qIHZpc2libGVPbmx5ICovZmFsc2UpOwogICAgfQoKICAgIC8qKgogICAgICogQHJldHVybiBhIG5vbi1udWxsIGxpc3Qgb2Ygc3ViSWQncyB0aGF0IGFyZSBhY3RpdmUuCiAgICAgKgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIEBOb25OdWxsIGludFtdIGdldEFjdGl2ZVN1YnNjcmlwdGlvbklkTGlzdChib29sZWFuIHZpc2libGVPbmx5KSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGludFtdIHN1YklkID0gaVN1Yi5nZXRBY3RpdmVTdWJJZExpc3QodmlzaWJsZU9ubHkpOwogICAgICAgICAgICAgICAgaWYgKHN1YklkICE9IG51bGwpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1YklkOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG5ldyBpbnRbMF07CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGRldmljZSBpcyBjb25zaWRlcmVkIHJvYW1pbmcgb24gdGhlIGN1cnJlbnQKICAgICAqIG5ldHdvcmsgZm9yIGEgc3Vic2NyaXB0aW9uLgogICAgICogPHA+CiAgICAgKiBBdmFpbGFiaWxpdHk6IE9ubHkgd2hlbiB1c2VyIHJlZ2lzdGVyZWQgdG8gYSBuZXR3b3JrLgogICAgICoKICAgICAqIEBwYXJhbSBzdWJJZCBUaGUgc3Vic2NyaXB0aW9uIElECiAgICAgKiBAcmV0dXJuIHRydWUgaWYgdGhlIG5ldHdvcmsgZm9yIHRoZSBzdWJzY3JpcHRpb24gaXMgcm9hbWluZywgZmFsc2Ugb3RoZXJ3aXNlCiAgICAgKi8KICAgIHB1YmxpYyBib29sZWFuIGlzTmV0d29ya1JvYW1pbmcoaW50IHN1YklkKSB7CiAgICAgICAgZmluYWwgaW50IHBob25lSWQgPSBnZXRQaG9uZUlkKHN1YklkKTsKICAgICAgICBpZiAocGhvbmVJZCA8IDApIHsKICAgICAgICAgICAgLy8gV2hhdCBlbHNlIGNhbiB3ZSBkbz8KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gVGVsZXBob255TWFuYWdlci5nZXREZWZhdWx0KCkuaXNOZXR3b3JrUm9hbWluZyhzdWJJZCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGEgY29uc3RhbnQgaW5kaWNhdGluZyB0aGUgc3RhdGUgb2Ygc2ltIGZvciB0aGUgc2xvdCBpbmRleC4KICAgICAqCiAgICAgKiBAcGFyYW0gc2xvdEluZGV4CiAgICAgKgogICAgICogICAgICAgICAgICAgICAgICB7QFNlZSBUZWxlcGhvbnlNYW5hZ2VyI1NJTV9TVEFURV9VTktOT1dOfQogICAgICogICAgICAgICAgICAgICAgICB7QFNlZSBUZWxlcGhvbnlNYW5hZ2VyI1NJTV9TVEFURV9BQlNFTlR9CiAgICAgKiAgICAgICAgICAgICAgICAgIHtAU2VlIFRlbGVwaG9ueU1hbmFnZXIjU0lNX1NUQVRFX1BJTl9SRVFVSVJFRH0KICAgICAqICAgICAgICAgICAgICAgICAge0BTZWUgVGVsZXBob255TWFuYWdlciNTSU1fU1RBVEVfUFVLX1JFUVVJUkVEfQogICAgICogICAgICAgICAgICAgICAgICB7QFNlZSBUZWxlcGhvbnlNYW5hZ2VyI1NJTV9TVEFURV9ORVRXT1JLX0xPQ0tFRH0KICAgICAqICAgICAgICAgICAgICAgICAge0BTZWUgVGVsZXBob255TWFuYWdlciNTSU1fU1RBVEVfUkVBRFl9CiAgICAgKiAgICAgICAgICAgICAgICAgIHtAU2VlIFRlbGVwaG9ueU1hbmFnZXIjU0lNX1NUQVRFX05PVF9SRUFEWX0KICAgICAqICAgICAgICAgICAgICAgICAge0BTZWUgVGVsZXBob255TWFuYWdlciNTSU1fU1RBVEVfUEVSTV9ESVNBQkxFRH0KICAgICAqICAgICAgICAgICAgICAgICAge0BTZWUgVGVsZXBob255TWFuYWdlciNTSU1fU1RBVEVfQ0FSRF9JT19FUlJPUn0KICAgICAqCiAgICAgKiAgICAgICAgICAgICAgICAgIHtAaGlkZX0KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBpbnQgZ2V0U2ltU3RhdGVGb3JTbG90SW5kZXgoaW50IHNsb3RJbmRleCkgewogICAgICAgIGludCBzaW1TdGF0ZSA9IFRlbGVwaG9ueU1hbmFnZXIuU0lNX1NUQVRFX1VOS05PV047CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBzaW1TdGF0ZSA9IGlTdWIuZ2V0U2ltU3RhdGVGb3JTbG90SW5kZXgoc2xvdEluZGV4KTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHNpbVN0YXRlOwogICAgfQoKICAgIC8qKgogICAgICogU3RvcmUgcHJvcGVydGllcyBhc3NvY2lhdGVkIHdpdGggU3Vic2NyaXB0aW9uSW5mbyBpbiBkYXRhYmFzZQogICAgICogCiAgICAgKiBAcGFyYW0gc3ViSWQgICAgIFN1YnNjcmlwdGlvbiBJZCBvZiBTdWJzY3JpcHRpb24KICAgICAqIEBwYXJhbSBwcm9wS2V5ICAgQ29sdW1uIG5hbWUgaW4gZGF0YWJhc2UgYXNzb2NpYXRlZCB3aXRoIFN1YnNjcmlwdGlvbkluZm8KICAgICAqIEBwYXJhbSBwcm9wVmFsdWUgVmFsdWUgdG8gc3RvcmUgaW4gREIgZm9yIHBhcnRpY3VsYXIgc3ViSWQgJiBjb2x1bW4gbmFtZQogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyB2b2lkIHNldFN1YnNjcmlwdGlvblByb3BlcnR5KGludCBzdWJJZCwgU3RyaW5nIHByb3BLZXksIFN0cmluZyBwcm9wVmFsdWUpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaVN1Yi5zZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eShzdWJJZCwgcHJvcEtleSwgcHJvcFZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXJpYWxpemUgbGlzdCBvZiBjb250YWN0cyB1cmkgdG8gc3RyaW5nCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgU3RyaW5nIHNlcmlhbGl6ZVVyaUxpc3RzKExpc3Q8VXJpPiB1cmlzKSB7CiAgICAgICAgTGlzdDxTdHJpbmc+IGNvbnRhY3RzID0gbmV3IEFycmF5TGlzdDw+KCk7CiAgICAgICAgZm9yIChVcmkgdXJpIDogdXJpcykgewogICAgICAgICAgICBjb250YWN0cy5hZGQodXJpLnRvU3RyaW5nKCkpOwogICAgICAgIH0KICAgICAgICB0cnkgewogICAgICAgICAgICBCeXRlQXJyYXlPdXRwdXRTdHJlYW0gYm9zID0gbmV3IEJ5dGVBcnJheU91dHB1dFN0cmVhbSgpOwogICAgICAgICAgICBPYmplY3RPdXRwdXRTdHJlYW0gb29zID0gbmV3IE9iamVjdE91dHB1dFN0cmVhbShib3MpOwogICAgICAgICAgICBvb3Mud3JpdGVPYmplY3QoY29udGFjdHMpOwogICAgICAgICAgICBvb3MuZmx1c2goKTsKICAgICAgICAgICAgcmV0dXJuIEJhc2U2NC5lbmNvZGVUb1N0cmluZyhib3MudG9CeXRlQXJyYXkoKSwgQmFzZTY0LkRFRkFVTFQpOwogICAgICAgIH0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsKICAgICAgICAgICAgbG9nZCgic2VyaWFsaXplVXJpTGlzdHMgSU8gZXhjZXB0aW9uIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiAiIjsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiBsaXN0IG9mIGNvbnRhY3RzIHVyaSBjb3JyZXNwb25kaW5nIHRvIHF1ZXJ5IHJlc3VsdC4KICAgICAqIAogICAgICogQHBhcmFtIHN1YklkICAgU3Vic2NyaXB0aW9uIElkIG9mIFN1YnNjcmlwdGlvbgogICAgICogQHBhcmFtIHByb3BLZXkgQ29sdW1uIG5hbWUgaW4gU3Vic2NyaXB0aW9uSW5mbyBkYXRhYmFzZQogICAgICogQHJldHVybiBsaXN0IG9mIGNvbnRhY3RzIHVyaSB0byBiZSByZXR1cm5lZAogICAgICogQGhpZGUKICAgICAqLwogICAgcHJpdmF0ZSBzdGF0aWMgTGlzdDxVcmk+IGdldENvbnRhY3RzRnJvbVN1YnNjcmlwdGlvblByb3BlcnR5KGludCBzdWJJZCwgU3RyaW5nIHByb3BLZXksCiAgICAgICAgICAgIENvbnRleHQgY29udGV4dCkgewogICAgICAgIFN0cmluZyByZXN1bHQgPSBnZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eShzdWJJZCwgcHJvcEtleSwgY29udGV4dCk7CiAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBieXRlW10gYiA9IEJhc2U2NC5kZWNvZGUocmVzdWx0LCBCYXNlNjQuREVGQVVMVCk7CiAgICAgICAgICAgICAgICBCeXRlQXJyYXlJbnB1dFN0cmVhbSBiaXMgPSBuZXcgQnl0ZUFycmF5SW5wdXRTdHJlYW0oYik7CiAgICAgICAgICAgICAgICBPYmplY3RJbnB1dFN0cmVhbSBvaXMgPSBuZXcgT2JqZWN0SW5wdXRTdHJlYW0oYmlzKTsKICAgICAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBjb250YWN0cyA9IEFycmF5TGlzdC5jbGFzcy5jYXN0KG9pcy5yZWFkT2JqZWN0KCkpOwogICAgICAgICAgICAgICAgTGlzdDxVcmk+IHVyaXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsKICAgICAgICAgICAgICAgIGZvciAoU3RyaW5nIGNvbnRhY3QgOiBjb250YWN0cykgewogICAgICAgICAgICAgICAgICAgIHVyaXMuYWRkKFVyaS5wYXJzZShjb250YWN0KSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdXJpczsKICAgICAgICAgICAgfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgewogICAgICAgICAgICAgICAgbG9nZCgiZ2V0Q29udGFjdHNGcm9tU3Vic2NyaXB0aW9uUHJvcGVydHkgSU8gZXhjZXB0aW9uIik7CiAgICAgICAgICAgIH0gY2F0Y2ggKENsYXNzTm90Rm91bmRFeGNlcHRpb24gZSkgewogICAgICAgICAgICAgICAgbG9nZCgiZ2V0Q29udGFjdHNGcm9tU3Vic2NyaXB0aW9uUHJvcGVydHkgQ2xhc3NOb3RGb3VuZCBleGNlcHRpb24iKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEFycmF5TGlzdDw+KCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTdG9yZSBwcm9wZXJ0aWVzIGFzc29jaWF0ZWQgd2l0aCBTdWJzY3JpcHRpb25JbmZvIGluIGRhdGFiYXNlCiAgICAgKiAKICAgICAqIEBwYXJhbSBzdWJJZCAgIFN1YnNjcmlwdGlvbiBJZCBvZiBTdWJzY3JpcHRpb24KICAgICAqIEBwYXJhbSBwcm9wS2V5IENvbHVtbiBuYW1lIGluIFN1YnNjcmlwdGlvbkluZm8gZGF0YWJhc2UKICAgICAqIEByZXR1cm4gVmFsdWUgYXNzb2NpYXRlZCB3aXRoIHN1YklkIGFuZCBwcm9wS2V5IGNvbHVtbiBpbiBkYXRhYmFzZQogICAgICogQGhpZGUKICAgICAqLwogICAgcHJpdmF0ZSBzdGF0aWMgU3RyaW5nIGdldFN1YnNjcmlwdGlvblByb3BlcnR5KGludCBzdWJJZCwgU3RyaW5nIHByb3BLZXksCiAgICAgICAgICAgIENvbnRleHQgY29udGV4dCkgewogICAgICAgIFN0cmluZyByZXN1bHRWYWx1ZSA9IG51bGw7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHJlc3VsdFZhbHVlID0gaVN1Yi5nZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eShzdWJJZCwgcHJvcEtleSwKICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCksIGNvbnRleHQuZ2V0QXR0cmlidXRpb25UYWcoKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHRWYWx1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYm9vbGVhbiB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHF1ZXJ5IHJlc3VsdC4KICAgICAqIAogICAgICogQHBhcmFtIHN1YklkICAgIFN1YnNjcmlwdGlvbiBJZCBvZiBTdWJzY3JpcHRpb24KICAgICAqIEBwYXJhbSBwcm9wS2V5ICBDb2x1bW4gbmFtZSBpbiBTdWJzY3JpcHRpb25JbmZvIGRhdGFiYXNlCiAgICAgKiBAcGFyYW0gZGVmVmFsdWUgRGVmYXVsdCBib29sZWFuIHZhbHVlIHRvIGJlIHJldHVybmVkCiAgICAgKiBAcmV0dXJuIGJvb2xlYW4gcmVzdWx0IHZhbHVlIHRvIGJlIHJldHVybmVkCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW4gZ2V0Qm9vbGVhblN1YnNjcmlwdGlvblByb3BlcnR5KGludCBzdWJJZCwgU3RyaW5nIHByb3BLZXksCiAgICAgICAgICAgIGJvb2xlYW4gZGVmVmFsdWUsIENvbnRleHQgY29udGV4dCkgewogICAgICAgIFN0cmluZyByZXN1bHQgPSBnZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eShzdWJJZCwgcHJvcEtleSwgY29udGV4dCk7CiAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICByZXR1cm4gSW50ZWdlci5wYXJzZUludChyZXN1bHQpID09IDE7CiAgICAgICAgICAgIH0gY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBlcnIpIHsKICAgICAgICAgICAgICAgIGxvZ2QoImdldEJvb2xlYW5TdWJzY3JpcHRpb25Qcm9wZXJ0eSBOdW1iZXJGb3JtYXQgZXhjZXB0aW9uIik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGRlZlZhbHVlOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyBpbnRlZ2VyIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gcXVlcnkgcmVzdWx0LgogICAgICogCiAgICAgKiBAcGFyYW0gc3ViSWQgICAgU3Vic2NyaXB0aW9uIElkIG9mIFN1YnNjcmlwdGlvbgogICAgICogQHBhcmFtIHByb3BLZXkgIENvbHVtbiBuYW1lIGluIFN1YnNjcmlwdGlvbkluZm8gZGF0YWJhc2UKICAgICAqIEBwYXJhbSBkZWZWYWx1ZSBEZWZhdWx0IGludGVnZXIgdmFsdWUgdG8gYmUgcmV0dXJuZWQKICAgICAqIEByZXR1cm4gaW50ZWdlciByZXN1bHQgdmFsdWUgdG8gYmUgcmV0dXJuZWQKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgaW50IGdldEludGVnZXJTdWJzY3JpcHRpb25Qcm9wZXJ0eShpbnQgc3ViSWQsIFN0cmluZyBwcm9wS2V5LCBpbnQgZGVmVmFsdWUsCiAgICAgICAgICAgIENvbnRleHQgY29udGV4dCkgewogICAgICAgIFN0cmluZyByZXN1bHQgPSBnZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eShzdWJJZCwgcHJvcEtleSwgY29udGV4dCk7CiAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICByZXR1cm4gSW50ZWdlci5wYXJzZUludChyZXN1bHQpOwogICAgICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZXJyKSB7CiAgICAgICAgICAgICAgICBsb2dkKCJnZXRJbnRlZ2VyU3Vic2NyaXB0aW9uUHJvcGVydHkgTnVtYmVyRm9ybWF0IGV4Y2VwdGlvbiIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBkZWZWYWx1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgbG9uZyB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHF1ZXJ5IHJlc3VsdC4KICAgICAqIAogICAgICogQHBhcmFtIHN1YklkICAgIFN1YnNjcmlwdGlvbiBJZCBvZiBTdWJzY3JpcHRpb24KICAgICAqIEBwYXJhbSBwcm9wS2V5ICBDb2x1bW4gbmFtZSBpbiBTdWJzY3JpcHRpb25JbmZvIGRhdGFiYXNlCiAgICAgKiBAcGFyYW0gZGVmVmFsdWUgRGVmYXVsdCBsb25nIHZhbHVlIHRvIGJlIHJldHVybmVkCiAgICAgKiBAcmV0dXJuIGxvbmcgcmVzdWx0IHZhbHVlIHRvIGJlIHJldHVybmVkCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGxvbmcgZ2V0TG9uZ1N1YnNjcmlwdGlvblByb3BlcnR5KGludCBzdWJJZCwgU3RyaW5nIHByb3BLZXksIGxvbmcgZGVmVmFsdWUsCiAgICAgICAgICAgIENvbnRleHQgY29udGV4dCkgewogICAgICAgIFN0cmluZyByZXN1bHQgPSBnZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eShzdWJJZCwgcHJvcEtleSwgY29udGV4dCk7CiAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICByZXR1cm4gTG9uZy5wYXJzZUxvbmcocmVzdWx0KTsKICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGVycikgewogICAgICAgICAgICAgICAgbG9nZCgiZ2V0TG9uZ1N1YnNjcmlwdGlvblByb3BlcnR5IE51bWJlckZvcm1hdCBleGNlcHRpb24iKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZGVmVmFsdWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSB7QGxpbmsgUmVzb3VyY2VzfSBmcm9tIHRoZSBnaXZlbiB7QGxpbmsgQ29udGV4dH0gZm9yIHRoZSBNQ0MvTU5DCiAgICAgKiBhc3NvY2lhdGVkIHdpdGgKICAgICAqIHRoZSBzdWJzY3JpcHRpb24uIElmIHRoZSBzdWJzY3JpcHRpb24gSUQgaXMgaW52YWxpZCwgdGhlIGJhc2UgcmVzb3VyY2VzIGFyZQogICAgICogcmV0dXJuZWQgaW5zdGVhZC4KICAgICAqCiAgICAgKiBSZXF1aXJlcyBQZXJtaXNzaW9uOiB7QGxpbmsgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uI1JFQURfUEhPTkVfU1RBVEUKICAgICAqIFJFQURfUEhPTkVfU1RBVEV9CiAgICAgKgogICAgICogQHBhcmFtIGNvbnRleHQgQ29udGV4dCBvYmplY3QKICAgICAqIEBwYXJhbSBzdWJJZCAgIFN1YnNjcmlwdGlvbiBJZCBvZiBTdWJzY3JpcHRpb24gd2hvc2UgcmVzb3VyY2VzIGFyZSByZXF1aXJlZAogICAgICogQHJldHVybiBSZXNvdXJjZXMgYXNzb2NpYXRlZCB3aXRoIFN1YnNjcmlwdGlvbi4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBOb25OdWxsCiAgICBAU3lzdGVtQXBpCiAgICBwdWJsaWMgc3RhdGljIFJlc291cmNlcyBnZXRSZXNvdXJjZXNGb3JTdWJJZChATm9uTnVsbCBDb250ZXh0IGNvbnRleHQsIGludCBzdWJJZCkgewogICAgICAgIHJldHVybiBnZXRSZXNvdXJjZXNGb3JTdWJJZChjb250ZXh0LCBzdWJJZCwgZmFsc2UpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgcmVzb3VyY2VzIGFzc29jaWF0ZWQgd2l0aCBTdWJzY3JpcHRpb24uCiAgICAgKiAKICAgICAqIEBwYXJhbSBjb250ZXh0ICAgICAgIENvbnRleHQgb2JqZWN0CiAgICAgKiBAcGFyYW0gc3ViSWQgICAgICAgICBTdWJzY3JpcHRpb24gSWQgb2YgU3Vic2NyaXB0aW9uIHdobydzIHJlc291cmNlcyBhcmUKICAgICAqICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgKiBAcGFyYW0gdXNlUm9vdExvY2FsZSBpZiByb290IGxvY2FsZSBzaG91bGQgYmUgdXNlZC4gTG9jYWxpemVkIGxvY2FsZSBpcyB1c2VkCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICBpZiBmYWxzZS4KICAgICAqIEByZXR1cm4gUmVzb3VyY2VzIGFzc29jaWF0ZWQgd2l0aCBTdWJzY3JpcHRpb24uCiAgICAgKiBAaGlkZQogICAgICovCiAgICBATm9uTnVsbAogICAgcHVibGljIHN0YXRpYyBSZXNvdXJjZXMgZ2V0UmVzb3VyY2VzRm9yU3ViSWQoQ29udGV4dCBjb250ZXh0LCBpbnQgc3ViSWQsCiAgICAgICAgICAgIGJvb2xlYW4gdXNlUm9vdExvY2FsZSkgewogICAgICAgIC8vIENoZWNrIGlmIHJlc291cmNlcyBmb3IgdGhpcyBjb250ZXh0IGFuZCBzdWJJZCBhbHJlYWR5IGV4aXN0IGluIHRoZSByZXNvdXJjZQogICAgICAgIC8vIGNhY2hlLgogICAgICAgIC8vIFJlc291cmNlcyB0aGF0IHVzZSB0aGUgcm9vdCBsb2NhbGUgYXJlIG5vdCBjYWNoZWQuCiAgICAgICAgUGFpcjxDb250ZXh0LCBJbnRlZ2VyPiBjYWNoZUtleSA9IG51bGw7CiAgICAgICAgaWYgKGlzVmFsaWRTdWJzY3JpcHRpb25JZChzdWJJZCkgJiYgIXVzZVJvb3RMb2NhbGUpIHsKICAgICAgICAgICAgY2FjaGVLZXkgPSBQYWlyLmNyZWF0ZShjb250ZXh0LCBzdWJJZCk7CiAgICAgICAgICAgIGlmIChzUmVzb3VyY2VzQ2FjaGUuY29udGFpbnNLZXkoY2FjaGVLZXkpKSB7CiAgICAgICAgICAgICAgICAvLyBDYWNoZSBoaXQuIFVzZSBjYWNoZWQgUmVzb3VyY2VzLgogICAgICAgICAgICAgICAgcmV0dXJuIHNSZXNvdXJjZXNDYWNoZS5nZXQoY2FjaGVLZXkpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmaW5hbCBTdWJzY3JpcHRpb25JbmZvIHN1YkluZm8gPSBTdWJzY3JpcHRpb25NYW5hZ2VyLmZyb20oY29udGV4dCkuZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mbyhzdWJJZCk7CgogICAgICAgIENvbmZpZ3VyYXRpb24gb3ZlcnJpZGVDb25maWcgPSBuZXcgQ29uZmlndXJhdGlvbigpOwogICAgICAgIGlmIChzdWJJbmZvICE9IG51bGwpIHsKICAgICAgICAgICAgb3ZlcnJpZGVDb25maWcubWNjID0gc3ViSW5mby5nZXRNY2MoKTsKICAgICAgICAgICAgb3ZlcnJpZGVDb25maWcubW5jID0gc3ViSW5mby5nZXRNbmMoKTsKICAgICAgICAgICAgaWYgKG92ZXJyaWRlQ29uZmlnLm1uYyA9PSAwKSB7CiAgICAgICAgICAgICAgICBvdmVycmlkZUNvbmZpZy5tbmMgPSBDb25maWd1cmF0aW9uLk1OQ19aRVJPOwogICAgICAgICAgICAgICAgY2FjaGVLZXkgPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2FjaGVLZXkgPSBudWxsOwogICAgICAgIH0KCiAgICAgICAgaWYgKHVzZVJvb3RMb2NhbGUpIHsKICAgICAgICAgICAgb3ZlcnJpZGVDb25maWcuc2V0TG9jYWxlKExvY2FsZS5ST09UKTsKICAgICAgICB9CgogICAgICAgIC8vIENyZWF0ZSBuZXcgY29udGV4dCB3aXRoIG5ldyBjb25maWd1cmF0aW9uIHNvIHRoYXQgd2UgY2FuIGF2b2lkIG1vZGlmeWluZyB0aGUKICAgICAgICAvLyBwYXNzZWQgaW4KICAgICAgICAvLyBjb250ZXh0LgogICAgICAgIC8vIE5vdGUgdGhhdCBpZiB0aGUgb3JpZ2luYWwgY29udGV4dCBjb25maWd1cmF0aW9uIGNoYW5nZXMsIHRoZSByZXNvdXJjZXMgaGVyZQogICAgICAgIC8vIHdpbGwgYWxzbwogICAgICAgIC8vIGNoYW5nZSBmb3IgYWxsIHZhbHVlcyBleGNlcHQgdGhvc2Ugb3ZlcnJpZGRlbiBieSBuZXdDb25maWcgKGUuZy4gaWYgdGhlCiAgICAgICAgLy8gZGV2aWNlIGhhcyBhbgogICAgICAgIC8vIG9yaWVudGF0aW9uIGNoYW5nZSkuCiAgICAgICAgQ29udGV4dCBuZXdDb250ZXh0ID0gY29udGV4dC5jcmVhdGVDb25maWd1cmF0aW9uQ29udGV4dChvdmVycmlkZUNvbmZpZyk7CiAgICAgICAgUmVzb3VyY2VzIHJlcyA9IG5ld0NvbnRleHQuZ2V0UmVzb3VyY2VzKCk7CgogICAgICAgIGlmIChjYWNoZUtleSAhPSBudWxsKSB7CiAgICAgICAgICAgIC8vIFNhdmUgdGhlIG5ld2x5IGNyZWF0ZWQgUmVzb3VyY2VzIGluIHRoZSByZXNvdXJjZSBjYWNoZS4KICAgICAgICAgICAgc1Jlc291cmNlc0NhY2hlLnB1dChjYWNoZUtleSwgcmVzKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlczsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrcyBpZiB0aGUgc3VwcGxpZWQgc3Vic2NyaXB0aW9uIElEIGNvcnJlc3BvbmRzIHRvIGEgc3Vic2NyaXB0aW9uIHdoaWNoIGlzCiAgICAgKiBhY3RpdmVseSBpbgogICAgICogdXNlIG9uIHRoZSBkZXZpY2UuIEFuIGFjdGl2ZSBzdWJzY3JpcHRpb24gSUQgaXMgYSB2YWxpZCBhbmQgdXNhYmxlCiAgICAgKiBzdWJzY3JpcHRpb24gSUQuCiAgICAgKgogICAgICogQHBhcmFtIHN1YnNjcmlwdGlvbklkIHRoZSBzdWJzY3JpcHRpb24gSUQuCiAgICAgKiBAcmV0dXJuIHtAY29kZSB0cnVlfSBpZiB0aGUgc3VwcGxpZWQgc3Vic2NyaXB0aW9uIElEIGNvcnJlc3BvbmRzIHRvIGFuIGFjdGl2ZQogICAgICogICAgICAgICBzdWJzY3JpcHRpb247CiAgICAgKiAgICAgICAgIHtAY29kZSBmYWxzZX0gaWYgaXQgZG9lcyBub3QgY29ycmVzcG9uZCB0byBhbiBhY3RpdmUgc3Vic2NyaXB0aW9uOyBvcgogICAgICogICAgICAgICB0aHJvdyBhCiAgICAgKiAgICAgICAgIFNlY3VyaXR5RXhjZXB0aW9uIGlmIHRoZSBjYWxsZXIgaGFzbid0IGdvdCB0aGUgcmlnaHQgcGVybWlzc2lvbi4KICAgICAqLwogICAgQFJlcXVpcmVzUGVybWlzc2lvbihhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uUkVBRF9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBib29sZWFuIGlzQWN0aXZlU3Vic2NyaXB0aW9uSWQoaW50IHN1YnNjcmlwdGlvbklkKSB7CiAgICAgICAgcmV0dXJuIGlzQWN0aXZlU3ViSWQoc3Vic2NyaXB0aW9uSWQpOwogICAgfQoKICAgIC8qKgogICAgICogQHJldHVybiB0cnVlIGlmIHRoZSBzdWIgSUQgaXMgYWN0aXZlLiBpLmUuIFRoZSBzdWIgSUQgY29ycmVzcG9uZHMgdG8gYSBrbm93bgogICAgICogICAgICAgICBzdWJzY3JpcHRpb24KICAgICAqICAgICAgICAgYW5kIHRoZSBTSU0gcHJvdmlkaW5nIHRoZSBzdWJzY3JpcHRpb24gaXMgcHJlc2VudCBpbiBhIHNsb3QgYW5kIGluCiAgICAgKiAgICAgICAgICJMT0FERUQiIHN0YXRlLgogICAgICogQGhpZGUKICAgICAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UKICAgIHB1YmxpYyBib29sZWFuIGlzQWN0aXZlU3ViSWQoaW50IHN1YklkKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHJldHVybiBpU3ViLmlzQWN0aXZlU3ViSWQoc3ViSWQsIG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgbUNvbnRleHQuZ2V0QXR0cmlidXRpb25UYWcoKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYmlsbGluZyByZWxhdGlvbnNoaXAgcGxhbiBiZXR3ZWVuIGEgY2FycmllcgogICAgICogYW5kIGEgc3BlY2lmaWMgc3Vic2NyaWJlci4KICAgICAqIDxwPgogICAgICogVGhpcyBtZXRob2QgaXMgb25seSBhY2Nlc3NpYmxlIHRvIHRoZSBmb2xsb3dpbmcgbmFycm93IHNldCBvZiBhcHBzOgogICAgICogPHVsPgogICAgICogPGxpPlRoZSBjYXJyaWVyIGFwcCBmb3IgdGhpcyBzdWJzY3JpYmVySWQsIGFzIGRldGVybWluZWQgYnkKICAgICAqIHtAbGluayBUZWxlcGhvbnlNYW5hZ2VyI2hhc0NhcnJpZXJQcml2aWxlZ2VzKCl9LgogICAgICogPGxpPlRoZSBjYXJyaWVyIGFwcCBleHBsaWNpdGx5IGRlbGVnYXRlZCBhY2Nlc3MgdGhyb3VnaAogICAgICoge0BsaW5rIENhcnJpZXJDb25maWdNYW5hZ2VyI0tFWV9DT05GSUdfUExBTlNfUEFDS0FHRV9PVkVSUklERV9TVFJJTkd9LgogICAgICogPC91bD4KICAgICAqCiAgICAgKiBAcGFyYW0gc3ViSWQgdGhlIHN1YnNjcmliZXIgdGhpcyByZWxhdGlvbnNoaXAgYXBwbGllcyB0bwogICAgICogQHRocm93cyBTZWN1cml0eUV4Y2VwdGlvbiBpZiB0aGUgY2FsbGVyIGRvZXNuJ3QgbWVldCB0aGUgcmVxdWlyZW1lbnRzCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkIGFib3ZlLgogICAgICovCiAgICBwdWJsaWMgQE5vbk51bGwgTGlzdDxTdWJzY3JpcHRpb25QbGFuPiBnZXRTdWJzY3JpcHRpb25QbGFucyhpbnQgc3ViSWQpIHsKICAgICAgICBTdWJzY3JpcHRpb25QbGFuW10gc3Vic2NyaXB0aW9uUGxhbnMgPSBnZXROZXR3b3JrUG9saWN5TWFuYWdlcigpLmdldFN1YnNjcmlwdGlvblBsYW5zKHN1YklkLAogICAgICAgICAgICAgICAgbUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpKTsKICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uUGxhbnMgPT0gbnVsbAogICAgICAgICAgICAgICAgPyBDb2xsZWN0aW9ucy5lbXB0eUxpc3QoKQogICAgICAgICAgICAgICAgOiBBcnJheXMuYXNMaXN0KHN1YnNjcmlwdGlvblBsYW5zKTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJpbGxpbmcgcmVsYXRpb25zaGlwIHBsYW4gYmV0d2VlbiBhIGNhcnJpZXIKICAgICAqIGFuZCBhIHNwZWNpZmljIHN1YnNjcmliZXIuCiAgICAgKiA8cD4KICAgICAqIFRoaXMgbWV0aG9kIGlzIG9ubHkgYWNjZXNzaWJsZSB0byB0aGUgZm9sbG93aW5nIG5hcnJvdyBzZXQgb2YgYXBwczoKICAgICAqIDx1bD4KICAgICAqIDxsaT5UaGUgY2FycmllciBhcHAgZm9yIHRoaXMgc3Vic2NyaWJlcklkLCBhcyBkZXRlcm1pbmVkIGJ5CiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlcygpfS4KICAgICAqIDxsaT5UaGUgY2FycmllciBhcHAgZXhwbGljaXRseSBkZWxlZ2F0ZWQgYWNjZXNzIHRocm91Z2gKICAgICAqIHtAbGluayBDYXJyaWVyQ29uZmlnTWFuYWdlciNLRVlfQ09ORklHX1BMQU5TX1BBQ0tBR0VfT1ZFUlJJREVfU1RSSU5HfS4KICAgICAqIDwvdWw+CiAgICAgKgogICAgICogQHBhcmFtIHN1YklkIHRoZSBzdWJzY3JpYmVyIHRoaXMgcmVsYXRpb25zaGlwIGFwcGxpZXMgdG8uIEFuIGVtcHR5IGxpc3QKICAgICAqICAgICAgICAgICAgICBtYXkgYmUgc2VudCB0byBjbGVhciBhbnkgZXhpc3RpbmcgcGxhbnMuCiAgICAgKiBAcGFyYW0gcGxhbnMgdGhlIGxpc3Qgb2YgcGxhbnMuIFRoZSBmaXJzdCBwbGFuIGlzIGFsd2F5cyB0aGUgcHJpbWFyeSBhbmQKICAgICAqICAgICAgICAgICAgICBtb3N0IGltcG9ydGFudCBwbGFuLiBBbnkgYWRkaXRpb25hbCBwbGFucyBhcmUgc2Vjb25kYXJ5IGFuZAogICAgICogICAgICAgICAgICAgIG1heSBub3QgYmUgZGlzcGxheWVkIG9yIHVzZWQgYnkgZGVjaXNpb24gbWFraW5nIGxvZ2ljLgogICAgICogQHRocm93cyBTZWN1cml0eUV4Y2VwdGlvbiAgICAgICAgaWYgdGhlIGNhbGxlciBkb2Vzbid0IG1lZXQgdGhlIHJlcXVpcmVtZW50cwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQgYWJvdmUuCiAgICAgKiBAdGhyb3dzIElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBpZiBwbGFucyBkb24ndCBtZWV0IHRoZSByZXF1aXJlbWVudHMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZWQgaW4ge0BsaW5rIFN1YnNjcmlwdGlvblBsYW59LgogICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAjc2V0U3Vic2NyaXB0aW9uUGxhbnMoaW50LCBMaXN0LCBsb25nKX0gaW5zdGVhZC4KICAgICAqLwogICAgQERlcHJlY2F0ZWQKICAgIHB1YmxpYyB2b2lkIHNldFN1YnNjcmlwdGlvblBsYW5zKGludCBzdWJJZCwgQE5vbk51bGwgTGlzdDxTdWJzY3JpcHRpb25QbGFuPiBwbGFucykgewogICAgICAgIHNldFN1YnNjcmlwdGlvblBsYW5zKHN1YklkLCBwbGFucywgMCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBiaWxsaW5nIHJlbGF0aW9uc2hpcCBwbGFuIGJldHdlZW4gYSBjYXJyaWVyCiAgICAgKiBhbmQgYSBzcGVjaWZpYyBzdWJzY3JpYmVyLgogICAgICogPHA+CiAgICAgKiBUaGlzIG1ldGhvZCBpcyBvbmx5IGFjY2Vzc2libGUgdG8gdGhlIGZvbGxvd2luZyBuYXJyb3cgc2V0IG9mIGFwcHM6CiAgICAgKiA8dWw+CiAgICAgKiA8bGk+VGhlIGNhcnJpZXIgYXBwIGZvciB0aGlzIHN1YnNjcmliZXJJZCwgYXMgZGV0ZXJtaW5lZCBieQogICAgICoge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjaGFzQ2FycmllclByaXZpbGVnZXMoKX0uCiAgICAgKiA8bGk+VGhlIGNhcnJpZXIgYXBwIGV4cGxpY2l0bHkgZGVsZWdhdGVkIGFjY2VzcyB0aHJvdWdoCiAgICAgKiB7QGxpbmsgQ2FycmllckNvbmZpZ01hbmFnZXIjS0VZX0NPTkZJR19QTEFOU19QQUNLQUdFX09WRVJSSURFX1NUUklOR30uCiAgICAgKiA8L3VsPgogICAgICoKICAgICAqIEBwYXJhbSBzdWJJZCAgICAgICAgICAgICAgICAgICAgdGhlIHN1YnNjcmliZXIgdGhpcyByZWxhdGlvbnNoaXAgYXBwbGllcyB0by4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQW4gZW1wdHkgbGlzdAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXkgYmUgc2VudCB0byBjbGVhciBhbnkgZXhpc3RpbmcgcGxhbnMuCiAgICAgKiBAcGFyYW0gcGxhbnMgICAgICAgICAgICAgICAgICAgIHRoZSBsaXN0IG9mIHBsYW5zLiBUaGUgZmlyc3QgcGxhbiBpcyBhbHdheXMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHByaW1hcnkgYW5kCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vc3QgaW1wb3J0YW50IHBsYW4uIEFueSBhZGRpdGlvbmFsIHBsYW5zIGFyZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnkgYW5kCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heSBub3QgYmUgZGlzcGxheWVkIG9yIHVzZWQgYnkgZGVjaXNpb24KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFraW5nIGxvZ2ljLgogICAgICogQHBhcmFtIGV4cGlyYXRpb25EdXJhdGlvbk1pbGxpcyB0aGUgZHVyYXRpb24gYWZ0ZXIgd2hpY2ggdGhlIHN1YnNjcmlwdGlvbgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFucwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY2xlYXJlZCwgb3Ige0Bjb2RlIDB9CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGxlYXZlIHRoZSBwbGFucyB1bnRpbAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBsaWNpdGx5IGNsZWFyZWQsIG9yIHRoZSBuZXh0IHJlYm9vdCwKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2hldmVyIGhhcHBlbnMgZmlyc3QuCiAgICAgKiBAdGhyb3dzIFNlY3VyaXR5RXhjZXB0aW9uICAgICAgICBpZiB0aGUgY2FsbGVyIGRvZXNuJ3QgbWVldCB0aGUgcmVxdWlyZW1lbnRzCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lZCBhYm92ZS4KICAgICAqIEB0aHJvd3MgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGlmIHBsYW5zIGRvbid0IG1lZXQgdGhlIHJlcXVpcmVtZW50cwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lZCBpbiB7QGxpbmsgU3Vic2NyaXB0aW9uUGxhbn0uCiAgICAgKi8KICAgIHB1YmxpYyB2b2lkIHNldFN1YnNjcmlwdGlvblBsYW5zKGludCBzdWJJZCwgQE5vbk51bGwgTGlzdDxTdWJzY3JpcHRpb25QbGFuPiBwbGFucywKICAgICAgICAgICAgQER1cmF0aW9uTWlsbGlzTG9uZyBsb25nIGV4cGlyYXRpb25EdXJhdGlvbk1pbGxpcykgewogICAgICAgIGdldE5ldHdvcmtQb2xpY3lNYW5hZ2VyKCkuc2V0U3Vic2NyaXB0aW9uUGxhbnMoc3ViSWQsCiAgICAgICAgICAgICAgICBwbGFucy50b0FycmF5KG5ldyBTdWJzY3JpcHRpb25QbGFuWzBdKSwgZXhwaXJhdGlvbkR1cmF0aW9uTWlsbGlzLAogICAgICAgICAgICAgICAgbUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpKTsKICAgIH0KCiAgICAvKioKICAgICAqIFRlbXBvcmFyaWx5IG92ZXJyaWRlIHRoZSBiaWxsaW5nIHJlbGF0aW9uc2hpcCBwbGFuIGJldHdlZW4gYSBjYXJyaWVyIGFuZAogICAgICogYSBzcGVjaWZpYyBzdWJzY3JpYmVyIHRvIGJlIGNvbnNpZGVyZWQgdW5tZXRlcmVkLiBUaGlzIHdpbGwgYmUgcmVmbGVjdGVkCiAgICAgKiB0byBhcHBzIHZpYSB7QGxpbmsgTmV0d29ya0NhcGFiaWxpdGllcyNORVRfQ0FQQUJJTElUWV9OT1RfTUVURVJFRH0uCiAgICAgKiA8cD4KICAgICAqIFRoaXMgbWV0aG9kIGlzIG9ubHkgYWNjZXNzaWJsZSB0byB0aGUgZm9sbG93aW5nIG5hcnJvdyBzZXQgb2YgYXBwczoKICAgICAqIDx1bD4KICAgICAqIDxsaT5UaGUgY2FycmllciBhcHAgZm9yIHRoaXMgc3Vic2NyaWJlcklkLCBhcyBkZXRlcm1pbmVkIGJ5CiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlcygpfS4KICAgICAqIDxsaT5UaGUgY2FycmllciBhcHAgZXhwbGljaXRseSBkZWxlZ2F0ZWQgYWNjZXNzIHRocm91Z2gKICAgICAqIHtAbGluayBDYXJyaWVyQ29uZmlnTWFuYWdlciNLRVlfQ09ORklHX1BMQU5TX1BBQ0tBR0VfT1ZFUlJJREVfU1RSSU5HfS4KICAgICAqIDwvdWw+CiAgICAgKgogICAgICogQHBhcmFtIHN1YklkICAgICAgICAgICAgICAgICAgICB0aGUgc3Vic2NyaWJlciB0aGlzIG92ZXJyaWRlIGFwcGxpZXMgdG8uCiAgICAgKiBAcGFyYW0gb3ZlcnJpZGVVbm1ldGVyZWQgICAgICAgIHNldCBpZiB0aGUgYmlsbGluZyByZWxhdGlvbnNoaXAgc2hvdWxkIGJlCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyZWQgdW5tZXRlcmVkLgogICAgICogQHBhcmFtIGV4cGlyYXRpb25EdXJhdGlvbk1pbGxpcyB0aGUgZHVyYXRpb24gYWZ0ZXIgd2hpY2ggdGhlIHJlcXVlc3RlZAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVycmlkZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY2xlYXJlZCwgb3Ige0Bjb2RlIDB9CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGxlYXZlIGluIHRoZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWQgc3RhdGUgdW50aWwgZXhwbGljaXRseSBjbGVhcmVkLCBvcgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgbmV4dCByZWJvb3QsCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoZXZlciBoYXBwZW5zIGZpcnN0LgogICAgICogQHRocm93cyBTZWN1cml0eUV4Y2VwdGlvbiBpZiB0aGUgY2FsbGVyIGRvZXNuJ3QgbWVldCB0aGUgcmVxdWlyZW1lbnRzCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkIGFib3ZlLgogICAgICovCiAgICBwdWJsaWMgdm9pZCBzZXRTdWJzY3JpcHRpb25PdmVycmlkZVVubWV0ZXJlZChpbnQgc3ViSWQsIGJvb2xlYW4gb3ZlcnJpZGVVbm1ldGVyZWQsCiAgICAgICAgICAgIEBEdXJhdGlvbk1pbGxpc0xvbmcgbG9uZyBleHBpcmF0aW9uRHVyYXRpb25NaWxsaXMpIHsKICAgICAgICBzZXRTdWJzY3JpcHRpb25PdmVycmlkZVVubWV0ZXJlZChzdWJJZCwgb3ZlcnJpZGVVbm1ldGVyZWQsCiAgICAgICAgICAgICAgICBUZWxlcGhvbnlNYW5hZ2VyLmdldEFsbE5ldHdvcmtUeXBlcygpLCBleHBpcmF0aW9uRHVyYXRpb25NaWxsaXMpOwogICAgfQoKICAgIC8qKgogICAgICogVGVtcG9yYXJpbHkgb3ZlcnJpZGUgdGhlIGJpbGxpbmcgcmVsYXRpb25zaGlwIHBsYW4gYmV0d2VlbiBhIGNhcnJpZXIgYW5kCiAgICAgKiBhIHNwZWNpZmljIHN1YnNjcmliZXIgdG8gYmUgY29uc2lkZXJlZCB1bm1ldGVyZWQuIFRoaXMgd2lsbCBiZSByZWZsZWN0ZWQKICAgICAqIHRvIGFwcHMgdmlhIHtAbGluayBOZXR3b3JrQ2FwYWJpbGl0aWVzI05FVF9DQVBBQklMSVRZX05PVF9NRVRFUkVEfS4KICAgICAqIDxwPgogICAgICogVGhpcyBtZXRob2QgaXMgb25seSBhY2Nlc3NpYmxlIHRvIHRoZSBmb2xsb3dpbmcgbmFycm93IHNldCBvZiBhcHBzOgogICAgICogPHVsPgogICAgICogPGxpPlRoZSBjYXJyaWVyIGFwcCBmb3IgdGhpcyBzdWJzY3JpYmVySWQsIGFzIGRldGVybWluZWQgYnkKICAgICAqIHtAbGluayBUZWxlcGhvbnlNYW5hZ2VyI2hhc0NhcnJpZXJQcml2aWxlZ2VzKCl9LgogICAgICogPGxpPlRoZSBjYXJyaWVyIGFwcCBleHBsaWNpdGx5IGRlbGVnYXRlZCBhY2Nlc3MgdGhyb3VnaAogICAgICoge0BsaW5rIENhcnJpZXJDb25maWdNYW5hZ2VyI0tFWV9DT05GSUdfUExBTlNfUEFDS0FHRV9PVkVSUklERV9TVFJJTkd9LgogICAgICogPC91bD4KICAgICAqCiAgICAgKiBAcGFyYW0gc3ViSWQgICAgICAgICAgICAgICAgICAgIHRoZSBzdWJzY3JpYmVyIHRoaXMgb3ZlcnJpZGUgYXBwbGllcyB0by4KICAgICAqIEBwYXJhbSBvdmVycmlkZVVubWV0ZXJlZCAgICAgICAgc2V0IGlmIHRoZSBiaWxsaW5nIHJlbGF0aW9uc2hpcCBzaG91bGQgYmUKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJlZCB1bm1ldGVyZWQuCiAgICAgKiBAcGFyYW0gbmV0d29ya1R5cGVzICAgICAgICAgICAgIHRoZSBuZXR3b3JrIHR5cGVzIHRoaXMgb3ZlcnJpZGUgYXBwbGllcyB0by4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgbm8KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29yayB0eXBlcyBhcmUgc3BlY2lmaWVkLCBvdmVycmlkZSB2YWx1ZXMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBpZ25vcmVkLgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7QHNlZSBUZWxlcGhvbnlNYW5hZ2VyI2dldEFsbE5ldHdvcmtUeXBlcygpfQogICAgICogQHBhcmFtIGV4cGlyYXRpb25EdXJhdGlvbk1pbGxpcyB0aGUgZHVyYXRpb24gYWZ0ZXIgd2hpY2ggdGhlIHJlcXVlc3RlZAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVycmlkZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY2xlYXJlZCwgb3Ige0Bjb2RlIDB9CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGxlYXZlIGluIHRoZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWQgc3RhdGUgdW50aWwgZXhwbGljaXRseSBjbGVhcmVkLCBvcgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgbmV4dCByZWJvb3QsCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoZXZlciBoYXBwZW5zIGZpcnN0LgogICAgICogQHRocm93cyBTZWN1cml0eUV4Y2VwdGlvbiBpZiB0aGUgY2FsbGVyIGRvZXNuJ3QgbWVldCB0aGUgcmVxdWlyZW1lbnRzCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkIGFib3ZlLgogICAgICovCiAgICBwdWJsaWMgdm9pZCBzZXRTdWJzY3JpcHRpb25PdmVycmlkZVVubWV0ZXJlZChpbnQgc3ViSWQsIGJvb2xlYW4gb3ZlcnJpZGVVbm1ldGVyZWQsCiAgICAgICAgICAgIEBOb25OdWxsIEBBbm5vdGF0aW9uLk5ldHdvcmtUeXBlIGludFtdIG5ldHdvcmtUeXBlcywKICAgICAgICAgICAgQER1cmF0aW9uTWlsbGlzTG9uZyBsb25nIGV4cGlyYXRpb25EdXJhdGlvbk1pbGxpcykgewogICAgICAgIGZpbmFsIGludCBvdmVycmlkZVZhbHVlID0gb3ZlcnJpZGVVbm1ldGVyZWQgPyBTVUJTQ1JJUFRJT05fT1ZFUlJJREVfVU5NRVRFUkVEIDogMDsKICAgICAgICBnZXROZXR3b3JrUG9saWN5TWFuYWdlcigpLnNldFN1YnNjcmlwdGlvbk92ZXJyaWRlKHN1YklkLCBTVUJTQ1JJUFRJT05fT1ZFUlJJREVfVU5NRVRFUkVELAogICAgICAgICAgICAgICAgb3ZlcnJpZGVWYWx1ZSwgbmV0d29ya1R5cGVzLCBleHBpcmF0aW9uRHVyYXRpb25NaWxsaXMsIG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUZW1wb3JhcmlseSBvdmVycmlkZSB0aGUgYmlsbGluZyByZWxhdGlvbnNoaXAgcGxhbiBiZXR3ZWVuIGEgY2FycmllciBhbmQKICAgICAqIGEgc3BlY2lmaWMgc3Vic2NyaWJlciB0byBiZSBjb25zaWRlcmVkIGNvbmdlc3RlZC4gVGhpcyB3aWxsIGNhdXNlIHRoZQogICAgICogZGV2aWNlIHRvIGRlbGF5IGNlcnRhaW4gbmV0d29yayByZXF1ZXN0cyB3aGVuIHBvc3NpYmxlLCBzdWNoIGFzIGRldmVsb3BlcgogICAgICogam9icyB0aGF0IGFyZSB3aWxsaW5nIHRvIHJ1biBpbiBhIGZsZXhpYmxlIHRpbWUgd2luZG93LgogICAgICogPHA+CiAgICAgKiBUaGlzIG1ldGhvZCBpcyBvbmx5IGFjY2Vzc2libGUgdG8gdGhlIGZvbGxvd2luZyBuYXJyb3cgc2V0IG9mIGFwcHM6CiAgICAgKiA8dWw+CiAgICAgKiA8bGk+VGhlIGNhcnJpZXIgYXBwIGZvciB0aGlzIHN1YnNjcmliZXJJZCwgYXMgZGV0ZXJtaW5lZCBieQogICAgICoge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjaGFzQ2FycmllclByaXZpbGVnZXMoKX0uCiAgICAgKiA8bGk+VGhlIGNhcnJpZXIgYXBwIGV4cGxpY2l0bHkgZGVsZWdhdGVkIGFjY2VzcyB0aHJvdWdoCiAgICAgKiB7QGxpbmsgQ2FycmllckNvbmZpZ01hbmFnZXIjS0VZX0NPTkZJR19QTEFOU19QQUNLQUdFX09WRVJSSURFX1NUUklOR30uCiAgICAgKiA8L3VsPgogICAgICoKICAgICAqIEBwYXJhbSBzdWJJZCAgICAgICAgICAgICAgICAgICAgdGhlIHN1YnNjcmliZXIgdGhpcyBvdmVycmlkZSBhcHBsaWVzIHRvLgogICAgICogQHBhcmFtIG92ZXJyaWRlQ29uZ2VzdGVkICAgICAgICBzZXQgaWYgdGhlIHN1YnNjcmlwdGlvbiBzaG91bGQgYmUgY29uc2lkZXJlZAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25nZXN0ZWQuCiAgICAgKiBAcGFyYW0gZXhwaXJhdGlvbkR1cmF0aW9uTWlsbGlzIHRoZSBkdXJhdGlvbiBhZnRlciB3aGljaCB0aGUgcmVxdWVzdGVkCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJyaWRlCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgYXV0b21hdGljYWxseSBjbGVhcmVkLCBvciB7QGNvZGUgMH0KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gbGVhdmUgaW4gdGhlCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZCBzdGF0ZSB1bnRpbCBleHBsaWNpdGx5IGNsZWFyZWQsIG9yCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBuZXh0IHJlYm9vdCwKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2hldmVyIGhhcHBlbnMgZmlyc3QuCiAgICAgKiBAdGhyb3dzIFNlY3VyaXR5RXhjZXB0aW9uIGlmIHRoZSBjYWxsZXIgZG9lc24ndCBtZWV0IHRoZSByZXF1aXJlbWVudHMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQgYWJvdmUuCiAgICAgKi8KICAgIHB1YmxpYyB2b2lkIHNldFN1YnNjcmlwdGlvbk92ZXJyaWRlQ29uZ2VzdGVkKGludCBzdWJJZCwgYm9vbGVhbiBvdmVycmlkZUNvbmdlc3RlZCwKICAgICAgICAgICAgQER1cmF0aW9uTWlsbGlzTG9uZyBsb25nIGV4cGlyYXRpb25EdXJhdGlvbk1pbGxpcykgewogICAgICAgIHNldFN1YnNjcmlwdGlvbk92ZXJyaWRlQ29uZ2VzdGVkKHN1YklkLCBvdmVycmlkZUNvbmdlc3RlZCwKICAgICAgICAgICAgICAgIFRlbGVwaG9ueU1hbmFnZXIuZ2V0QWxsTmV0d29ya1R5cGVzKCksIGV4cGlyYXRpb25EdXJhdGlvbk1pbGxpcyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUZW1wb3JhcmlseSBvdmVycmlkZSB0aGUgYmlsbGluZyByZWxhdGlvbnNoaXAgcGxhbiBiZXR3ZWVuIGEgY2FycmllciBhbmQKICAgICAqIGEgc3BlY2lmaWMgc3Vic2NyaWJlciB0byBiZSBjb25zaWRlcmVkIGNvbmdlc3RlZC4gVGhpcyB3aWxsIGNhdXNlIHRoZQogICAgICogZGV2aWNlIHRvIGRlbGF5IGNlcnRhaW4gbmV0d29yayByZXF1ZXN0cyB3aGVuIHBvc3NpYmxlLCBzdWNoIGFzIGRldmVsb3BlcgogICAgICogam9icyB0aGF0IGFyZSB3aWxsaW5nIHRvIHJ1biBpbiBhIGZsZXhpYmxlIHRpbWUgd2luZG93LgogICAgICogPHA+CiAgICAgKiBUaGlzIG1ldGhvZCBpcyBvbmx5IGFjY2Vzc2libGUgdG8gdGhlIGZvbGxvd2luZyBuYXJyb3cgc2V0IG9mIGFwcHM6CiAgICAgKiA8dWw+CiAgICAgKiA8bGk+VGhlIGNhcnJpZXIgYXBwIGZvciB0aGlzIHN1YnNjcmliZXJJZCwgYXMgZGV0ZXJtaW5lZCBieQogICAgICoge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjaGFzQ2FycmllclByaXZpbGVnZXMoKX0uCiAgICAgKiA8bGk+VGhlIGNhcnJpZXIgYXBwIGV4cGxpY2l0bHkgZGVsZWdhdGVkIGFjY2VzcyB0aHJvdWdoCiAgICAgKiB7QGxpbmsgQ2FycmllckNvbmZpZ01hbmFnZXIjS0VZX0NPTkZJR19QTEFOU19QQUNLQUdFX09WRVJSSURFX1NUUklOR30uCiAgICAgKiA8L3VsPgogICAgICoKICAgICAqIEBwYXJhbSBzdWJJZCAgICAgICAgICAgICAgICAgICAgdGhlIHN1YnNjcmliZXIgdGhpcyBvdmVycmlkZSBhcHBsaWVzIHRvLgogICAgICogQHBhcmFtIG92ZXJyaWRlQ29uZ2VzdGVkICAgICAgICBzZXQgaWYgdGhlIHN1YnNjcmlwdGlvbiBzaG91bGQgYmUgY29uc2lkZXJlZAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25nZXN0ZWQuCiAgICAgKiBAcGFyYW0gbmV0d29ya1R5cGVzICAgICAgICAgICAgIHRoZSBuZXR3b3JrIHR5cGVzIHRoaXMgb3ZlcnJpZGUgYXBwbGllcyB0by4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgbm8KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29yayB0eXBlcyBhcmUgc3BlY2lmaWVkLCBvdmVycmlkZSB2YWx1ZXMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBpZ25vcmVkLgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7QHNlZSBUZWxlcGhvbnlNYW5hZ2VyI2dldEFsbE5ldHdvcmtUeXBlcygpfQogICAgICogQHBhcmFtIGV4cGlyYXRpb25EdXJhdGlvbk1pbGxpcyB0aGUgZHVyYXRpb24gYWZ0ZXIgd2hpY2ggdGhlIHJlcXVlc3RlZAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVycmlkZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY2xlYXJlZCwgb3Ige0Bjb2RlIDB9CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGxlYXZlIGluIHRoZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWQgc3RhdGUgdW50aWwgZXhwbGljaXRseSBjbGVhcmVkLCBvcgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgbmV4dCByZWJvb3QsCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoZXZlciBoYXBwZW5zIGZpcnN0LgogICAgICogQHRocm93cyBTZWN1cml0eUV4Y2VwdGlvbiBpZiB0aGUgY2FsbGVyIGRvZXNuJ3QgbWVldCB0aGUgcmVxdWlyZW1lbnRzCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkIGFib3ZlLgogICAgICovCiAgICBwdWJsaWMgdm9pZCBzZXRTdWJzY3JpcHRpb25PdmVycmlkZUNvbmdlc3RlZChpbnQgc3ViSWQsIGJvb2xlYW4gb3ZlcnJpZGVDb25nZXN0ZWQsCiAgICAgICAgICAgIEBOb25OdWxsIEBBbm5vdGF0aW9uLk5ldHdvcmtUeXBlIGludFtdIG5ldHdvcmtUeXBlcywKICAgICAgICAgICAgQER1cmF0aW9uTWlsbGlzTG9uZyBsb25nIGV4cGlyYXRpb25EdXJhdGlvbk1pbGxpcykgewogICAgICAgIGZpbmFsIGludCBvdmVycmlkZVZhbHVlID0gb3ZlcnJpZGVDb25nZXN0ZWQgPyBTVUJTQ1JJUFRJT05fT1ZFUlJJREVfQ09OR0VTVEVEIDogMDsKICAgICAgICBnZXROZXR3b3JrUG9saWN5TWFuYWdlcigpLnNldFN1YnNjcmlwdGlvbk92ZXJyaWRlKHN1YklkLCBTVUJTQ1JJUFRJT05fT1ZFUlJJREVfQ09OR0VTVEVELAogICAgICAgICAgICAgICAgb3ZlcnJpZGVWYWx1ZSwgbmV0d29ya1R5cGVzLCBleHBpcmF0aW9uRHVyYXRpb25NaWxsaXMsIG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgYXBwIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgaXMgYXV0aG9yaXplZCB0byBtYW5hZ2UgdGhlCiAgICAgKiBnaXZlbiBzdWJzY3JpcHRpb24KICAgICAqIGFjY29yZGluZyB0byBpdHMgbWV0YWRhdGEuCiAgICAgKgogICAgICogT25seSBzdXBwb3J0ZWQgZm9yIGVtYmVkZGVkIHN1YnNjcmlwdGlvbnMgKGlmCiAgICAgKiB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mbyNpc0VtYmVkZGVkfSByZXR1cm5zCiAgICAgKiB0cnVlKS4gVG8gY2hlY2sgZm9yIHBlcm1pc3Npb25zIGZvciBub24tZW1iZWRkZWQgc3Vic2NyaXB0aW9uIGFzIHdlbGwsCiAgICAgKiB7QHNlZSBhbmRyb2lkLnRlbGVwaG9ueS5UZWxlcGhvbnlNYW5hZ2VyI2hhc0NhcnJpZXJQcml2aWxlZ2VzfS4KICAgICAqCiAgICAgKiBAcGFyYW0gaW5mbyBUaGUgc3Vic2NyaXB0aW9uIHRvIGNoZWNrLgogICAgICogQHJldHVybiB3aGV0aGVyIHRoZSBhcHAgaXMgYXV0aG9yaXplZCB0byBtYW5hZ2UgdGhpcyBzdWJzY3JpcHRpb24gcGVyIGl0cwogICAgICogICAgICAgICBtZXRhZGF0YS4KICAgICAqLwogICAgcHVibGljIGJvb2xlYW4gY2FuTWFuYWdlU3Vic2NyaXB0aW9uKFN1YnNjcmlwdGlvbkluZm8gaW5mbykgewogICAgICAgIHJldHVybiBjYW5NYW5hZ2VTdWJzY3JpcHRpb24oaW5mbywgbUNvbnRleHQuZ2V0UGFja2FnZU5hbWUoKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gYXBwIGlzIGF1dGhvcml6ZWQgdG8gbWFuYWdlIHRoZSBnaXZlbiBzdWJzY3JpcHRpb24uCiAgICAgKiBBbiBhcHAgY2FuIG9ubHkKICAgICAqIGJlIGF1dGhvcml6ZWQgaWYgaXQgaXMgaW5jbHVkZWQgaW4gdGhlCiAgICAgKiB7QGxpbmsgYW5kcm9pZC50ZWxlcGhvbnkuVWljY0FjY2Vzc1J1bGV9IG9mIHRoZQogICAgICoge0BsaW5rIGFuZHJvaWQudGVsZXBob255LlN1YnNjcmlwdGlvbkluZm99IHdpdGggdGhlIGFjY2VzcyBzdGF0dXMuCiAgICAgKgogICAgICogT25seSBzdXBwb3J0ZWQgZm9yIGVtYmVkZGVkIHN1YnNjcmlwdGlvbnMgKGlmCiAgICAgKiB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mbyNpc0VtYmVkZGVkfSByZXR1cm5zCiAgICAgKiB0cnVlKS4gVG8gY2hlY2sgZm9yIHBlcm1pc3Npb25zIGZvciBub24tZW1iZWRkZWQgc3Vic2NyaXB0aW9uIGFzIHdlbGwsCiAgICAgKiB7QHNlZSBhbmRyb2lkLnRlbGVwaG9ueS5UZWxlcGhvbnlNYW5hZ2VyI2hhc0NhcnJpZXJQcml2aWxlZ2VzfS4KICAgICAqCiAgICAgKiBAcGFyYW0gaW5mbyAgICAgICAgVGhlIHN1YnNjcmlwdGlvbiB0byBjaGVjay4KICAgICAqIEBwYXJhbSBwYWNrYWdlTmFtZSBQYWNrYWdlIG5hbWUgb2YgdGhlIGFwcCB0byBjaGVjay4KICAgICAqIEByZXR1cm4gd2hldGhlciB0aGUgYXBwIGlzIGF1dGhvcml6ZWQgdG8gbWFuYWdlIHRoaXMgc3Vic2NyaXB0aW9uIHBlciBpdHMKICAgICAqICAgICAgICAgYWNjZXNzIHJ1bGVzLgogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgcHVibGljIGJvb2xlYW4gY2FuTWFuYWdlU3Vic2NyaXB0aW9uKEBOb25OdWxsIFN1YnNjcmlwdGlvbkluZm8gaW5mbywKICAgICAgICAgICAgQE5vbk51bGwgU3RyaW5nIHBhY2thZ2VOYW1lKSB7CiAgICAgICAgaWYgKGluZm8gPT0gbnVsbCB8fCBpbmZvLmdldEFsbEFjY2Vzc1J1bGVzKCkgPT0gbnVsbCB8fCBwYWNrYWdlTmFtZSA9PSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgUGFja2FnZU1hbmFnZXIgcGFja2FnZU1hbmFnZXIgPSBtQ29udGV4dC5nZXRQYWNrYWdlTWFuYWdlcigpOwogICAgICAgIFBhY2thZ2VJbmZvIHBhY2thZ2VJbmZvOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHBhY2thZ2VJbmZvID0gcGFja2FnZU1hbmFnZXIuZ2V0UGFja2FnZUluZm8ocGFja2FnZU5hbWUsCiAgICAgICAgICAgICAgICAgICAgUGFja2FnZU1hbmFnZXIuR0VUX1NJR05JTkdfQ0VSVElGSUNBVEVTKTsKICAgICAgICB9IGNhdGNoIChQYWNrYWdlTWFuYWdlci5OYW1lTm90Rm91bmRFeGNlcHRpb24gZSkgewogICAgICAgICAgICBsb2dkKCJVbmtub3duIHBhY2thZ2U6ICIgKyBwYWNrYWdlTmFtZSk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgZm9yIChVaWNjQWNjZXNzUnVsZSBydWxlIDogaW5mby5nZXRBbGxBY2Nlc3NSdWxlcygpKSB7CiAgICAgICAgICAgIGlmIChydWxlLmdldENhcnJpZXJQcml2aWxlZ2VTdGF0dXMocGFja2FnZUluZm8pID09IFRlbGVwaG9ueU1hbmFnZXIuQ0FSUklFUl9QUklWSUxFR0VfU1RBVFVTX0hBU19BQ0NFU1MpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCB3aGljaCBzdWJzY3JpcHRpb24gaXMgcHJlZmVycmVkIGZvciBjZWxsdWxhciBkYXRhLgogICAgICogSXQncyBhbHNvIHVzdWFsbHkgdGhlIHN1YnNjcmlwdGlvbiB3ZSBzZXQgdXAgaW50ZXJuZXQgY29ubmVjdGlvbiBvbi4KICAgICAqCiAgICAgKiBQcmVmZXJyZWREYXRhIG92ZXJ3cml0ZXMgdXNlciBzZXR0aW5nIG9mIGRlZmF1bHQgZGF0YSBzdWJzY3JpcHRpb24uIEFuZCBpdCdzCiAgICAgKiB1c2VkCiAgICAgKiBieSBBbHRlcm5hdGl2ZU5ldHdvcmtTZXJ2aWNlIG9yIGNhcnJpZXIgYXBwcyB0byBzd2l0Y2ggcHJpbWFyeSBhbmQgQ0JSUwogICAgICogc3Vic2NyaXB0aW9uIGR5bmFtaWNhbGx5IGluIG11bHRpLVNJTSBkZXZpY2VzLgogICAgICoKICAgICAqIEBwYXJhbSBzdWJJZCAgICAgICAgICB3aGljaCBzdWJzY3JpcHRpb24gaXMgcHJlZmVycmVkIHRvIGZvciBjZWxsdWxhciBkYXRhLgogICAgICogICAgICAgICAgICAgICAgICAgICAgIElmIGl0J3MKICAgICAqICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgU3Vic2NyaXB0aW9uTWFuYWdlciNERUZBVUxUX1NVQlNDUklQVElPTl9JRH0sIGl0CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgbWVhbnMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICBpdCdzIHVuc2V0IGFuZAogICAgICogICAgICAgICAgICAgICAgICAgICAgIHtAbGluayBTdWJzY3JpcHRpb25NYW5hZ2VyI2dldERlZmF1bHREYXRhU3Vic2NyaXB0aW9uSWQoKX0KICAgICAqICAgICAgICAgICAgICAgICAgICAgICBpcyB1c2VkIHRvIGRldGVybWluZSB3aGljaCBtb2RlbSBpcyBwcmVmZXJyZWQuCiAgICAgKiBAcGFyYW0gbmVlZFZhbGlkYXRpb24gd2hldGhlciBUZWxlcGhvbnkgd2lsbCB3YWl0IHVudGlsIHRoZSBuZXR3b3JrIGlzCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkIGJ5CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGl2aXR5IHNlcnZpY2UgYmVmb3JlIHN3aXRjaGluZyBkYXRhIHRvIGl0LiBNb3JlCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlscyBzZWUKICAgICAqICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgTmV0d29ya0NhcGFiaWxpdGllcyNORVRfQ0FQQUJJTElUWV9WQUxJREFURUR9LgogICAgICogQHBhcmFtIGV4ZWN1dG9yICAgICAgIFRoZSBleGVjdXRvciBvZiB3aGVyZSB0aGUgY2FsbGJhY2sgd2lsbCBleGVjdXRlLgogICAgICogQHBhcmFtIGNhbGxiYWNrICAgICAgIENhbGxiYWNrIHdpbGwgYmUgdHJpZ2dlcmVkIG9uY2UgaXQgc3VjY2VlZHMgb3IgZmFpbGVkLgogICAgICogICAgICAgICAgICAgICAgICAgICAgIFBhc3MgbnVsbCBpZiBkb24ndCBjYXJlIGFib3V0IHRoZSByZXN1bHQuCiAgICAgKgogICAgICogQGhpZGUKICAgICAqCiAgICAgKi8KICAgIEBTeXN0ZW1BcGkKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLk1PRElGWV9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyB2b2lkIHNldFByZWZlcnJlZERhdGFTdWJzY3JpcHRpb25JZChpbnQgc3ViSWQsIGJvb2xlYW4gbmVlZFZhbGlkYXRpb24sCiAgICAgICAgICAgIEBOdWxsYWJsZSBAQ2FsbGJhY2tFeGVjdXRvciBFeGVjdXRvciBleGVjdXRvciwKICAgICAgICAgICAgQE51bGxhYmxlIEBUZWxlcGhvbnlNYW5hZ2VyLlNldE9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25SZXN1bHQgQ29uc3VtZXI8SW50ZWdlcj4gY2FsbGJhY2spIHsKICAgICAgICBpZiAoVkRCRykKICAgICAgICAgICAgbG9nZCgiW3NldFByZWZlcnJlZERhdGFTdWJzY3JpcHRpb25JZF0rIHN1YklkOiIgKyBzdWJJZCk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViID09IG51bGwpCiAgICAgICAgICAgICAgICByZXR1cm47CgogICAgICAgICAgICBJU2V0T3Bwb3J0dW5pc3RpY0RhdGFDYWxsYmFjayBjYWxsYmFja1N0dWIgPSBuZXcgSVNldE9wcG9ydHVuaXN0aWNEYXRhQ2FsbGJhY2suU3R1YigpIHsKICAgICAgICAgICAgICAgIEBPdmVycmlkZQogICAgICAgICAgICAgICAgcHVibGljIHZvaWQgb25Db21wbGV0ZShpbnQgcmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGV4ZWN1dG9yID09IG51bGwgfHwgY2FsbGJhY2sgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGZpbmFsIGxvbmcgaWRlbnRpdHkgPSBCaW5kZXIuY2xlYXJDYWxsaW5nSWRlbnRpdHkoKTsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRvci5leGVjdXRlKCgpIC0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFjY2VwdChyZXN1bHQpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICBCaW5kZXIucmVzdG9yZUNhbGxpbmdJZGVudGl0eShpZGVudGl0eSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICBpU3ViLnNldFByZWZlcnJlZERhdGFTdWJzY3JpcHRpb25JZChzdWJJZCwgbmVlZFZhbGlkYXRpb24sIGNhbGxiYWNrU3R1Yik7CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEdldCB3aGljaCBzdWJzY3JpcHRpb24gaXMgcHJlZmVycmVkIGZvciBjZWxsdWxhciBkYXRhLgogICAgICogSXQncyBhbHNvIHVzdWFsbHkgdGhlIHN1YnNjcmlwdGlvbiB3ZSBzZXQgdXAgaW50ZXJuZXQgY29ubmVjdGlvbiBvbi4KICAgICAqCiAgICAgKiBQcmVmZXJyZWREYXRhIG92ZXJ3cml0ZXMgdXNlciBzZXR0aW5nIG9mIGRlZmF1bHQgZGF0YSBzdWJzY3JpcHRpb24uIEFuZCBpdCdzCiAgICAgKiB1c2VkCiAgICAgKiBieSBBbHRlcm5hdGl2ZU5ldHdvcmtTZXJ2aWNlIG9yIGNhcnJpZXIgYXBwcyB0byBzd2l0Y2ggcHJpbWFyeSBhbmQgQ0JSUwogICAgICogc3Vic2NyaXB0aW9uIGR5bmFtaWNhbGx5IGluIG11bHRpLVNJTSBkZXZpY2VzLgogICAgICoKICAgICAqIEByZXR1cm4gcHJlZmVycmVkIHN1YnNjcmlwdGlvbiBpZCBmb3IgY2VsbHVsYXIgZGF0YS4KICAgICAqICAgICAgICAge0BsaW5rIERFRkFVTFRfU1VCU0NSSVBUSU9OX0lEfSBpZgogICAgICogICAgICAgICB0aGVyZSdzIG5vIHByZWZlcmVkIHN1YnNjcmlwdGlvbi4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICoKICAgICAqLwogICAgQFJlcXVpcmVzUGVybWlzc2lvbihNYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUFJJVklMRUdFRF9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBpbnQgZ2V0UHJlZmVycmVkRGF0YVN1YnNjcmlwdGlvbklkKCkgewogICAgICAgIGludCBwcmVmZXJyZWRTdWJJZCA9IFN1YnNjcmlwdGlvbk1hbmFnZXIuREVGQVVMVF9TVUJTQ1JJUFRJT05fSUQ7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHByZWZlcnJlZFN1YklkID0gaVN1Yi5nZXRQcmVmZXJyZWREYXRhU3Vic2NyaXB0aW9uSWQoKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIHJldHVybiBwcmVmZXJyZWRTdWJJZDsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiBvcHBvcnR1bmlzdGljIHN1YnNjcmlwdGlvbnMgdGhhdCBjYW4gYmUgdmlzaWJsZSB0byB0aGUgY2FsbGVyLgogICAgICogT3Bwb3J0dW5pc3RpYyBzdWJzY3JpcHRpb25zIGFyZSBmb3Igb3Bwb3J0dW5pc3RpYyBuZXR3b3Jrcywgd2hpY2ggYXJlCiAgICAgKiBjZWxsdWxhcgogICAgICogbmV0d29ya3Mgd2l0aCBsaW1pdGVkIGNhcGFiaWxpdGllcyBhbmQgY292ZXJhZ2UsIGZvciBleGFtcGxlLCBDQlJTLgogICAgICoKICAgICAqIDxwPgogICAgICogUmVxdWlyZXMgUGVybWlzc2lvbjoKICAgICAqIHtAbGluayBhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24jUkVBRF9QSE9ORV9TVEFURSBSRUFEX1BIT05FX1NUQVRFfQogICAgICogb3IgdGhhdCB0aGUgY2FsbGluZyBhcHAgaGFzIGNhcnJpZXIgcHJpdmlsZWdlcyAoc2VlCiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlc30pLgogICAgICoKICAgICAqIEByZXR1cm4gdGhlIGxpc3Qgb2Ygb3Bwb3J0dW5pc3RpYyBzdWJzY3JpcHRpb24gaW5mby4gSWYgbm9uZSBleGlzdHMsIGFuIGVtcHR5CiAgICAgKiAgICAgICAgIGxpc3QuCiAgICAgKi8KICAgIEBTdXBwcmVzc0F1dG9Eb2MgLy8gQmxvY2tlZCBieSBiLzcyOTY3MjM2IC0gbm8gc3VwcG9ydCBmb3IgY2FycmllciBwcml2aWxlZ2VzCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbi5SRUFEX1BIT05FX1NUQVRFKQogICAgcHVibGljIEBOb25OdWxsIExpc3Q8U3Vic2NyaXB0aW9uSW5mbz4gZ2V0T3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnMoKSB7CiAgICAgICAgU3RyaW5nIGNvbnRleHRQa2cgPSBtQ29udGV4dCAhPSBudWxsID8gbUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpIDogIjx1bmtub3duPiI7CiAgICAgICAgU3RyaW5nIGNvbnRleHRBdHRyaWJ1dGlvblRhZyA9IG1Db250ZXh0ICE9IG51bGwgPyBtQ29udGV4dC5nZXRBdHRyaWJ1dGlvblRhZygpIDogbnVsbDsKICAgICAgICBMaXN0PFN1YnNjcmlwdGlvbkluZm8+IHN1YkluZm9MaXN0ID0gbnVsbDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHN1YkluZm9MaXN0ID0gaVN1Yi5nZXRPcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9ucyhjb250ZXh0UGtnLAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0QXR0cmlidXRpb25UYWcpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KCiAgICAgICAgaWYgKHN1YkluZm9MaXN0ID09IG51bGwpIHsKICAgICAgICAgICAgc3ViSW5mb0xpc3QgPSBuZXcgQXJyYXlMaXN0PD4oKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzdWJJbmZvTGlzdDsKICAgIH0KCiAgICAvKioKICAgICAqIFN3aXRjaCB0byBhIGNlcnRhaW4gc3Vic2NyaXB0aW9uCiAgICAgKgogICAgICogQHBhcmFtIHN1YklkICAgICAgICAgIHN1YiBpZAogICAgICogQHBhcmFtIGNhbGxiYWNrSW50ZW50IHBlbmRpbmcgaW50ZW50IHRoYXQgd2lsbCBiZSBzZW50IGFmdGVyIG9wZXJhdGlvbiBpcwogICAgICogICAgICAgICAgICAgICAgICAgICAgIGRvbmUuCiAgICAgKgogICAgICogICAgICAgICAgICAgICAgICAgICAgIHRvLWJlLWRlcHJlY2F0ZWQgdGhpcyBBUEkgaXMgYSBkdXBsaWNhdGUgb2YKICAgICAqICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgRXVpY2NNYW5hZ2VyI3N3aXRjaFRvU3Vic2NyaXB0aW9uKGludCwKICAgICAqICAgICAgICAgICAgICAgICAgICAgICBQZW5kaW5nSW50ZW50KX0gYW5kIGRvZXMgbm90IHN1cHBvcnQgTXVsdGlwbGUgRW5hYmxlZAogICAgICogICAgICAgICAgICAgICAgICAgICAgIFByb2ZpbGUoTUVQKS4gQXBwcyBzaG91bGQgdXNlCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAge0BsaW5rIEV1aWNjTWFuYWdlciNzd2l0Y2hUb1N1YnNjcmlwdGlvbihpbnQsIFBlbmRpbmdJbnRlbnQpfQogICAgICogICAgICAgICAgICAgICAgICAgICAgIG9yCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAge0BsaW5rIEV1aWNjTWFuYWdlciNzd2l0Y2hUb1N1YnNjcmlwdGlvbihpbnQsIGludCwgUGVuZGluZ0ludGVudCl9CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgaW5zdGVhZC4KICAgICAqLwogICAgQFJlcXVpcmVzUGVybWlzc2lvbihhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uV1JJVEVfRU1CRURERURfU1VCU0NSSVBUSU9OUykKICAgIHB1YmxpYyB2b2lkIHN3aXRjaFRvU3Vic2NyaXB0aW9uKGludCBzdWJJZCwgQE5vbk51bGwgUGVuZGluZ0ludGVudCBjYWxsYmFja0ludGVudCkgewogICAgICAgIFByZWNvbmRpdGlvbnMuY2hlY2tOb3ROdWxsKGNhbGxiYWNrSW50ZW50LCAiY2FsbGJhY2tJbnRlbnQgY2Fubm90IGJlIG51bGwiKTsKICAgICAgICBFdWljY01hbmFnZXIgZXVpY2NNYW5hZ2VyID0gbmV3IEV1aWNjTWFuYWdlcihtQ29udGV4dCk7CiAgICAgICAgZXVpY2NNYW5hZ2VyLnN3aXRjaFRvU3Vic2NyaXB0aW9uKHN1YklkLCBjYWxsYmFja0ludGVudCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgd2hldGhlciBhIHN1YnNjcmlwdGlvbiBpcyBvcHBvcnR1bmlzdGljLCB0aGF0IGlzLCB3aGV0aGVyIHRoZSBuZXR3b3JrIGl0CiAgICAgKiBjb25uZWN0cwogICAgICogdG8gaGFzIGxpbWl0ZWQgY292ZXJhZ2UuIEZvciBleGFtcGxlLCBDQlJTLiBTZXR0aW5nIGEgc3Vic2NyaXB0aW9uCiAgICAgKiBvcHBvcnR1bmlzdGljIGhhcwogICAgICogZm9sbG93aW5nIGltcGFjdHM6CiAgICAgKiAxKSBFdmVuIGlmIGl0J3MgYWN0aXZlLCBpdCB3aWxsIGJlIGRvcm1hbnQgbW9zdCBvZiB0aGUgdGltZS4gVGhlIG1vZGVtIHdpbGwKICAgICAqIG5vdCB0cnkKICAgICAqIHRvIHNjYW4gb3IgY2FtcCB1bnRpbCBpdCBrbm93cyBhbiBhdmFpbGFibGUgbmV0d29yayBpcyBuZWFyYnkgdG8gc2F2ZSBwb3dlci4KICAgICAqIDIpIFRlbGVwaG9ueSByZWxpZXMgb24gc3lzdGVtIGFwcCBvciBjYXJyaWVyIGlucHV0IHRvIG5vdGlmeSBuZWFyYnkgYXZhaWxhYmxlCiAgICAgKiBuZXR3b3Jrcy4KICAgICAqIFNlZQogICAgICoge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjdXBkYXRlQXZhaWxhYmxlTmV0d29ya3MoTGlzdCwgRXhlY3V0b3IsIENvbnN1bWVyKX0KICAgICAqIGZvciBtb3JlIGluZm9ybWF0aW9uLgogICAgICogMykgSW4gbXVsdGktU0lNIGRldmljZXMsIHdoZW4gdGhlIG5ldHdvcmsgaXMgbmVhcmJ5IGFuZCBjYW1wZWQsIHN5c3RlbSBtYXkKICAgICAqIGF1dG9tYXRpY2FsbHkKICAgICAqIHN3aXRjaCBpbnRlcm5ldCBkYXRhIGJldHdlZW4gaXQgYW5kIGRlZmF1bHQgZGF0YSBzdWJzY3JpcHRpb24sIGJhc2VkIG9uCiAgICAgKiBjYXJyaWVyCiAgICAgKiByZWNvbW1lbmRhdGlvbiBhbmQgaXRzIHNpZ25hbCBzdHJlbmd0aCBhbmQgbWV0ZXJlZC1uZXNzLCBldGMuCiAgICAgKgogICAgICoKICAgICAqIENhbGxlciB3aWxsIGVpdGhlciBoYXZlCiAgICAgKiB7QGxpbmsgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uI01PRElGWV9QSE9ORV9TVEFURX0gb3IgY2FycmllcgogICAgICogcHJpdmlsZWdlIHBlcm1pc3Npb24gb2YgdGhlIHN1YnNjcmlwdGlvbi4KICAgICAqCiAgICAgKiBAcGFyYW0gb3Bwb3J0dW5pc3RpYyB3aGV0aGVyIGl04oCZcyBvcHBvcnR1bmlzdGljIHN1YnNjcmlwdGlvbi4KICAgICAqIEBwYXJhbSBzdWJJZCAgICAgICAgIHRoZSB1bmlxdWUgU3Vic2NyaXB0aW9uSW5mbyBpbmRleCBpbiBkYXRhYmFzZQogICAgICogQHJldHVybiB7QGNvZGUgdHJ1ZX0gaWYgdGhlIG9wZXJhdGlvbiBpcyBzdWNjZWVkLCB7QGNvZGUgZmFsc2V9IG90aGVyd2lzZS4KICAgICAqLwogICAgQFN1cHByZXNzQXV0b0RvYyAvLyBCbG9ja2VkIGJ5IGIvNzI5NjcyMzYgLSBubyBzdXBwb3J0IGZvciBjYXJyaWVyIHByaXZpbGVnZXMKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLk1PRElGWV9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBib29sZWFuIHNldE9wcG9ydHVuaXN0aWMoYm9vbGVhbiBvcHBvcnR1bmlzdGljLCBpbnQgc3ViSWQpIHsKICAgICAgICBpZiAoVkRCRykKICAgICAgICAgICAgbG9nZCgiW3NldE9wcG9ydHVuaXN0aWNdKyBvcHBvcnR1bmlzdGljOiIgKyBvcHBvcnR1bmlzdGljICsgIiBzdWJJZDoiICsgc3ViSWQpOwogICAgICAgIHJldHVybiBzZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eUhlbHBlcihzdWJJZCwgInNldE9wcG9ydHVuaXN0aWMiLAogICAgICAgICAgICAgICAgKGlTdWIpIC0+IGlTdWIuc2V0T3Bwb3J0dW5pc3RpYygKICAgICAgICAgICAgICAgICAgICAgICAgb3Bwb3J0dW5pc3RpYywgc3ViSWQsIG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSkpID09IDE7CiAgICB9CgogICAgLyoqCiAgICAgKiBJbmZvcm0gU3Vic2NyaXB0aW9uTWFuYWdlciB0aGF0IHN1YnNjcmlwdGlvbnMgaW4gdGhlIGxpc3QgYXJlIGJ1bmRsZWQKICAgICAqIGFzIGEgZ3JvdXAuIEl0IGNhbiBiZSBtdWx0aXBsZSBwcmltYXJ5IChub24tb3Bwb3J0dW5pc3RpYykgc3Vic2NyaXB0aW9ucywKICAgICAqIG9yIG9uZSBvciBtb3JlIHByaW1hcnkgcGx1cyBvbmUgb3IgbW9yZSBvcHBvcnR1bmlzdGljIHN1YnNjcmlwdGlvbnMuCiAgICAgKgogICAgICogVGhpcyBBUEkgd2lsbCBhbHdheXMgY3JlYXRlIGEgbmV3IGltbXV0YWJsZSBncm91cCBhbmQgYXNzaWduIGdyb3VwIFVVSUQgdG8KICAgICAqIGFsbCB0aGUKICAgICAqIHN1YnNjcmlwdGlvbnMsIHJlZ2FyZGxlc3Mgd2hldGhlciB0aGV5IGFyZSBpbiBhIGdyb3VwIGFscmVhZHkgb3Igbm90LgogICAgICoKICAgICAqIEdyb3VwZWQgc3Vic2NyaXB0aW9ucyB3aWxsIGhhdmUgYmVsb3cgYmVoYXZpb3JzOgogICAgICogMSkgVGhleSB3aWxsIHNoYXJlIHRoZSBzYW1lIHVzZXIgc2V0dGluZ3MuCiAgICAgKiAyKSBUaGUgb3Bwb3J0dW5pc3RpYyBzdWJzY3JpcHRpb25zIGluIHRoZSBncm91cCBpcyBjb25zaWRlcmVkIGludmlzaWJsZSBhbmQKICAgICAqIHdpbGwgbm90CiAgICAgKiByZXR1cm4gZnJvbSB7QGxpbmsgI2dldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9MaXN0KCl9LCB1bmxlc3MgY2FsbGVyIGhhcwogICAgICogY2FycmllcgogICAgICogcHJpdmlsZWdlIHBlcm1pc3Npb24gb2YgdGhlIHN1YnNjcmlwdGlvbnMuCiAgICAgKiAzKSBUaGUgb3Bwb3J0dW5pc3RpYyBzdWJzY3JpcHRpb25zIGluIHRoZSBncm91cCBjYW4ndCBiZSBhY3RpdmUgYnkgaXRzZWxmLiBJZgogICAgICogYWxsIG90aGVyCiAgICAgKiBub24tb3Bwb3J0dW5pc3RpYyBvbmVzIGFyZSBkZWFjdGl2YXRlZCAodW5wbHVnZ2VkIG9yIGRpc2FibGVkIGluIFNldHRpbmdzKSwKICAgICAqIHRoZSBvcHBvcnR1bmlzdGljIG9uZXMgd2lsbCBiZSBkZWFjdGl2YXRlZCBhdXRvbWF0aWNhbGx5LgogICAgICoKICAgICAqIENhbGxlciB3aWxsIGVpdGhlciBoYXZlCiAgICAgKiB7QGxpbmsgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uI01PRElGWV9QSE9ORV9TVEFURX0KICAgICAqIHBlcm1pc3Npb24gb3IgaGFkIGNhcnJpZXIgcHJpdmlsZWdlIHBlcm1pc3Npb24gb24gdGhlIHN1YnNjcmlwdGlvbnM6CiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlcygpfSBvcgogICAgICoge0BsaW5rICNjYW5NYW5hZ2VTdWJzY3JpcHRpb24oU3Vic2NyaXB0aW9uSW5mbyl9CiAgICAgKgogICAgICogQHRocm93cyBTZWN1cml0eUV4Y2VwdGlvbiAgICAgICAgaWYgdGhlIGNhbGxlciBkb2Vzbid0IG1lZXQgdGhlIHJlcXVpcmVtZW50cwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQgYWJvdmUuCiAgICAgKiBAdGhyb3dzIElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBpZiBhbnkgb2YgdGhlIHN1YnNjcmlwdGlvbnMgaW4gdGhlIGxpc3QKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvZXNuJ3QgZXhpc3QuCiAgICAgKiBAdGhyb3dzIElsbGVnYWxTdGF0ZUV4Y2VwdGlvbiAgICBpZiBUZWxlcGhvbnkgc2VydmljZSBpcyBpbiBiYWQgc3RhdGUuCiAgICAgKgogICAgICogQHBhcmFtIHN1YklkTGlzdCBsaXN0IG9mIHN1YklkIHRoYXQgd2lsbCBiZSBpbiB0aGUgc2FtZSBncm91cAogICAgICogQHJldHVybiBncm91cFVVSUQgYSBVVUlEIGFzc2lnbmVkIHRvIHRoZSBzdWJzY3JpcHRpb24gZ3JvdXAuCiAgICAgKgogICAgICovCiAgICBAU3VwcHJlc3NBdXRvRG9jIC8vIEJsb2NrZWQgYnkgYi83Mjk2NzIzNiAtIG5vIHN1cHBvcnQgZm9yIGNhcnJpZXIgcHJpdmlsZWdlcwogICAgQFJlcXVpcmVzUGVybWlzc2lvbihhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uTU9ESUZZX1BIT05FX1NUQVRFKQogICAgcHVibGljIEBOb25OdWxsIFBhcmNlbFV1aWQgY3JlYXRlU3Vic2NyaXB0aW9uR3JvdXAoQE5vbk51bGwgTGlzdDxJbnRlZ2VyPiBzdWJJZExpc3QpIHsKICAgICAgICBQcmVjb25kaXRpb25zLmNoZWNrTm90TnVsbChzdWJJZExpc3QsICJjYW4ndCBjcmVhdGUgZ3JvdXAgZm9yIG51bGwgc3ViSWQgbGlzdCIpOwogICAgICAgIFN0cmluZyBwa2dGb3JEZWJ1ZyA9IG1Db250ZXh0ICE9IG51bGwgPyBtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCkgOiAiPHVua25vd24+IjsKICAgICAgICBpZiAoVkRCRykgewogICAgICAgICAgICBsb2dkKCJbY3JlYXRlU3Vic2NyaXB0aW9uR3JvdXBdIik7CiAgICAgICAgfQoKICAgICAgICBQYXJjZWxVdWlkIGdyb3VwVXVpZCA9IG51bGw7CiAgICAgICAgaW50W10gc3ViSWRBcnJheSA9IHN1YklkTGlzdC5zdHJlYW0oKS5tYXBUb0ludChpIC0+IGkpLnRvQXJyYXkoKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgZ3JvdXBVdWlkID0gaVN1Yi5jcmVhdGVTdWJzY3JpcHRpb25Hcm91cChzdWJJZEFycmF5LCBwa2dGb3JEZWJ1Zyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoIWlzU3lzdGVtUHJvY2VzcygpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbigidGVsZXBob255IHNlcnZpY2UgaXMgbnVsbC4iKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICBsb2dlKCJjcmVhdGVTdWJzY3JpcHRpb25Hcm91cCBSZW1vdGVFeGNlcHRpb24gIiArIGV4KTsKICAgICAgICAgICAgaWYgKCFpc1N5c3RlbVByb2Nlc3MoKSkgewogICAgICAgICAgICAgICAgZXgucmV0aHJvd0FzUnVudGltZUV4Y2VwdGlvbigpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZ3JvdXBVdWlkOwogICAgfQoKICAgIC8qKgogICAgICogQWRkIGEgbGlzdCBvZiBzdWJzY3JpcHRpb25zIGludG8gYSBncm91cC4KICAgICAqIFNlZSB7QGxpbmsgI2NyZWF0ZVN1YnNjcmlwdGlvbkdyb3VwKExpc3QpfSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICoKICAgICAqIENhbGxlciB3aWxsIGVpdGhlciBoYXZlCiAgICAgKiB7QGxpbmsgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uI01PRElGWV9QSE9ORV9TVEFURX0KICAgICAqIHBlcm1pc3Npb24gb3IgaGFkIGNhcnJpZXIgcHJpdmlsZWdlIHBlcm1pc3Npb24gb24gdGhlIHN1YnNjcmlwdGlvbnM6CiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlcygpfSBvcgogICAgICoge0BsaW5rICNjYW5NYW5hZ2VTdWJzY3JpcHRpb24oU3Vic2NyaXB0aW9uSW5mbyl9CiAgICAgKgogICAgICogQHRocm93cyBTZWN1cml0eUV4Y2VwdGlvbiAgICAgICAgaWYgdGhlIGNhbGxlciBkb2Vzbid0IG1lZXQgdGhlIHJlcXVpcmVtZW50cwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQgYWJvdmUuCiAgICAgKiBAdGhyb3dzIElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBpZiB0aGUgc29tZSBzdWJzY3JpcHRpb25zIGluIHRoZSBsaXN0CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2Vzbid0IGV4aXN0LgogICAgICogQHRocm93cyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24gICAgaWYgVGVsZXBob255IHNlcnZpY2UgaXMgaW4gYmFkIHN0YXRlLgogICAgICoKICAgICAqIEBwYXJhbSBzdWJJZExpc3QgbGlzdCBvZiBzdWJJZCB0aGF0IG5lZWQgYWRkaW5nIGludG8gdGhlIGdyb3VwCiAgICAgKiBAcGFyYW0gZ3JvdXBVdWlkIHRoZSBncm91cFV1aWQgdGhlIHN1YnNjcmlwdGlvbnMgYXJlIGJlaW5nIGFkZGVkIHRvLgogICAgICoKICAgICAqLwogICAgQFN1cHByZXNzQXV0b0RvYyAvLyBCbG9ja2VkIGJ5IGIvNzI5NjcyMzYgLSBubyBzdXBwb3J0IGZvciBjYXJyaWVyIHByaXZpbGVnZXMKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oTWFuaWZlc3QucGVybWlzc2lvbi5NT0RJRllfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgdm9pZCBhZGRTdWJzY3JpcHRpb25zSW50b0dyb3VwKEBOb25OdWxsIExpc3Q8SW50ZWdlcj4gc3ViSWRMaXN0LAogICAgICAgICAgICBATm9uTnVsbCBQYXJjZWxVdWlkIGdyb3VwVXVpZCkgewogICAgICAgIFByZWNvbmRpdGlvbnMuY2hlY2tOb3ROdWxsKHN1YklkTGlzdCwgInN1YklkTGlzdCBjYW4ndCBiZSBudWxsLiIpOwogICAgICAgIFByZWNvbmRpdGlvbnMuY2hlY2tOb3ROdWxsKGdyb3VwVXVpZCwgImdyb3VwVXVpZCBjYW4ndCBiZSBudWxsLiIpOwogICAgICAgIFN0cmluZyBwa2dGb3JEZWJ1ZyA9IG1Db250ZXh0ICE9IG51bGwgPyBtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCkgOiAiPHVua25vd24+IjsKICAgICAgICBpZiAoVkRCRykgewogICAgICAgICAgICBsb2dkKCJbYWRkU3Vic2NyaXB0aW9uc0ludG9Hcm91cF0iKTsKICAgICAgICB9CgogICAgICAgIGludFtdIHN1YklkQXJyYXkgPSBzdWJJZExpc3Quc3RyZWFtKCkubWFwVG9JbnQoaSAtPiBpKS50b0FycmF5KCk7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBpU3ViLmFkZFN1YnNjcmlwdGlvbnNJbnRvR3JvdXAoc3ViSWRBcnJheSwgZ3JvdXBVdWlkLCBwa2dGb3JEZWJ1Zyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoIWlzU3lzdGVtUHJvY2VzcygpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbigidGVsZXBob255IHNlcnZpY2UgaXMgbnVsbC4iKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICBsb2dlKCJhZGRTdWJzY3JpcHRpb25zSW50b0dyb3VwIFJlbW90ZUV4Y2VwdGlvbiAiICsgZXgpOwogICAgICAgICAgICBpZiAoIWlzU3lzdGVtUHJvY2VzcygpKSB7CiAgICAgICAgICAgICAgICBleC5yZXRocm93QXNSdW50aW1lRXhjZXB0aW9uKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgcHJpdmF0ZSBib29sZWFuIGlzU3lzdGVtUHJvY2VzcygpIHsKICAgICAgICByZXR1cm4gUHJvY2Vzcy5teVVpZCgpID09IFByb2Nlc3MuU1lTVEVNX1VJRDsKICAgIH0KCiAgICAvKioKICAgICAqIFJlbW92ZSBhIGxpc3Qgb2Ygc3Vic2NyaXB0aW9ucyBmcm9tIHRoZWlyIHN1YnNjcmlwdGlvbiBncm91cC4KICAgICAqIFNlZSB7QGxpbmsgI2NyZWF0ZVN1YnNjcmlwdGlvbkdyb3VwKExpc3QpfSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICoKICAgICAqIENhbGxlciB3aWxsIGVpdGhlciBoYXZlCiAgICAgKiB7QGxpbmsgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uI01PRElGWV9QSE9ORV9TVEFURX0KICAgICAqIHBlcm1pc3Npb24gb3IgaGFkIGNhcnJpZXIgcHJpdmlsZWdlIHBlcm1pc3Npb24gb24gdGhlIHN1YnNjcmlwdGlvbnM6CiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlcygpfSBvcgogICAgICoge0BsaW5rICNjYW5NYW5hZ2VTdWJzY3JpcHRpb24oU3Vic2NyaXB0aW9uSW5mbyl9CiAgICAgKgogICAgICogQHRocm93cyBTZWN1cml0eUV4Y2VwdGlvbiAgICAgICAgaWYgdGhlIGNhbGxlciBkb2Vzbid0IG1lZXQgdGhlIHJlcXVpcmVtZW50cwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQgYWJvdmUuCiAgICAgKiBAdGhyb3dzIElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBpZiB0aGUgc29tZSBzdWJzY3JpcHRpb25zIGluIHRoZSBsaXN0CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2Vzbid0IGJlbG9uZwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNwZWNpZmllZCBncm91cC4KICAgICAqIEB0aHJvd3MgSWxsZWdhbFN0YXRlRXhjZXB0aW9uICAgIGlmIFRlbGVwaG9ueSBzZXJ2aWNlIGlzIGluIGJhZCBzdGF0ZS4KICAgICAqCiAgICAgKiBAcGFyYW0gc3ViSWRMaXN0IGxpc3Qgb2Ygc3ViSWQgdGhhdCBuZWVkIHJlbW92aW5nIGZyb20gdGhlaXIgZ3JvdXBzLgogICAgICoKICAgICAqLwogICAgQFN1cHByZXNzQXV0b0RvYyAvLyBCbG9ja2VkIGJ5IGIvNzI5NjcyMzYgLSBubyBzdXBwb3J0IGZvciBjYXJyaWVyIHByaXZpbGVnZXMKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oTWFuaWZlc3QucGVybWlzc2lvbi5NT0RJRllfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgdm9pZCByZW1vdmVTdWJzY3JpcHRpb25zRnJvbUdyb3VwKEBOb25OdWxsIExpc3Q8SW50ZWdlcj4gc3ViSWRMaXN0LAogICAgICAgICAgICBATm9uTnVsbCBQYXJjZWxVdWlkIGdyb3VwVXVpZCkgewogICAgICAgIFByZWNvbmRpdGlvbnMuY2hlY2tOb3ROdWxsKHN1YklkTGlzdCwgInN1YklkTGlzdCBjYW4ndCBiZSBudWxsLiIpOwogICAgICAgIFByZWNvbmRpdGlvbnMuY2hlY2tOb3ROdWxsKGdyb3VwVXVpZCwgImdyb3VwVXVpZCBjYW4ndCBiZSBudWxsLiIpOwogICAgICAgIFN0cmluZyBwa2dGb3JEZWJ1ZyA9IG1Db250ZXh0ICE9IG51bGwgPyBtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCkgOiAiPHVua25vd24+IjsKICAgICAgICBpZiAoVkRCRykgewogICAgICAgICAgICBsb2dkKCJbcmVtb3ZlU3Vic2NyaXB0aW9uc0Zyb21Hcm91cF0iKTsKICAgICAgICB9CgogICAgICAgIGludFtdIHN1YklkQXJyYXkgPSBzdWJJZExpc3Quc3RyZWFtKCkubWFwVG9JbnQoaSAtPiBpKS50b0FycmF5KCk7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBpU3ViLnJlbW92ZVN1YnNjcmlwdGlvbnNGcm9tR3JvdXAoc3ViSWRBcnJheSwgZ3JvdXBVdWlkLCBwa2dGb3JEZWJ1Zyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoIWlzU3lzdGVtUHJvY2VzcygpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbigidGVsZXBob255IHNlcnZpY2UgaXMgbnVsbC4iKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICBsb2dlKCJyZW1vdmVTdWJzY3JpcHRpb25zRnJvbUdyb3VwIFJlbW90ZUV4Y2VwdGlvbiAiICsgZXgpOwogICAgICAgICAgICBpZiAoIWlzU3lzdGVtUHJvY2VzcygpKSB7CiAgICAgICAgICAgICAgICBleC5yZXRocm93QXNSdW50aW1lRXhjZXB0aW9uKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgc3Vic2NyaXB0aW9uSW5mbyBsaXN0IG9mIHN1YnNjcmlwdGlvbnMgdGhhdCBhcmUgaW4gdGhlIHNhbWUgZ3JvdXAgb2YKICAgICAqIGdpdmVuIHN1YklkLgogICAgICogU2VlIHtAbGluayAjY3JlYXRlU3Vic2NyaXB0aW9uR3JvdXAoTGlzdCl9IGZvciBtb3JlIGRldGFpbHMuCiAgICAgKgogICAgICogQ2FsbGVyIG11c3QgaGF2ZSB7QGxpbmsgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uI1JFQURfUEhPTkVfU1RBVEV9CiAgICAgKiBvciBjYXJyaWVyIHByaXZpbGVnZSBwZXJtaXNzaW9uIG9uIHRoZSBzdWJzY3JpcHRpb24uCiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlcygpfQogICAgICoKICAgICAqIDxwPgogICAgICogU3RhcnRpbmcgd2l0aCBBUEkgbGV2ZWwgMzMsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGFuIGVtcHR5IExpc3QgaWYgdGhlCiAgICAgKiBjYWxsZXIgZG9lcwogICAgICogbm90IGhhdmUgYWNjZXNzIHRvIGRldmljZSBpZGVudGlmaWVycy4KICAgICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBpbnZva2VkIGlmIG9uZSBvZiB0aGUgZm9sbG93aW5nIHJlcXVpcmVtZW50cyBpcyBtZXQ6CiAgICAgKiA8dWw+CiAgICAgKiA8bGk+SWYgdGhlIGFwcCBoYXMgY2FycmllciBwcml2aWxlZ2UgcGVybWlzc2lvbi4KICAgICAqIHtAbGluayBUZWxlcGhvbnlNYW5hZ2VyI2hhc0NhcnJpZXJQcml2aWxlZ2VzKCl9CiAgICAgKiA8bGk+SWYgdGhlIGFwcCBoYXMge0BsaW5rIGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbiNSRUFEX1BIT05FX1NUQVRFfQogICAgICogcGVybWlzc2lvbiBhbmQKICAgICAqIGFjY2VzcyB0byBkZXZpY2UgaWRlbnRpZmllcnMuCiAgICAgKiA8L3VsPgogICAgICoKICAgICAqIEB0aHJvd3MgSWxsZWdhbFN0YXRlRXhjZXB0aW9uIGlmIFRlbGVwaG9ueSBzZXJ2aWNlIGlzIGluIGJhZCBzdGF0ZS4KICAgICAqIEB0aHJvd3MgU2VjdXJpdHlFeGNlcHRpb24gICAgIGlmIHRoZSBjYWxsZXIgZG9lc24ndCBtZWV0IHRoZSByZXF1aXJlbWVudHMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkIGFib3ZlLgogICAgICoKICAgICAqIEBwYXJhbSBncm91cFV1aWQgb2Ygd2hpY2ggbGlzdCBvZiBzdWJJbmZvIHdpbGwgYmUgcmV0dXJuZWQuCiAgICAgKiBAcmV0dXJuIGxpc3Qgb2Ygc3Vic2NyaXB0aW9uSW5mbyB0aGF0IGJlbG9uZyB0byB0aGUgc2FtZSBncm91cCwgaW5jbHVkaW5nIHRoZQogICAgICogICAgICAgICBnaXZlbgogICAgICogICAgICAgICBzdWJzY3JpcHRpb24gaXRzZWxmLiBJdCB3aWxsIHJldHVybiBhbiBlbXB0eSBsaXN0IGlmIG5vIHN1YnNjcmlwdGlvbgogICAgICogICAgICAgICBiZWxvbmdzIHRvIHRoZSBncm91cC4KICAgICAqCiAgICAgKi8KICAgIEBTdXBwcmVzc0F1dG9Eb2MgLy8gQmxvY2tlZCBieSBiLzcyOTY3MjM2IC0gbm8gc3VwcG9ydCBmb3IgY2FycmllciBwcml2aWxlZ2VzCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKE1hbmlmZXN0LnBlcm1pc3Npb24uUkVBRF9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBATm9uTnVsbCBMaXN0PFN1YnNjcmlwdGlvbkluZm8+IGdldFN1YnNjcmlwdGlvbnNJbkdyb3VwKEBOb25OdWxsIFBhcmNlbFV1aWQgZ3JvdXBVdWlkKSB7CiAgICAgICAgUHJlY29uZGl0aW9ucy5jaGVja05vdE51bGwoZ3JvdXBVdWlkLCAiZ3JvdXBVdWlkIGNhbid0IGJlIG51bGwiKTsKICAgICAgICBTdHJpbmcgY29udGV4dFBrZyA9IG1Db250ZXh0ICE9IG51bGwgPyBtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCkgOiAiPHVua25vd24+IjsKICAgICAgICBTdHJpbmcgY29udGV4dEF0dHJpYnV0aW9uVGFnID0gbUNvbnRleHQgIT0gbnVsbCA/IG1Db250ZXh0LmdldEF0dHJpYnV0aW9uVGFnKCkgOiBudWxsOwogICAgICAgIGlmIChWREJHKSB7CiAgICAgICAgICAgIGxvZ2QoIltnZXRTdWJzY3JpcHRpb25zSW5Hcm91cF0rIGdyb3VwVXVpZDoiICsgZ3JvdXBVdWlkKTsKICAgICAgICB9CgogICAgICAgIExpc3Q8U3Vic2NyaXB0aW9uSW5mbz4gcmVzdWx0ID0gbnVsbDsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmVzdWx0ID0gaVN1Yi5nZXRTdWJzY3JpcHRpb25zSW5Hcm91cChncm91cFV1aWQsIGNvbnRleHRQa2csCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRBdHRyaWJ1dGlvblRhZyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoIWlzU3lzdGVtUHJvY2VzcygpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbigidGVsZXBob255IHNlcnZpY2UgaXMgbnVsbC4iKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICBsb2dlKCJyZW1vdmVTdWJzY3JpcHRpb25zRnJvbUdyb3VwIFJlbW90ZUV4Y2VwdGlvbiAiICsgZXgpOwogICAgICAgICAgICBpZiAoIWlzU3lzdGVtUHJvY2VzcygpKSB7CiAgICAgICAgICAgICAgICBleC5yZXRocm93QXNSdW50aW1lRXhjZXB0aW9uKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBXaGV0aGVyIGEgc3Vic2NyaXB0aW9uIGlzIHZpc2libGUgdG8gQVBJIGNhbGxlci4gSWYgaXQncyBhIGJ1bmRsZWQKICAgICAqIG9wcG9ydHVuaXN0aWMKICAgICAqIHN1YnNjcmlwdGlvbiwgaXQgc2hvdWxkIGJlIGhpZGRlbiBhbnl3aGVyZSBpbiBTZXR0aW5ncywgZGlhbGVyLCBzdGF0dXMgYmFyCiAgICAgKiBldGMuCiAgICAgKiBFeGNlcHRpb24gaXMgaWYgY2FsbGVyIG93bnMgY2FycmllciBwcml2aWxlZ2UsIGluIHdoaWNoIGNhc2UgdGhleSB3aWxsCiAgICAgKiB3YW50IHRvIHNlZSB0aGVpciBvd24gaGlkZGVuIHN1YnNjcmlwdGlvbnMuCiAgICAgKgogICAgICogQHBhcmFtIGluZm8gdGhlIHN1YnNjcmlwdGlvbkluZm8gdG8gY2hlY2sgYWdhaW5zdC4KICAgICAqIEByZXR1cm4gdHJ1ZSBpZiB0aGlzIHN1YnNjcmlwdGlvbiBzaG91bGQgYmUgdmlzaWJsZSB0byB0aGUgQVBJIGNhbGxlci4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgYm9vbGVhbiBpc1N1YnNjcmlwdGlvblZpc2libGUoU3Vic2NyaXB0aW9uSW5mbyBpbmZvKSB7CiAgICAgICAgaWYgKGluZm8gPT0gbnVsbCkKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIC8vIElmIHN1YnNjcmlwdGlvbiBpcyBOT1QgZ3JvdXBlZCBvcHBvcnR1bmlzdGljIHN1YnNjcmlwdGlvbiwgaXQncyB2aXNpYmxlLgogICAgICAgIGlmIChpbmZvLmdldEdyb3VwVXVpZCgpID09IG51bGwgfHwgIWluZm8uaXNPcHBvcnR1bmlzdGljKCkpCiAgICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICAvLyBJZiB0aGUgY2FsbGVyIGlzIHRoZSBjYXJyaWVyIGFwcCBhbmQgb3ducyB0aGUgc3Vic2NyaXB0aW9uLCBpdCBzaG91bGQgYmUKICAgICAgICAvLyB2aXNpYmxlCiAgICAgICAgLy8gdG8gdGhlIGNhbGxlci4KICAgICAgICBib29sZWFuIGhhc0NhcnJpZXJQcml2aWxlZ2VQZXJtaXNzaW9uID0gVGVsZXBob255TWFuYWdlci5mcm9tKG1Db250ZXh0KQogICAgICAgICAgICAgICAgLmhhc0NhcnJpZXJQcml2aWxlZ2VzKGluZm8uZ2V0U3Vic2NyaXB0aW9uSWQoKSkKICAgICAgICAgICAgICAgIHx8IGNhbk1hbmFnZVN1YnNjcmlwdGlvbihpbmZvKTsKICAgICAgICByZXR1cm4gaGFzQ2FycmllclByaXZpbGVnZVBlcm1pc3Npb247CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gYSBsaXN0IG9mIHN1YnNjcmlwdGlvbnMgdGhhdCBhcmUgYXZhaWxhYmxlIGFuZCB2aXNpYmxlIHRvIHRoZSB1c2VyLgogICAgICogVXNlZCBieSBTZXR0aW5ncyBhcHAgdG8gc2hvdyBhIGxpc3Qgb2Ygc3Vic2NyaXB0aW9ucyBmb3IgdXNlciB0byBwaWNrLgogICAgICoKICAgICAqIDxwPgogICAgICogUGVybWlzc2lvbnMgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUFJJVklMRUdFRF9QSE9ORV9TVEFURSBpcwogICAgICogcmVxdWlyZWQKICAgICAqIGZvciBnZXRTZWxlY3RhYmxlU3Vic2NyaXB0aW9uSW5mb0xpc3QgdG8gYmUgaW52b2tlZC4KICAgICAqIAogICAgICogQHJldHVybiBsaXN0IG9mIHVzZXIgc2VsZWN0YWJsZSBzdWJzY3JpcHRpb25zLgogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBATnVsbGFibGUgTGlzdDxTdWJzY3JpcHRpb25JbmZvPiBnZXRTZWxlY3RhYmxlU3Vic2NyaXB0aW9uSW5mb0xpc3QoKSB7CiAgICAgICAgTGlzdDxTdWJzY3JpcHRpb25JbmZvPiBhdmFpbGFibGVMaXN0ID0gZ2V0QXZhaWxhYmxlU3Vic2NyaXB0aW9uSW5mb0xpc3QoKTsKICAgICAgICBpZiAoYXZhaWxhYmxlTGlzdCA9PSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIE11bHRpcGxlIHN1YnNjcmlwdGlvbnMgaW4gYSBncm91cCBzaG91bGQgb25seSBoYXZlIG9uZSByZXByZXNlbnRhdGl2ZS4KICAgICAgICAgICAgLy8gSXQgc2hvdWxkIGJlIHRoZSBjdXJyZW50IGFjdGl2ZSBwcmltYXJ5IHN1YnNjcmlwdGlvbiBpZiBhbnksIG9yIGFueQogICAgICAgICAgICAvLyBwcmltYXJ5IHN1YnNjcmlwdGlvbi4KICAgICAgICAgICAgTGlzdDxTdWJzY3JpcHRpb25JbmZvPiBzZWxlY3RhYmxlTGlzdCA9IG5ldyBBcnJheUxpc3Q8PigpOwogICAgICAgICAgICBNYXA8UGFyY2VsVXVpZCwgU3Vic2NyaXB0aW9uSW5mbz4gZ3JvdXBNYXAgPSBuZXcgSGFzaE1hcDw+KCk7CgogICAgICAgICAgICBmb3IgKFN1YnNjcmlwdGlvbkluZm8gaW5mbyA6IGF2YWlsYWJsZUxpc3QpIHsKICAgICAgICAgICAgICAgIC8vIE9wcG9ydHVuaXN0aWMgc3Vic2NyaXB0aW9ucyBhcmUgY29uc2lkZXJlZCBpbnZpc2libGUKICAgICAgICAgICAgICAgIC8vIHRvIHVzZXJzIHNvIHRoZXkgc2hvdWxkIG5ldmVyIGJlIHJldHVybmVkLgogICAgICAgICAgICAgICAgaWYgKCFpc1N1YnNjcmlwdGlvblZpc2libGUoaW5mbykpCiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CgogICAgICAgICAgICAgICAgUGFyY2VsVXVpZCBncm91cFV1aWQgPSBpbmZvLmdldEdyb3VwVXVpZCgpOwogICAgICAgICAgICAgICAgaWYgKGdyb3VwVXVpZCA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gRG9lc24ndCBiZWxvbmcgdG8gYW55IGdyb3VwLiBBZGQgaW4gdGhlIGxpc3QuCiAgICAgICAgICAgICAgICAgICAgc2VsZWN0YWJsZUxpc3QuYWRkKGluZm8pOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZ3JvdXBNYXAuY29udGFpbnNLZXkoZ3JvdXBVdWlkKQogICAgICAgICAgICAgICAgICAgICAgICB8fCAoZ3JvdXBNYXAuZ2V0KGdyb3VwVXVpZCkuZ2V0U2ltU2xvdEluZGV4KCkgPT0gSU5WQUxJRF9TSU1fU0xPVF9JTkRFWAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGluZm8uZ2V0U2ltU2xvdEluZGV4KCkgIT0gSU5WQUxJRF9TSU1fU0xPVF9JTkRFWCkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBJZiBpdCBiZWxvbmdzIHRvIGEgZ3JvdXAgdGhhdCBoYXMgbmV2ZXIgYmVlbiByZWNvcmRlZCBvciBpdCdzIHRoZSBjdXJyZW50CiAgICAgICAgICAgICAgICAgICAgLy8gYWN0aXZlIHN1YnNjcmlwdGlvbiwgYWRkIGl0IGluIHRoZSBsaXN0LgogICAgICAgICAgICAgICAgICAgIHNlbGVjdGFibGVMaXN0LnJlbW92ZShncm91cE1hcC5nZXQoZ3JvdXBVdWlkKSk7CiAgICAgICAgICAgICAgICAgICAgc2VsZWN0YWJsZUxpc3QuYWRkKGluZm8pOwogICAgICAgICAgICAgICAgICAgIGdyb3VwTWFwLnB1dChncm91cFV1aWQsIGluZm8pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc2VsZWN0YWJsZUxpc3Q7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogRW5hYmxlcyBvciBkaXNhYmxlcyBhIHN1YnNjcmlwdGlvbi4gVGhpcyBpcyBjdXJyZW50bHkgdXNlZCBpbiB0aGUgc2V0dGluZ3MKICAgICAqIHBhZ2UuIEl0IHdpbGwKICAgICAqIGZhaWwgYW5kIHJldHVybiBmYWxzZSBpZiBvcGVyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBvciBmYWlsZWQuCiAgICAgKgogICAgICogVG8gZGlzYWJsZSBhbiBhY3RpdmUgc3Vic2NyaXB0aW9uIG9uIGEgcGh5c2ljYWwgKG5vbi1FdWljYykgU0lNLAogICAgICoge0BsaW5rICNjYW5EaXNhYmxlUGh5c2ljYWxTdWJzY3JpcHRpb259IG5lZWRzIHRvIGJlIHRydWUuCiAgICAgKgogICAgICogPHA+CiAgICAgKiBQZXJtaXNzaW9ucyBhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uTU9ESUZZX1BIT05FX1NUQVRFIGlzIHJlcXVpcmVkCiAgICAgKgogICAgICogQHBhcmFtIGVuYWJsZSAgICAgICAgIHdoZXRoZXIgdXNlciBpcyB0dXJuaW5nIGl0IG9uIG9yIG9mZi4KICAgICAqIEBwYXJhbSBzdWJzY3JpcHRpb25JZCBTdWJzY3JpcHRpb24gdG8gYmUgZW5hYmxlZCBvciBkaXNhYmxlZC4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICBJdCBjb3VsZCBiZSBhIGVTSU0gb3IgcFNJTSBzdWJzY3JpcHRpb24uCiAgICAgKgogICAgICogQHJldHVybiB3aGV0aGVyIHRoZSBvcGVyYXRpb24gaXMgc3VjY2Vzc2Z1bC4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAU3lzdGVtQXBpCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbi5NT0RJRllfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgYm9vbGVhbiBzZXRTdWJzY3JpcHRpb25FbmFibGVkKGludCBzdWJzY3JpcHRpb25JZCwgYm9vbGVhbiBlbmFibGUpIHsKICAgICAgICBpZiAoVkRCRykgewogICAgICAgICAgICBsb2dkKCJzZXRTdWJzY3JpcHRpb25BY3RpdmF0ZWQgc3ViSWQ9ICIgKyBzdWJzY3JpcHRpb25JZCArICIgZW5hYmxlICIgKyBlbmFibGUpOwogICAgICAgIH0KICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGlTdWIuc2V0U3Vic2NyaXB0aW9uRW5hYmxlZChlbmFibGUsIHN1YnNjcmlwdGlvbklkKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCB1aWNjIGFwcGxpY2F0aW9ucyBiZWluZyBlbmFibGVkIG9yIGRpc2FibGVkLgogICAgICogVGhlIHZhbHVlIHdpbGwgYmUgcmVtZW1iZXJlZCBvbiB0aGUgc3Vic2NyaXB0aW9uIGFuZCB3aWxsIGJlIGFwcGxpZWQgd2hlbmV2ZXIKICAgICAqIGl0J3MgcHJlc2VudC4KICAgICAqIElmIHRoZSBzdWJzY3JpcHRpb24gaW4gY3VycmVudGx5IHByZXNlbnQsIGl0IHdpbGwgYWxzbyBhcHBseSB0aGUgc2V0dGluZyB0bwogICAgICogbW9kZW0KICAgICAqIGltbWVkaWF0ZWx5ICh0aGUgc2V0dGluZyBpbiB0aGUgbW9kZW0gd2lsbCBub3QgY2hhbmdlIHVudGlsIHRoZSBtb2RlbQogICAgICogcmVjZWl2ZXMgYW5kIHJlc3BvbmRzCiAgICAgKiB0byB0aGUgcmVxdWVzdCwgYnV0IHR5cGljYWxseSB0aGlzIHNob3VsZCBvbmx5IHRha2UgYSBmZXcgc2Vjb25kcy4gVGhlIHVzZXIKICAgICAqIHZpc2libGUgc2V0dGluZwogICAgICogYXZhaWxhYmxlIGZyb20gU3Vic2NyaXB0aW9uSW5mby5hcmVVaWNjQXBwbGljYXRpb25zRW5hYmxlZCgpIHdpbGwgYmUgdXBkYXRlZAogICAgICogaW1tZWRpYXRlbHkuKQogICAgICoKICAgICAqIFBlcm1pc3Npb25zIGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbi5NT0RJRllfUEhPTkVfU1RBVEUgaXMgcmVxdWlyZWQKICAgICAqCiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uSWQgd2hpY2ggc3Vic2NyaXB0aW9uIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcGFyYW0gZW5hYmxlZCAgICAgICAgd2hldGhlciB1aWNjIGFwcGxpY2F0aW9ucyBhcmUgZW5hYmxlZCBvciBkaXNhYmxlZC4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBTeXN0ZW1BcGkKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oTWFuaWZlc3QucGVybWlzc2lvbi5NT0RJRllfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgdm9pZCBzZXRVaWNjQXBwbGljYXRpb25zRW5hYmxlZChpbnQgc3Vic2NyaXB0aW9uSWQsIGJvb2xlYW4gZW5hYmxlZCkgewogICAgICAgIGlmIChWREJHKSB7CiAgICAgICAgICAgIGxvZ2QoInNldFVpY2NBcHBsaWNhdGlvbnNFbmFibGVkIHN1YklkPSAiICsgc3Vic2NyaXB0aW9uSWQgKyAiIGVuYWJsZSAiICsgZW5hYmxlZCk7CiAgICAgICAgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IElTdWIuU3R1Yi5hc0ludGVyZmFjZSgKICAgICAgICAgICAgICAgICAgICBUZWxlcGhvbnlGcmFtZXdvcmtJbml0aWFsaXplcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldFRlbGVwaG9ueVNlcnZpY2VNYW5hZ2VyKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlUmVnaXN0ZXJlcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KCkpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBpU3ViLnNldFVpY2NBcHBsaWNhdGlvbnNFbmFibGVkKGVuYWJsZWQsIHN1YnNjcmlwdGlvbklkKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBXaGV0aGVyIGl0J3Mgc3VwcG9ydGVkIHRvIGRpc2FibGUgLyByZS1lbmFibGUgYSBzdWJzY3JpcHRpb24gb24gYSBwaHlzaWNhbAogICAgICogKG5vbi1ldWljYykgU0lNLgogICAgICoKICAgICAqIFBoeXNpY2FsIFNJTSByZWZlcnMgbm9uLWV1aWNjLCBvciBha2Egbm9uLXByb2dyYW1tYWJsZSBTSU0uCiAgICAgKgogICAgICogSXQgcHJvdmlkZXMgd2hldGhlciBhIHBoeXNpY2FsIFNJTSBjYXJkIGNhbiBiZSBkaXNhYmxlZCB3aXRob3V0IHRha2luZyBpdAogICAgICogb3V0LCB3aGljaCBpcyBkb25lCiAgICAgKiB2aWEge0BsaW5rICNzZXRTdWJzY3JpcHRpb25FbmFibGVkKGludCwgYm9vbGVhbil9IEFQSS4KICAgICAqCiAgICAgKiBSZXF1aXJlcyBQZXJtaXNzaW9uOiBSRUFEX1BSSVZJTEVHRURfUEhPTkVfU1RBVEUuCiAgICAgKgogICAgICogQHJldHVybiB3aGV0aGVyIGNhbiBkaXNhYmxlIHN1YnNjcmlwdGlvbnMgb24gcGh5c2ljYWwgU0lNcy4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAU3lzdGVtQXBpCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbi5SRUFEX1BSSVZJTEVHRURfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgYm9vbGVhbiBjYW5EaXNhYmxlUGh5c2ljYWxTdWJzY3JpcHRpb24oKSB7CiAgICAgICAgaWYgKFZEQkcpIHsKICAgICAgICAgICAgbG9nZCgiY2FuRGlzYWJsZVBoeXNpY2FsU3Vic2NyaXB0aW9uIik7CiAgICAgICAgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IElTdWIuU3R1Yi5hc0ludGVyZmFjZSgKICAgICAgICAgICAgICAgICAgICBUZWxlcGhvbnlGcmFtZXdvcmtJbml0aWFsaXplcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldFRlbGVwaG9ueVNlcnZpY2VNYW5hZ2VyKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlUmVnaXN0ZXJlcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KCkpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaVN1Yi5jYW5EaXNhYmxlUGh5c2ljYWxTdWJzY3JpcHRpb24oKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIERPIE5PVCBVU0UuCiAgICAgKiBUaGlzIEFQSSBpcyBkZXNpZ25lZCBmb3IgZmVhdHVyZXMgdGhhdCBhcmUgbm90IGZpbmlzaGVkIGF0IHRoaXMgcG9pbnQuIERvIG5vdAogICAgICogY2FsbCB0aGlzIEFQSS4KICAgICAqIAogICAgICogQGhpZGUKICAgICAqICAgICAgIFRPRE8gYi8xMzU1NDc1MTI6IGZ1cnRoZXIgY2xlYW4gdXAKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgQFJlcXVpcmVzUGVybWlzc2lvbihNYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUFJJVklMRUdFRF9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBib29sZWFuIGlzU3Vic2NyaXB0aW9uRW5hYmxlZChpbnQgc3Vic2NyaXB0aW9uSWQpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGlTdWIuaXNTdWJzY3JpcHRpb25FbmFibGVkKHN1YnNjcmlwdGlvbklkKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCB0aGUgZGV2aWNlIHRvIGRldmljZSBzdGF0dXMgc2hhcmluZyB1c2VyIHByZWZlcmVuY2UgZm9yIGEgc3Vic2NyaXB0aW9uCiAgICAgKiBJRC4gVGhlIHNldHRpbmcKICAgICAqIGFwcCB1c2VzIHRoaXMgbWV0aG9kIHRvIGluZGljYXRlIHdpdGggd2hvbSB0aGV5IHdpc2ggdG8gc2hhcmUgZGV2aWNlIHRvCiAgICAgKiBkZXZpY2Ugc3RhdHVzCiAgICAgKiBpbmZvcm1hdGlvbi4KICAgICAqIAogICAgICogQHBhcmFtIHNoYXJpbmcgICAgICAgIHRoZSBzdGF0dXMgc2hhcmluZyBwcmVmZXJlbmNlCiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uSWQgdGhlIHVuaXF1ZSBTdWJzY3JpcHRpb24gSUQgaW4gZGF0YWJhc2UKICAgICAqLwogICAgQFJlcXVpcmVzUGVybWlzc2lvbihNYW5pZmVzdC5wZXJtaXNzaW9uLk1PRElGWV9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyB2b2lkIHNldERldmljZVRvRGV2aWNlU3RhdHVzU2hhcmluZ1ByZWZlcmVuY2UoaW50IHN1YnNjcmlwdGlvbklkLAogICAgICAgICAgICBARGV2aWNlVG9EZXZpY2VTdGF0dXNTaGFyaW5nUHJlZmVyZW5jZSBpbnQgc2hhcmluZykgewogICAgICAgIGlmIChWREJHKSB7CiAgICAgICAgICAgIGxvZ2QoIltzZXREZXZpY2VUb0RldmljZVN0YXR1c1NoYXJpbmddICsgc2hhcmluZzogIiArIHNoYXJpbmcgKyAiIHN1YklkOiAiCiAgICAgICAgICAgICAgICAgICAgKyBzdWJzY3JpcHRpb25JZCk7CiAgICAgICAgfQogICAgICAgIHNldFN1YnNjcmlwdGlvblByb3BlcnR5SGVscGVyKHN1YnNjcmlwdGlvbklkLCAic2V0RGV2aWNlVG9EZXZpY2VTaGFyaW5nU3RhdHVzIiwKICAgICAgICAgICAgICAgIChpU3ViKSAtPiBpU3ViLnNldERldmljZVRvRGV2aWNlU3RhdHVzU2hhcmluZyhzaGFyaW5nLCBzdWJzY3JpcHRpb25JZCkpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgdXNlci1jaG9zZW4gZGV2aWNlIHRvIGRldmljZSBzdGF0dXMgc2hhcmluZyBwcmVmZXJlbmNlCiAgICAgKiAKICAgICAqIEBwYXJhbSBzdWJzY3JpcHRpb25JZCBTdWJzY3JpcHRpb24gaWQgb2Ygc3Vic2NyaXB0aW9uCiAgICAgKiBAcmV0dXJuIFRoZSBkZXZpY2UgdG8gZGV2aWNlIHN0YXR1cyBzaGFyaW5nIHByZWZlcmVuY2UKICAgICAqLwogICAgcHVibGljIEBEZXZpY2VUb0RldmljZVN0YXR1c1NoYXJpbmdQcmVmZXJlbmNlIGludCBnZXREZXZpY2VUb0RldmljZVN0YXR1c1NoYXJpbmdQcmVmZXJlbmNlKAogICAgICAgICAgICBpbnQgc3Vic2NyaXB0aW9uSWQpIHsKICAgICAgICBpZiAoVkRCRykgewogICAgICAgICAgICBsb2dkKCJbZ2V0RGV2aWNlVG9EZXZpY2VTdGF0dXNTaGFyaW5nXSArIHN1YklkOiAiICsgc3Vic2NyaXB0aW9uSWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZ2V0SW50ZWdlclN1YnNjcmlwdGlvblByb3BlcnR5KHN1YnNjcmlwdGlvbklkLCBEMkRfU1RBVFVTX1NIQVJJTkcsCiAgICAgICAgICAgICAgICBEMkRfU0hBUklOR19ESVNBQkxFRCwgbUNvbnRleHQpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHRoZSBsaXN0IG9mIGNvbnRhY3RzIHRoYXQgYWxsb3cgZGV2aWNlIHRvIGRldmljZSBzdGF0dXMgc2hhcmluZyBmb3IgYQogICAgICogc3Vic2NyaXB0aW9uIElELgogICAgICogVGhlIHNldHRpbmcgYXBwIHVzZXMgdGhpcyBtZXRob2QgdG8gaW5kaWNhdGUgd2l0aCB3aG9tIHRoZXkgd2lzaCB0byBzaGFyZQogICAgICogZGV2aWNlIHRvIGRldmljZQogICAgICogc3RhdHVzIGluZm9ybWF0aW9uLgogICAgICogCiAgICAgKiBAcGFyYW0gY29udGFjdHMgICAgICAgVGhlIGxpc3Qgb2YgY29udGFjdHMgdGhhdCBhbGxvdyBkZXZpY2UgdG8gZGV2aWNlIHN0YXR1cwogICAgICogICAgICAgICAgICAgICAgICAgICAgIHNoYXJpbmcKICAgICAqIEBwYXJhbSBzdWJzY3JpcHRpb25JZCBUaGUgdW5pcXVlIFN1YnNjcmlwdGlvbiBJRCBpbiBkYXRhYmFzZQogICAgICovCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKE1hbmlmZXN0LnBlcm1pc3Npb24uTU9ESUZZX1BIT05FX1NUQVRFKQogICAgcHVibGljIHZvaWQgc2V0RGV2aWNlVG9EZXZpY2VTdGF0dXNTaGFyaW5nQ29udGFjdHMoaW50IHN1YnNjcmlwdGlvbklkLAogICAgICAgICAgICBATm9uTnVsbCBMaXN0PFVyaT4gY29udGFjdHMpIHsKICAgICAgICBTdHJpbmcgY29udGFjdFN0cmluZyA9IHNlcmlhbGl6ZVVyaUxpc3RzKGNvbnRhY3RzKTsKICAgICAgICBpZiAoVkRCRykgewogICAgICAgICAgICBsb2dkKCJbc2V0RGV2aWNlVG9EZXZpY2VTdGF0dXNTaGFyaW5nQ29udGFjdHNdICsgY29udGFjdHM6ICIgKyBjb250YWN0U3RyaW5nCiAgICAgICAgICAgICAgICAgICAgKyAiIHN1YklkOiAiICsgc3Vic2NyaXB0aW9uSWQpOwogICAgICAgIH0KICAgICAgICBzZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eUhlbHBlcihzdWJzY3JpcHRpb25JZCwgInNldERldmljZVRvRGV2aWNlU2hhcmluZ1N0YXR1cyIsCiAgICAgICAgICAgICAgICAoaVN1YikgLT4gaVN1Yi5zZXREZXZpY2VUb0RldmljZVN0YXR1c1NoYXJpbmdDb250YWN0cyhzZXJpYWxpemVVcmlMaXN0cyhjb250YWN0cyksCiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbklkKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIGNvbnRhY3RzIHRoYXQgYWxsb3cgZGV2aWNlIHRvIGRldmljZSBzdGF0dXMgc2hhcmluZy4KICAgICAqIAogICAgICogQHBhcmFtIHN1YnNjcmlwdGlvbklkIFN1YnNjcmlwdGlvbiBpZCBvZiBzdWJzY3JpcHRpb24KICAgICAqIEByZXR1cm4gVGhlIGxpc3Qgb2YgY29udGFjdHMgdGhhdCBhbGxvdyBkZXZpY2UgdG8gZGV2aWNlIHN0YXR1cyBzaGFyaW5nCiAgICAgKi8KICAgIHB1YmxpYyBATm9uTnVsbCBMaXN0PFVyaT4gZ2V0RGV2aWNlVG9EZXZpY2VTdGF0dXNTaGFyaW5nQ29udGFjdHMoCiAgICAgICAgICAgIGludCBzdWJzY3JpcHRpb25JZCkgewogICAgICAgIGlmIChWREJHKSB7CiAgICAgICAgICAgIGxvZ2QoIltnZXREZXZpY2VUb0RldmljZVN0YXR1c1NoYXJpbmdDb250YWN0c10gKyBzdWJJZDogIiArIHN1YnNjcmlwdGlvbklkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGdldENvbnRhY3RzRnJvbVN1YnNjcmlwdGlvblByb3BlcnR5KHN1YnNjcmlwdGlvbklkLAogICAgICAgICAgICAgICAgRDJEX1NUQVRVU19TSEFSSU5HX1NFTEVDVEVEX0NPTlRBQ1RTLCBtQ29udGV4dCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBETyBOT1QgVVNFLgogICAgICogVGhpcyBBUEkgaXMgZGVzaWduZWQgZm9yIGZlYXR1cmVzIHRoYXQgYXJlIG5vdCBmaW5pc2hlZCBhdCB0aGlzIHBvaW50LiBEbyBub3QKICAgICAqIGNhbGwgdGhpcyBBUEkuCiAgICAgKiAKICAgICAqIEBoaWRlCiAgICAgKiAgICAgICBUT0RPIGIvMTM1NTQ3NTEyOiBmdXJ0aGVyIGNsZWFuIHVwCiAgICAgKi8KICAgIEBTeXN0ZW1BcGkKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oTWFuaWZlc3QucGVybWlzc2lvbi5SRUFEX1BSSVZJTEVHRURfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgaW50IGdldEVuYWJsZWRTdWJzY3JpcHRpb25JZChpbnQgc2xvdEluZGV4KSB7CiAgICAgICAgaW50IHN1YklkID0gSU5WQUxJRF9TVUJTQ1JJUFRJT05fSUQ7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBzdWJJZCA9IGlTdWIuZ2V0RW5hYmxlZFN1YnNjcmlwdGlvbklkKHNsb3RJbmRleCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQoKICAgICAgICBpZiAoVkRCRykKICAgICAgICAgICAgbG9nZCgiZ2V0RW5hYmxlZFN1YnNjcmlwdGlvbklkLCBzdWJJZCA9ICIgKyBzdWJJZCk7CiAgICAgICAgcmV0dXJuIHN1YklkOwogICAgfQoKICAgIHByaXZhdGUgaW50ZXJmYWNlIENhbGxJU3ViTWV0aG9kSGVscGVyIHsKICAgICAgICBpbnQgY2FsbE1ldGhvZChJU3ViIGlTdWIpIHRocm93cyBSZW1vdGVFeGNlcHRpb247CiAgICB9CgogICAgcHJpdmF0ZSBpbnQgc2V0U3Vic2NyaXB0aW9uUHJvcGVydHlIZWxwZXIoaW50IHN1YklkLCBTdHJpbmcgbWV0aG9kTmFtZSwKICAgICAgICAgICAgQ2FsbElTdWJNZXRob2RIZWxwZXIgaGVscGVyKSB7CiAgICAgICAgaWYgKCFpc1ZhbGlkU3Vic2NyaXB0aW9uSWQoc3ViSWQpKSB7CiAgICAgICAgICAgIGxvZ2QoIlsiICsgbWV0aG9kTmFtZSArICJdIiArICItIGZhaWwiKTsKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH0KCiAgICAgICAgaW50IHJlc3VsdCA9IDA7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXN1bHQgPSBoZWxwZXIuY2FsbE1ldGhvZChpU3ViKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgYWN0aXZlIGRhdGEgc3Vic2NyaXB0aW9uIGlkLiBBY3RpdmUgZGF0YSBzdWJzY3JpcHRpb24gcmVmZXJzIHRvIHRoZQogICAgICogc3Vic2NyaXB0aW9uCiAgICAgKiBjdXJyZW50bHkgY2hvc2VuIHRvIHByb3ZpZGUgY2VsbHVsYXIgaW50ZXJuZXQgY29ubmVjdGlvbiB0byB0aGUgdXNlci4gVGhpcwogICAgICogbWF5IGJlCiAgICAgKiBkaWZmZXJlbnQgZnJvbSBnZXREZWZhdWx0RGF0YVN1YnNjcmlwdGlvbklkKCkuIEVnLiBPcHBvcnR1bmlzdGljcyBkYXRhCiAgICAgKgogICAgICogU2VlIHtAbGluayBQaG9uZVN0YXRlTGlzdGVuZXIjb25BY3RpdmVEYXRhU3Vic2NyaXB0aW9uSWRDaGFuZ2VkKGludCl9IGZvciB0aGUKICAgICAqIGRldGFpbHMuCiAgICAgKgogICAgICogQHJldHVybiBBY3RpdmUgZGF0YSBzdWJzY3JpcHRpb24gaWQgaWYgYW55IGlzIGNob3Nlbiwgb3IKICAgICAqICAgICAgICAgU3Vic2NyaXB0aW9uTWFuYWdlci5JTlZBTElEX1NVQlNDUklQVElPTl9JRCBpZiBub3QuCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgaW50IGdldEFjdGl2ZURhdGFTdWJzY3JpcHRpb25JZCgpIHsKICAgICAgICByZXR1cm4gc0FjdGl2ZURhdGFTdWJJZENhY2hlLnF1ZXJ5KG51bGwpOwogICAgfQoKICAgIC8qKgogICAgICogSGVscGVyIG1ldGhvZCB0aGF0IHB1dHMgYSBzdWJzY3JpcHRpb24gaWQgb24gYW4gaW50ZW50IHdpdGggdGhlIGNvbnN0YW50czoKICAgICAqIFBob25lQ29uc3RhbnQuU1VCU0NSSVBUSU9OX0tFWSBhbmQKICAgICAqIFN1YnNjcmlwdGlvbk1hbmFnZXIuRVhUUkFfU1VCU0NSSVBUSU9OX0lOREVYLgogICAgICogQm90aCBjb25zdGFudHMgYXJlIHVzZWQgdG8gc3VwcG9ydCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gT25jZSB3ZSBrbm93IHdlCiAgICAgKiBnb3QgYWxsIHBsYWNlcywKICAgICAqIHdlIGNhbiByZW1vdmUgUGhvbmVDb25zdGFudHMuU1VCU0NSSVBUSU9OX0tFWS4KICAgICAqIAogICAgICogQHBhcmFtIGludGVudCBJbnRlbnQgdG8gcHV0IHN1YiBpZCBvbi4KICAgICAqIEBwYXJhbSBzdWJJZCAgU3Vic2NyaXB0aW9uSWQgdG8gcHV0IG9uIGludGVudC4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgcHV0U3Vic2NyaXB0aW9uSWRFeHRyYShJbnRlbnQgaW50ZW50LCBpbnQgc3ViSWQpIHsKICAgICAgICBpbnRlbnQucHV0RXh0cmEoU3Vic2NyaXB0aW9uTWFuYWdlci5FWFRSQV9TVUJTQ1JJUFRJT05fSU5ERVgsIHN1YklkKTsKICAgICAgICBpbnRlbnQucHV0RXh0cmEoUGhvbmVDb25zdGFudHMuU1VCU0NSSVBUSU9OX0tFWSwgc3ViSWQpOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyB2b2lkIGludmFsaWRhdGVEZWZhdWx0U3ViSWRDYWNoZXMoKSB7CiAgICAgICAgUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlLmludmFsaWRhdGVDYWNoZShDQUNIRV9LRVlfREVGQVVMVF9TVUJfSURfUFJPUEVSVFkpOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyB2b2lkIGludmFsaWRhdGVEZWZhdWx0RGF0YVN1YklkQ2FjaGVzKCkgewogICAgICAgIFByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZS5pbnZhbGlkYXRlQ2FjaGUoQ0FDSEVfS0VZX0RFRkFVTFRfREFUQV9TVUJfSURfUFJPUEVSVFkpOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyB2b2lkIGludmFsaWRhdGVEZWZhdWx0U21zU3ViSWRDYWNoZXMoKSB7CiAgICAgICAgUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlLmludmFsaWRhdGVDYWNoZShDQUNIRV9LRVlfREVGQVVMVF9TTVNfU1VCX0lEX1BST1BFUlRZKTsKICAgIH0KCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBpbnZhbGlkYXRlQWN0aXZlRGF0YVN1YklkQ2FjaGVzKCkgewogICAgICAgIFByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZS5pbnZhbGlkYXRlQ2FjaGUoQ0FDSEVfS0VZX0FDVElWRV9EQVRBX1NVQl9JRF9QUk9QRVJUWSk7CiAgICB9CgogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgaW52YWxpZGF0ZVNsb3RJbmRleENhY2hlcygpIHsKICAgICAgICBQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGUuaW52YWxpZGF0ZUNhY2hlKENBQ0hFX0tFWV9TTE9UX0lOREVYX1BST1BFUlRZKTsKICAgIH0KCiAgICAvKioKICAgICAqIEFsbG93cyBhIHRlc3QgcHJvY2VzcyB0byBkaXNhYmxlIGNsaWVudC1zaWRlIGNhY2hpbmcgb3BlcmF0aW9ucy4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgZGlzYWJsZUNhY2hpbmcoKSB7CiAgICAgICAgc0RlZmF1bHRTdWJJZENhY2hlLmRpc2FibGVMb2NhbCgpOwogICAgICAgIHNEZWZhdWx0RGF0YVN1YklkQ2FjaGUuZGlzYWJsZUxvY2FsKCk7CiAgICAgICAgc0FjdGl2ZURhdGFTdWJJZENhY2hlLmRpc2FibGVMb2NhbCgpOwogICAgICAgIHNEZWZhdWx0U21zU3ViSWRDYWNoZS5kaXNhYmxlTG9jYWwoKTsKICAgICAgICBzU2xvdEluZGV4Q2FjaGUuZGlzYWJsZUxvY2FsKCk7CiAgICAgICAgc1Bob25lSWRDYWNoZS5kaXNhYmxlTG9jYWwoKTsKICAgIH0KCiAgICAvKioKICAgICAqIENsZWFycyBhbGwgcHJvY2Vzcy1sb2NhbCBiaW5kZXIgY2FjaGVzLgogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBjbGVhckNhY2hlcygpIHsKICAgICAgICBzRGVmYXVsdFN1YklkQ2FjaGUuY2xlYXIoKTsKICAgICAgICBzRGVmYXVsdERhdGFTdWJJZENhY2hlLmNsZWFyKCk7CiAgICAgICAgc0FjdGl2ZURhdGFTdWJJZENhY2hlLmNsZWFyKCk7CiAgICAgICAgc0RlZmF1bHRTbXNTdWJJZENhY2hlLmNsZWFyKCk7CiAgICAgICAgc1Nsb3RJbmRleENhY2hlLmNsZWFyKCk7CiAgICAgICAgc1Bob25lSWRDYWNoZS5jbGVhcigpOwogICAgfQoKICAgIC8qKgogICAgICogQ2FsbGVkIHRvIHJldHJpZXZlIFNJTS1zcGVjaWZpYyBzZXR0aW5ncyBkYXRhIHRvIGJlIGJhY2tlZCB1cC4KICAgICAqCiAgICAgKiBAcmV0dXJuIGRhdGEgaW4gYnl0ZVtdIHRvIGJlIGJhY2tlZCB1cC4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBATm9uTnVsbAogICAgQFN5c3RlbUFwaQogICAgQFJlcXVpcmVzUGVybWlzc2lvbihNYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUFJJVklMRUdFRF9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBieXRlW10gZ2V0QWxsU2ltU3BlY2lmaWNTZXR0aW5nc0ZvckJhY2t1cCgpIHsKICAgICAgICBCdW5kbGUgYnVuZGxlID0gbUNvbnRleHQuZ2V0Q29udGVudFJlc29sdmVyKCkuY2FsbCgKICAgICAgICAgICAgICAgIFNJTV9JTkZPX0JBQ0tVUF9BTkRfUkVTVE9SRV9DT05URU5UX1VSSSwKICAgICAgICAgICAgICAgIEdFVF9TSU1fU1BFQ0lGSUNfU0VUVElOR1NfTUVUSE9EX05BTUUsIG51bGwsIG51bGwpOwogICAgICAgIHJldHVybiBidW5kbGUuZ2V0Qnl0ZUFycmF5KFN1YnNjcmlwdGlvbk1hbmFnZXIuS0VZX1NJTV9TUEVDSUZJQ19TRVRUSU5HU19EQVRBKTsKICAgIH0KCiAgICAvKioKICAgICAqIENhbGxlZCB0byBhdHRlbXB0IHRvIHJlc3RvcmUgdGhlIGJhY2tlZCB1cCBzaW0tc3BlY2lmaWMgY29uZmlncyB0byBkZXZpY2UgZm9yCiAgICAgKiBzcGVjaWZpYyBzaW0uCiAgICAgKiBUaGlzIHdpbGwgdHJ5IHRvIHJlc3RvcmUgdGhlIGRhdGEgdGhhdCB3YXMgc3RvcmVkIGludGVybmFsbHkgd2hlbiB7QGxpbmsKICAgICAqICNyZXN0b3JlQWxsU2ltU3BlY2lmaWNTZXR0aW5nc0Zyb21CYWNrdXAoYnl0ZVtdIGRhdGEpfSB3YXMgY2FsbGVkIGR1cmluZwogICAgICogc2V0dXAgd2l6YXJkLgogICAgICogRW5kIHJlc3VsdCBpcyBTaW1JbmZvREIgaXMgbW9kaWZpZWQgdG8gbWF0Y2ggYW55IGJhY2tlZCB1cCBjb25maWdzIGZvciB0aGUKICAgICAqIHJlcXVlc3RlZAogICAgICogaW5zZXJ0ZWQgc2ltLgogICAgICoKICAgICAqIDxwPgogICAgICogVGhlIHtAbGluayBVcml9IHtAbGluayAjU0lNX0lORk9fQkFDS1VQX0FORF9SRVNUT1JFX0NPTlRFTlRfVVJJfSBpcyBub3RpZmllZAogICAgICogaWYgYW55IFNpbUluZm9EQgogICAgICogZW50cnkgaXMgdXBkYXRlZCBhcyB0aGUgcmVzdWx0IG9mIHRoaXMgbWV0aG9kIGNhbGwuCiAgICAgKgogICAgICogQHBhcmFtIGljY0lkIG9mIHRoZSBzaW0gdGhhdCBhIHJlc3RvcmUgaXMgcmVxdWVzdGVkIGZvci4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKE1hbmlmZXN0LnBlcm1pc3Npb24uTU9ESUZZX1BIT05FX1NUQVRFKQogICAgcHVibGljIHZvaWQgcmVzdG9yZVNpbVNwZWNpZmljU2V0dGluZ3NGb3JJY2NJZEZyb21CYWNrdXAoQE5vbk51bGwgU3RyaW5nIGljY0lkKSB7CiAgICAgICAgbUNvbnRleHQuZ2V0Q29udGVudFJlc29sdmVyKCkuY2FsbCgKICAgICAgICAgICAgICAgIFNJTV9JTkZPX0JBQ0tVUF9BTkRfUkVTVE9SRV9DT05URU5UX1VSSSwKICAgICAgICAgICAgICAgIFJFU1RPUkVfU0lNX1NQRUNJRklDX1NFVFRJTkdTX01FVEhPRF9OQU1FLAogICAgICAgICAgICAgICAgaWNjSWQsIG51bGwpOwogICAgfQoKICAgIC8qKgogICAgICogQ2FsbGVkIGR1cmluZyBzZXR1cCB3aXphcmQgcmVzdG9yZSBmbG93IHRvIGF0dGVtcHQgdG8gcmVzdG9yZSB0aGUgYmFja2VkIHVwCiAgICAgKiBzaW0tc3BlY2lmaWMKICAgICAqIGNvbmZpZ3MgdG8gZGV2aWNlIGZvciBhbGwgZXhpc3RpbmcgU0lNcyBpbiBTaW1JbmZvREIuIEludGVybmFsbHksIGl0IHdpbGwKICAgICAqIHN0b3JlIHRoZSBiYWNrdXAKICAgICAqIGRhdGEgaW4gYW4gaW50ZXJuYWwgZmlsZS4gVGhpcyBmaWxlIHdpbGwgcGVyc2lzdCBvbiBkZXZpY2UgZm9yIGRldmljZSdzCiAgICAgKiBsaWZldGltZSBhbmQgd2lsbCBiZQogICAgICogdXNlZCBsYXRlciBvbiB3aGVuIGEgU0lNIGlzIGluc2VydGVkIHRvIHJlc3RvcmUgdGhhdCBzcGVjaWZpYyBTSU0ncyBzZXR0aW5ncwogICAgICogYnkgY2FsbGluZwogICAgICoge0BsaW5rICNyZXN0b3JlU2ltU3BlY2lmaWNTZXR0aW5nc0ZvckljY0lkRnJvbUJhY2t1cChTdHJpbmcgaWNjSWQpfS4gRW5kCiAgICAgKiByZXN1bHQgaXMKICAgICAqIFNpbUluZm9EQiBpcyBtb2RpZmllZCB0byBtYXRjaCBhbnkgYmFja2VkIHVwIGNvbmZpZ3MgZm9yIHRoZSBhcHByb3ByaWF0ZQogICAgICogaW5zZXJ0ZWQgU0lNcy4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIFRoZSB7QGxpbmsgVXJpfSB7QGxpbmsgI1NJTV9JTkZPX0JBQ0tVUF9BTkRfUkVTVE9SRV9DT05URU5UX1VSSX0gaXMgbm90aWZpZWQKICAgICAqIGlmIGFueSBTaW1JbmZvREIKICAgICAqIGVudHJ5IGlzIHVwZGF0ZWQgYXMgdGhlIHJlc3VsdCBvZiB0aGlzIG1ldGhvZCBjYWxsLgogICAgICoKICAgICAqIEBwYXJhbSBkYXRhIHdpdGggdGhlIHNpbSBzcGVjaWZpYyBjb25maWdzIHRvIGJlIGJhY2tlZCB1cC4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAU3lzdGVtQXBpCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKE1hbmlmZXN0LnBlcm1pc3Npb24uTU9ESUZZX1BIT05FX1NUQVRFKQogICAgcHVibGljIHZvaWQgcmVzdG9yZUFsbFNpbVNwZWNpZmljU2V0dGluZ3NGcm9tQmFja3VwKEBOb25OdWxsIGJ5dGVbXSBkYXRhKSB7CiAgICAgICAgQnVuZGxlIGJ1bmRsZSA9IG5ldyBCdW5kbGUoKTsKICAgICAgICBidW5kbGUucHV0Qnl0ZUFycmF5KEtFWV9TSU1fU1BFQ0lGSUNfU0VUVElOR1NfREFUQSwgZGF0YSk7CiAgICAgICAgbUNvbnRleHQuZ2V0Q29udGVudFJlc29sdmVyKCkuY2FsbCgKICAgICAgICAgICAgICAgIFNJTV9JTkZPX0JBQ0tVUF9BTkRfUkVTVE9SRV9DT05URU5UX1VSSSwKICAgICAgICAgICAgICAgIFJFU1RPUkVfU0lNX1NQRUNJRklDX1NFVFRJTkdTX01FVEhPRF9OQU1FLAogICAgICAgICAgICAgICAgbnVsbCwgYnVuZGxlKTsKICAgIH0KCiAgICBwdWJsaWMgdm9pZCBzZXRQaG9uZU51bWJlcihATm9uTnVsbCBTdHJpbmcgdmFsdWUpIHsKICAgICAgICBQaG9uZUNvbnN0YW50cy5zZXRNU0lTRE4odmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgcGhvbmUgbnVtYmVyIGZvciB0aGUgZ2l2ZW4ge0Bjb2RlIHN1YnNjcmlwdGlvbklkfSBhbmQKICAgICAqIHtAY29kZSBzb3VyY2V9LAogICAgICogb3IgYW4gZW1wdHkgc3RyaW5nIGlmIG5vdCBhdmFpbGFibGUuCiAgICAgKgogICAgICogPHA+CiAgICAgKiBHZW5lcmFsIGFwcHMgdGhhdCBuZWVkIHRvIGtub3cgdGhlIHBob25lIG51bWJlciBzaG91bGQgdXNlCiAgICAgKiB7QGxpbmsgI2dldFBob25lTnVtYmVyKGludCl9CiAgICAgKiBpbnN0ZWFkLiBUaGlzIEFQSSBtYXkgYmUgc3VpdGFibGUgc3BlY2lmaWMgYXBwcyB0aGF0IG5lZWRzIHRvIGtub3cgdGhlIHBob25lCiAgICAgKiBudW1iZXIgZnJvbQogICAgICogYSBzcGVjaWZpYyBzb3VyY2UuIEZvciBleGFtcGxlLCBhIGNhcnJpZXIgYXBwIG5lZWRzIHRvIGtub3cgZXhhY3RseSB3aGF0J3Mgb24KICAgICAqIHtAbGluayAjUEhPTkVfTlVNQkVSX1NPVVJDRV9VSUNDIFVJQ0N9IGFuZCBkZWNpZGUgaWYgdGhlIHByZXZpb3VzbHkgc2V0IHBob25lCiAgICAgKiBudW1iZXIKICAgICAqIG9mIHNvdXJjZSB7QGxpbmsgI1BIT05FX05VTUJFUl9TT1VSQ0VfQ0FSUklFUiBjYXJyaWVyfSBzaG91bGQgYmUgdXBkYXRlZC4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIFRoZSBBUEkgcHJvdmlkZXMgbm8gZ3VhcmFudGVlcyBvZiB3aGF0IGZvcm1hdCB0aGUgbnVtYmVyIGlzIGluOiB0aGUgZm9ybWF0CiAgICAgKiBjYW4gdmFyeQogICAgICogZGVwZW5kaW5nIG9uIHRoZSB7QGNvZGUgc291cmNlfSBhbmQgdGhlIG5ldHdvcmsgZXRjLiBQcm9ncmFtbWF0aWMgcGFyc2luZwogICAgICogc2hvdWxkIGJlIGRvbmUKICAgICAqIGNhdXRpb3VzbHksIGZvciBleGFtcGxlLCBhZnRlciBmb3JtYXR0aW5nIHRoZSBudW1iZXIgdG8gYSBjb25zaXN0ZW50IGZvcm1hdAogICAgICogd2l0aAogICAgICoge0BsaW5rIGFuZHJvaWQudGVsZXBob255LlBob25lTnVtYmVyVXRpbHMjZm9ybWF0TnVtYmVyVG9FMTY0KFN0cmluZywgU3RyaW5nKX0uCiAgICAgKgogICAgICogPHA+CiAgICAgKiBOb3RlIHRoZSBhc3N1bXB0aW9uIGlzIHRoYXQgb25lIHN1YnNjcmlwdGlvbiAod2hpY2ggdXN1YWxseSBtZWFucyBvbmUgU0lNKQogICAgICogaGFzCiAgICAgKiBvbmx5IG9uZSBwaG9uZSBudW1iZXIuIFRoZSBtdWx0aXBsZSBzb3VyY2VzIGJhY2t1cCBlYWNoIG90aGVyIHNvIGhvcGVmdWxseSBhdAogICAgICogbGVhc3Qgb25lCiAgICAgKiBpcyBhdmFpbGF2bGUuIEZvciBleGFtcGxlLCBmb3IgYSBjYXJyaWVyIHRoYXQgZG9lc24ndCB0eXBpY2FsbHkgc2V0IHBob25lCiAgICAgKiBudW1iZXJzCiAgICAgKiBvbiB7QGxpbmsgI1BIT05FX05VTUJFUl9TT1VSQ0VfVUlDQyBVSUNDfSwgdGhlIHNvdXJjZQogICAgICoge0BsaW5rICNQSE9ORV9OVU1CRVJfU09VUkNFX0lNUyBJTVN9CiAgICAgKiBtYXkgcHJvdmlkZSBvbmUuIE9yLCBhIGNhcnJpZXIgbWF5IGRlY2lkZSB0byBwcm92aWRlIHRoZSBwaG9uZSBudW1iZXIgdmlhCiAgICAgKiBzb3VyY2UKICAgICAqIHtAbGluayAjUEhPTkVfTlVNQkVSX1NPVVJDRV9DQVJSSUVSIGNhcnJpZXJ9IGlmIG5laXRoZXIgc291cmNlIFVJQ0Mgbm9yIElNUwogICAgICogaXMgYXZhaWxhYmxlLgogICAgICoKICAgICAqIDxwPgogICAgICogVGhlIGF2YWlsYWJpbGl0eSBhbmQgY29ycmVjdG5lc3Mgb2YgdGhlIHBob25lIG51bWJlciBkZXBlbmRzIG9uIHRoZQogICAgICogdW5kZXJseWluZyBzb3VyY2UKICAgICAqIGFuZCB0aGUgbmV0d29yayBldGMuIEFkZGl0aW9uYWwgdmVyaWZpY2F0aW9uIGlzIG5lZWRlZCB0byB1c2UgdGhpcyBudW1iZXIgZm9yCiAgICAgKiBzZWN1cml0eS1yZWxhdGVkIG9yIG90aGVyIHNlbnNpdGl2ZSBzY2VuYXJpb3MuCiAgICAgKgogICAgICogQHBhcmFtIHN1YnNjcmlwdGlvbklkIHRoZSBzdWJzY3JpcHRpb24gSUQsIG9yCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAge0BsaW5rICNERUZBVUxUX1NVQlNDUklQVElPTl9JRH0KICAgICAqICAgICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIGRlZmF1bHQgb25lLgogICAgICogQHBhcmFtIHNvdXJjZSAgICAgICAgIHRoZSBzb3VyY2Ugb2YgdGhlIHBob25lIG51bWJlciwgb25lIG9mIHRoZQogICAgICogICAgICAgICAgICAgICAgICAgICAgIFBIT05FX05VTUJFUl9TT1VSQ0VfKiBjb25zdGFudHMuCiAgICAgKiBAcmV0dXJuIHRoZSBwaG9uZSBudW1iZXIsIG9yIGFuIGVtcHR5IHN0cmluZyBpZiBub3QgYXZhaWxhYmxlLgogICAgICogQHRocm93cyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gaWYge0Bjb2RlIHNvdXJjZX0gaXMgaW52YWxpZC4KICAgICAqIEB0aHJvd3MgSWxsZWdhbFN0YXRlRXhjZXB0aW9uICAgIGlmIHRoZSB0ZWxlcGhvbnkgcHJvY2VzcyBpcyBub3QgY3VycmVudGx5CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGUuCiAgICAgKiBAdGhyb3dzIFNlY3VyaXR5RXhjZXB0aW9uICAgICAgICBpZiB0aGUgY2FsbGVyIGRvZXNuJ3QgaGF2ZSBwZXJtaXNzaW9ucwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQuCiAgICAgKiBAc2VlICNQSE9ORV9OVU1CRVJfU09VUkNFX1VJQ0MKICAgICAqIEBzZWUgI1BIT05FX05VTUJFUl9TT1VSQ0VfQ0FSUklFUgogICAgICogQHNlZSAjUEhPTkVfTlVNQkVSX1NPVVJDRV9JTVMKICAgICAqLwogICAgQFJlcXVpcmVzUGVybWlzc2lvbihhbnlPZiA9IHsKICAgICAgICAgICAgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUEhPTkVfTlVNQkVSUywKICAgICAgICAgICAgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUFJJVklMRUdFRF9QSE9ORV9TVEFURSwKICAgICAgICAgICAgImNhcnJpZXIgcHJpdmlsZWdlcyIsCiAgICB9KQogICAgQE5vbk51bGwKICAgIHB1YmxpYyBTdHJpbmcgZ2V0UGhvbmVOdW1iZXIoaW50IHN1YnNjcmlwdGlvbklkLCBAUGhvbmVOdW1iZXJTb3VyY2UgaW50IHNvdXJjZSkgewogICAgICAgIGlmIChzdWJzY3JpcHRpb25JZCA9PSBERUZBVUxUX1NVQlNDUklQVElPTl9JRCkgewogICAgICAgICAgICBzdWJzY3JpcHRpb25JZCA9IGdldERlZmF1bHRTdWJzY3JpcHRpb25JZCgpOwogICAgICAgIH0KICAgICAgICBpZiAoc291cmNlICE9IFBIT05FX05VTUJFUl9TT1VSQ0VfVUlDQwogICAgICAgICAgICAgICAgJiYgc291cmNlICE9IFBIT05FX05VTUJFUl9TT1VSQ0VfQ0FSUklFUgogICAgICAgICAgICAgICAgJiYgc291cmNlICE9IFBIT05FX05VTUJFUl9TT1VSQ0VfSU1TKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oImludmFsaWQgc291cmNlICIgKyBzb3VyY2UpOwogICAgICAgIH0KICAgICAgICB0cnkgewogICAgICAgICAgICAvLyBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgLy8gaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAvLyByZXR1cm4gaVN1Yi5nZXRQaG9uZU51bWJlcihzdWJzY3JpcHRpb25JZCwgc291cmNlLAogICAgICAgICAgICAvLyBtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCksIG1Db250ZXh0LmdldEF0dHJpYnV0aW9uVGFnKCkpOwogICAgICAgICAgICBpZiAoUGhvbmVDb25zdGFudHMuZ2V0TVNJU0ROKCkgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIFBob25lQ29uc3RhbnRzLmdldE1TSVNETigpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbigic3Vic2NyaXB0aW9uIHNlcnZpY2UgdW5hdmFpbGFibGUuIik7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgdGhyb3cgZXgucmV0aHJvd0FzUnVudGltZUV4Y2VwdGlvbigpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIHBob25lIG51bWJlciBmb3IgdGhlIGdpdmVuIHtAY29kZSBzdWJJZH0sIG9yIGFuIGVtcHR5IHN0cmluZyBpZgogICAgICogbm90IGF2YWlsYWJsZS4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIFRoaXMgQVBJIGlzIHN1aXRhYmxlIGZvciBnZW5lcmFsIGFwcHMgdGhhdCBuZWVkcyB0byBrbm93IHRoZSBwaG9uZSBudW1iZXIuCiAgICAgKiBGb3Igc3BlY2lmaWMgYXBwcyB0aGF0IG5lZWRzIHRvIGtub3cgdGhlIHBob25lIG51bWJlciBwcm92aWRlZCBieSBhIHNwZWNpZmljCiAgICAgKiBzb3VyY2UsCiAgICAgKiB7QGxpbmsgI2dldFBob25lTnVtYmVyKGludCwgaW50KX0gbWF5IGJlIHN1aXRhYmxlLgogICAgICoKICAgICAqIDxwPgogICAgICogVGhpcyBBUEkgaXMgYnVpbHQgdXAgb24ge0BsaW5rICNnZXRQaG9uZU51bWJlcihpbnQsIGludCl9LCBidXQgcGlja3MKICAgICAqIGZyb20gYXZhaWxhYmxlIHNvdXJjZXMgaW4gdGhlIGZvbGxvd2luZyBvcmRlcjoKICAgICAqIHtAbGluayAjUEhPTkVfTlVNQkVSX1NPVVJDRV9DQVJSSUVSfQogICAgICogPiB7QGxpbmsgI1BIT05FX05VTUJFUl9TT1VSQ0VfVUlDQ30gPiB7QGxpbmsgI1BIT05FX05VTUJFUl9TT1VSQ0VfSU1TfS4KICAgICAqCiAgICAgKiA8cD4KICAgICAqIFRoZSBBUEkgcHJvdmlkZXMgbm8gZ3VhcmFudGVlcyBvZiB3aGF0IGZvcm1hdCB0aGUgbnVtYmVyIGlzIGluOiB0aGUgZm9ybWF0CiAgICAgKiBjYW4gdmFyeQogICAgICogZGVwZW5kaW5nIG9uIHRoZSB1bmRlcmx5aW5nIHNvdXJjZSBhbmQgdGhlIG5ldHdvcmsgZXRjLiBQcm9ncmFtbWF0aWMgcGFyc2luZwogICAgICogc2hvdWxkIGJlIGRvbmUKICAgICAqIGNhdXRpb3VzbHksIGZvciBleGFtcGxlLCBhZnRlciBmb3JtYXR0aW5nIHRoZSBudW1iZXIgdG8gYSBjb25zaXN0ZW50IGZvcm1hdAogICAgICogd2l0aAogICAgICoge0BsaW5rIGFuZHJvaWQudGVsZXBob255LlBob25lTnVtYmVyVXRpbHMjZm9ybWF0TnVtYmVyVG9FMTY0KFN0cmluZywgU3RyaW5nKX0uCiAgICAgKgogICAgICogPHA+CiAgICAgKiBUaGUgYXZhaWxhYmlsaXR5IGFuZCBjb3JyZWN0bmVzcyBvZiB0aGUgcGhvbmUgbnVtYmVyIGRlcGVuZHMgb24gdGhlCiAgICAgKiB1bmRlcmx5aW5nIHNvdXJjZQogICAgICogYW5kIHRoZSBuZXR3b3JrIGV0Yy4gQWRkaXRpb25hbCB2ZXJpZmljYXRpb24gaXMgbmVlZGVkIHRvIHVzZSB0aGlzIG51bWJlciBmb3IKICAgICAqIHNlY3VyaXR5LXJlbGF0ZWQgb3Igb3RoZXIgc2Vuc2l0aXZlIHNjZW5hcmlvcy4KICAgICAqCiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uSWQgdGhlIHN1YnNjcmlwdGlvbiBJRCwgb3IKICAgICAqICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgI0RFRkFVTFRfU1VCU0NSSVBUSU9OX0lEfQogICAgICogICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGUgZGVmYXVsdCBvbmUuCiAgICAgKiBAcmV0dXJuIHRoZSBwaG9uZSBudW1iZXIsIG9yIGFuIGVtcHR5IHN0cmluZyBpZiBub3QgYXZhaWxhYmxlLgogICAgICogQHRocm93cyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24gaWYgdGhlIHRlbGVwaG9ueSBwcm9jZXNzIGlzIG5vdCBjdXJyZW50bHkKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZS4KICAgICAqIEB0aHJvd3MgU2VjdXJpdHlFeGNlcHRpb24gICAgIGlmIHRoZSBjYWxsZXIgZG9lc24ndCBoYXZlIHBlcm1pc3Npb25zCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZC4KICAgICAqIEBzZWUgI2dldFBob25lTnVtYmVyKGludCwgaW50KQogICAgICovCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKGFueU9mID0gewogICAgICAgICAgICBhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uUkVBRF9QSE9ORV9OVU1CRVJTLAogICAgICAgICAgICBhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uUkVBRF9QUklWSUxFR0VEX1BIT05FX1NUQVRFLAogICAgICAgICAgICAiY2FycmllciBwcml2aWxlZ2VzIiwKICAgIH0pCiAgICBATm9uTnVsbAogICAgcHVibGljIFN0cmluZyBnZXRQaG9uZU51bWJlcihpbnQgc3Vic2NyaXB0aW9uSWQpIHsKICAgICAgICBpZiAoc3Vic2NyaXB0aW9uSWQgPT0gREVGQVVMVF9TVUJTQ1JJUFRJT05fSUQpIHsKICAgICAgICAgICAgc3Vic2NyaXB0aW9uSWQgPSBnZXREZWZhdWx0U3Vic2NyaXB0aW9uSWQoKTsKICAgICAgICB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgLy8gSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIC8vIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgLy8gcmV0dXJuIGlTdWIuZ2V0UGhvbmVOdW1iZXJGcm9tRmlyc3RBdmFpbGFibGVTb3VyY2Uoc3Vic2NyaXB0aW9uSWQsCiAgICAgICAgICAgIC8vIG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSwgbUNvbnRleHQuZ2V0QXR0cmlidXRpb25UYWcoKSk7CiAgICAgICAgICAgIGlmIChQaG9uZUNvbnN0YW50cy5nZXRNU0lTRE4oKSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gUGhvbmVDb25zdGFudHMuZ2V0TVNJU0ROKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKCJzdWJzY3JpcHRpb24gc2VydmljZSB1bmF2YWlsYWJsZS4iKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICB0aHJvdyBleC5yZXRocm93QXNSdW50aW1lRXhjZXB0aW9uKCk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogU2V0cyB0aGUgcGhvbmUgbnVtYmVyIGZvciB0aGUgZ2l2ZW4ge0Bjb2RlIHN1YklkfSBmb3Igc291cmNlCiAgICAgKiB7QGxpbmsgI1BIT05FX05VTUJFUl9TT1VSQ0VfQ0FSUklFUiBjYXJyaWVyfS4KICAgICAqIFNldHMgYW4gZW1wdHkgc3RyaW5nIHRvIHJlbW92ZSB0aGUgcHJldmlvdXNseSBzZXQgcGhvbmUgbnVtYmVyLgogICAgICoKICAgICAqIDxwPgogICAgICogVGhlIEFQSSBpcyBzdWl0YWJsZSBmb3IgY2FycmllciBhcHBzIHRvIHByb3ZpZGUgYSBwaG9uZSBudW1iZXIsIGZvciBleGFtcGxlCiAgICAgKiB3aGVuCiAgICAgKiBpdCdzIG5vdCBwb3NzaWJsZSB0byB1cGRhdGUge0BsaW5rICNQSE9ORV9OVU1CRVJfU09VUkNFX1VJQ0MgVUlDQ30gZGlyZWN0bHkuCiAgICAgKgogICAgICogPHA+CiAgICAgKiBJdCdzIHJlY29tbWVuZGVkIHRoYXQgdGhlIHBob25lIG51bWJlciBpcyBmb3JtYXR0ZWQgdG8gd2VsbC1rbm93biBmb3JtYXRzLAogICAgICogZm9yIGV4YW1wbGUsIGJ5IHtAbGluayBQaG9uZU51bWJlclV0aWxzfSB7QGNvZGUgZm9ybWF0TnVtYmVyKn0gbWV0aG9kcy4KICAgICAqCiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uSWQgdGhlIHN1YnNjcmlwdGlvbiBJRCwgb3IKICAgICAqICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgI0RFRkFVTFRfU1VCU0NSSVBUSU9OX0lEfQogICAgICogICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGUgZGVmYXVsdCBvbmUuCiAgICAgKiBAcGFyYW0gbnVtYmVyICAgICAgICAgdGhlIHBob25lIG51bWJlciwgb3IgYW4gZW1wdHkgc3RyaW5nIHRvIHJlbW92ZSB0aGUKICAgICAqICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c2x5IHNldCBudW1iZXIuCiAgICAgKiBAdGhyb3dzIElsbGVnYWxTdGF0ZUV4Y2VwdGlvbiBpZiB0aGUgdGVsZXBob255IHByb2Nlc3MgaXMgbm90IGN1cnJlbnRseQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlLgogICAgICogQHRocm93cyBOdWxsUG9pbnRlckV4Y2VwdGlvbiAgaWYge0Bjb2RlIG51bWJlcn0gaXMge0Bjb2RlIG51bGx9LgogICAgICogQHRocm93cyBTZWN1cml0eUV4Y2VwdGlvbiAgICAgaWYgdGhlIGNhbGxlciBkb2Vzbid0IGhhdmUgcGVybWlzc2lvbnMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkLgogICAgICovCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKCJjYXJyaWVyIHByaXZpbGVnZXMiKQogICAgcHVibGljIHZvaWQgc2V0Q2FycmllclBob25lTnVtYmVyKGludCBzdWJzY3JpcHRpb25JZCwgQE5vbk51bGwgU3RyaW5nIG51bWJlcikgewogICAgICAgIGlmIChzdWJzY3JpcHRpb25JZCA9PSBERUZBVUxUX1NVQlNDUklQVElPTl9JRCkgewogICAgICAgICAgICBzdWJzY3JpcHRpb25JZCA9IGdldERlZmF1bHRTdWJzY3JpcHRpb25JZCgpOwogICAgICAgIH0KICAgICAgICBpZiAobnVtYmVyID09IG51bGwpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IE51bGxQb2ludGVyRXhjZXB0aW9uKCJpbnZhbGlkIG51bWJlciBudWxsIik7CiAgICAgICAgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBpU3ViLnNldFBob25lTnVtYmVyKHN1YnNjcmlwdGlvbklkLCBQSE9ORV9OVU1CRVJfU09VUkNFX0NBUlJJRVIsIG51bWJlciwKICAgICAgICAgICAgICAgICAgICAgICAgbUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpLCBtQ29udGV4dC5nZXRBdHRyaWJ1dGlvblRhZygpKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oInN1YnNjcmlwdGlvbiBzZXJ2aWNlIHVuYXZhaWxhYmxlLiIpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIHRocm93IGV4LnJldGhyb3dBc1J1bnRpbWVFeGNlcHRpb24oKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgdGhlIHByZWZlcnJlZCB1c2FnZSBzZXR0aW5nLgogICAgICoKICAgICAqIFRoZSBjZWxsdWxhciB1c2FnZSBzZXR0aW5nIGlzIGEgc3dpdGNoIHdoaWNoIGNvbnRyb2xzIHRoZSBtb2RlIG9mIG9wZXJhdGlvbgogICAgICogZm9yIHRoZSBjZWxsdWxhcgogICAgICogcmFkaW8gdG8gZWl0aGVyIHJlcXVpcmUgb3Igbm90IHJlcXVpcmUgdm9pY2Ugc2VydmljZS4gSXQgaXMgbm90IG1hbmFnZWQgdmlhCiAgICAgKiBBbmRyb2lk4oCZcwogICAgICogU2V0dGluZ3MuCiAgICAgKgogICAgICogQHBhcmFtIHN1YnNjcmlwdGlvbklkIHRoZSBzdWJJZCBvZiB0aGUgc3Vic2NyaXB0aW9uLgogICAgICogQHBhcmFtIHVzYWdlU2V0dGluZyAgIHRoZSByZXF1ZXN0ZWQgdXNhZ2Ugc2V0dGluZy4KICAgICAqCiAgICAgKiBAdGhyb3dzIElsbGVnYWxTdGF0ZUV4Y2VwdGlvbiBpZiBhIHNwZWNpZmljIG1vZGUgb3Igc2V0dGluZyB0aGUgbW9kZSBpcyBub3QKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cHBvcnRlZCBvbiBhCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWN1bGFyIGRldmljZS4KICAgICAqCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlcXVpcmVzCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uI01PRElGWV9QSE9ORV9TVEFURX0KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIHRoYXQgdGhlIGNhbGxpbmcgYXBwIGhhcyBDYXJyaWVyUHJpdmlsZWdlcwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBnaXZlbiBzdWJzY3JpcHRpb24uCiAgICAgKgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90ZTogVGhpcyBtZXRob2Qgd2lsbCBub3QgYWxsb3cgdGhlIHNldHRpbmcgb2YKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVTQUdFX1NFVFRJTkdfVU5LTk9XTi4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKE1hbmlmZXN0LnBlcm1pc3Npb24uTU9ESUZZX1BIT05FX1NUQVRFKQogICAgdm9pZCBzZXRVc2FnZVNldHRpbmcoaW50IHN1YnNjcmlwdGlvbklkLCBAVXNhZ2VTZXR0aW5nIGludCB1c2FnZVNldHRpbmcpIHsKICAgICAgICBpZiAoVkRCRykKICAgICAgICAgICAgbG9nZCgiW3NldFVzYWdlU2V0dGluZ10rIHNldHRpbmc6IiArIHVzYWdlU2V0dGluZyArICIgc3ViSWQ6IiArIHN1YnNjcmlwdGlvbklkKTsKICAgICAgICBzZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eUhlbHBlcihzdWJzY3JpcHRpb25JZCwgInNldFVzYWdlU2V0dGluZyIsCiAgICAgICAgICAgICAgICAoaVN1YikgLT4gaVN1Yi5zZXRVc2FnZVNldHRpbmcoCiAgICAgICAgICAgICAgICAgICAgICAgIHVzYWdlU2V0dGluZywgc3Vic2NyaXB0aW9uSWQsIG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSkpOwogICAgfQp9Cg==</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">LyoKICogQ29weXJpZ2h0IChDKSAyMDE0IFRoZSBBbmRyb2lkIE9wZW4gU291cmNlIFByb2plY3QKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwoKcGFja2FnZSBhbmRyb2lkLnRlbGVwaG9ueTsKCmltcG9ydCBzdGF0aWMgYW5kcm9pZC5uZXQuTmV0d29ya1BvbGljeU1hbmFnZXIuU1VCU0NSSVBUSU9OX09WRVJSSURFX0NPTkdFU1RFRDsKaW1wb3J0IHN0YXRpYyBhbmRyb2lkLm5ldC5OZXR3b3JrUG9saWN5TWFuYWdlci5TVUJTQ1JJUFRJT05fT1ZFUlJJREVfVU5NRVRFUkVEOwoKaW1wb3J0IGFuZHJvaWQuTWFuaWZlc3Q7CmltcG9ydCBhbmRyb2lkLmFubm90YXRpb24uQ2FsbGJhY2tFeGVjdXRvcjsKaW1wb3J0IGFuZHJvaWQuYW5ub3RhdGlvbi5Db2xvckludDsKaW1wb3J0IGFuZHJvaWQuYW5ub3RhdGlvbi5EdXJhdGlvbk1pbGxpc0xvbmc7CmltcG9ydCBhbmRyb2lkLmFubm90YXRpb24uSW50RGVmOwppbXBvcnQgYW5kcm9pZC5hbm5vdGF0aW9uLk5vbk51bGw7CmltcG9ydCBhbmRyb2lkLmFubm90YXRpb24uTnVsbGFibGU7CmltcG9ydCBhbmRyb2lkLmFubm90YXRpb24uUmVxdWlyZXNQZXJtaXNzaW9uOwppbXBvcnQgYW5kcm9pZC5hbm5vdGF0aW9uLlNka0NvbnN0YW50OwppbXBvcnQgYW5kcm9pZC5hbm5vdGF0aW9uLlNka0NvbnN0YW50LlNka0NvbnN0YW50VHlwZTsKaW1wb3J0IGFuZHJvaWQuYW5ub3RhdGlvbi5TdXBwcmVzc0F1dG9Eb2M7CmltcG9ydCBhbmRyb2lkLmFubm90YXRpb24uU3lzdGVtQXBpOwppbXBvcnQgYW5kcm9pZC5hbm5vdGF0aW9uLlN5c3RlbVNlcnZpY2U7CmltcG9ydCBhbmRyb2lkLmFubm90YXRpb24uVGVzdEFwaTsKaW1wb3J0IGFuZHJvaWQuYXBwLlBlbmRpbmdJbnRlbnQ7CmltcG9ydCBhbmRyb2lkLmFwcC5Qcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGU7CmltcG9ydCBhbmRyb2lkLmNvbXBhdC5hbm5vdGF0aW9uLlVuc3VwcG9ydGVkQXBwVXNhZ2U7CmltcG9ydCBhbmRyb2lkLmNvbnRlbnQuQ29udGV4dDsKaW1wb3J0IGFuZHJvaWQuY29udGVudC5JbnRlbnQ7CmltcG9ydCBhbmRyb2lkLmNvbnRlbnQucG0uUGFja2FnZUluZm87CmltcG9ydCBhbmRyb2lkLmNvbnRlbnQucG0uUGFja2FnZU1hbmFnZXI7CmltcG9ydCBhbmRyb2lkLmNvbnRlbnQucmVzLkNvbmZpZ3VyYXRpb247CmltcG9ydCBhbmRyb2lkLmNvbnRlbnQucmVzLlJlc291cmNlczsKaW1wb3J0IGFuZHJvaWQuZGF0YWJhc2UuQ29udGVudE9ic2VydmVyOwppbXBvcnQgYW5kcm9pZC5uZXQuTmV0d29ya0NhcGFiaWxpdGllczsKaW1wb3J0IGFuZHJvaWQubmV0Lk5ldHdvcmtQb2xpY3lNYW5hZ2VyOwppbXBvcnQgYW5kcm9pZC5uZXQuVXJpOwppbXBvcnQgYW5kcm9pZC5vcy5CaW5kZXI7CmltcG9ydCBhbmRyb2lkLm9zLkJ1aWxkOwppbXBvcnQgYW5kcm9pZC5vcy5IYW5kbGVyOwppbXBvcnQgYW5kcm9pZC5vcy5Mb29wZXI7CmltcG9ydCBhbmRyb2lkLm9zLlBhcmNlbFV1aWQ7CmltcG9ydCBhbmRyb2lkLm9zLlByb2Nlc3M7CmltcG9ydCBhbmRyb2lkLm9zLlJlbW90ZUV4Y2VwdGlvbjsKaW1wb3J0IGFuZHJvaWQucHJvdmlkZXIuVGVsZXBob255LlNpbUluZm87CmltcG9ydCBhbmRyb2lkLnRlbGVwaG9ueS5ldWljYy5FdWljY01hbmFnZXI7CmltcG9ydCBhbmRyb2lkLnRlbGVwaG9ueS5pbXMuSW1zTW1UZWxNYW5hZ2VyOwppbXBvcnQgYW5kcm9pZC51dGlsLkxvZzsKaW1wb3J0IGFuZHJvaWQudXRpbC5QYWlyOwoKaW1wb3J0IGNvbS5hbmRyb2lkLmludGVybmFsLnRlbGVwaG9ueS5JU2V0T3Bwb3J0dW5pc3RpY0RhdGFDYWxsYmFjazsKaW1wb3J0IGNvbS5hbmRyb2lkLmludGVybmFsLnRlbGVwaG9ueS5JU3ViOwppbXBvcnQgY29tLmFuZHJvaWQuaW50ZXJuYWwudGVsZXBob255LlBob25lQ29uc3RhbnRzOwppbXBvcnQgY29tLmFuZHJvaWQuaW50ZXJuYWwudGVsZXBob255LnV0aWwuSGFuZGxlckV4ZWN1dG9yOwppbXBvcnQgY29tLmFuZHJvaWQuaW50ZXJuYWwudXRpbC5GdW5jdGlvbmFsVXRpbHM7CmltcG9ydCBjb20uYW5kcm9pZC5pbnRlcm5hbC51dGlsLlByZWNvbmRpdGlvbnM7CmltcG9ydCBjb20uYW5kcm9pZC50ZWxlcGhvbnkuUmxvZzsKCmltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi5SZXRlbnRpb247CmltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi5SZXRlbnRpb25Qb2xpY3k7CmltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwppbXBvcnQgamF2YS51dGlsLkFycmF5czsKaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uczsKaW1wb3J0IGphdmEudXRpbC5IYXNoTWFwOwppbXBvcnQgamF2YS51dGlsLkxpc3Q7CmltcG9ydCBqYXZhLnV0aWwuTG9jYWxlOwppbXBvcnQgamF2YS51dGlsLk1hcDsKaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbmN1cnJlbnRIYXNoTWFwOwppbXBvcnQgamF2YS51dGlsLmNvbmN1cnJlbnQuRXhlY3V0b3I7CmltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uQ29uc3VtZXI7CmltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7CgovKioKICogU3Vic2NyaXB0aW9uTWFuYWdlciBpcyB0aGUgYXBwbGljYXRpb24gaW50ZXJmYWNlIHRvIFN1YnNjcmlwdGlvbkNvbnRyb2xsZXIKICogYW5kIHByb3ZpZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IFRlbGVwaG9ueSBTdWJzY3JpcHRpb25zLgogKi8KQFN5c3RlbVNlcnZpY2UoQ29udGV4dC5URUxFUEhPTllfU1VCU0NSSVBUSU9OX1NFUlZJQ0UpCnB1YmxpYyBjbGFzcyBTdWJzY3JpcHRpb25NYW5hZ2VyIHsKICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBMT0dfVEFHID0gIlN1YnNjcmlwdGlvbk1hbmFnZXIiOwogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgYm9vbGVhbiBEQkcgPSBmYWxzZTsKICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIGJvb2xlYW4gVkRCRyA9IGZhbHNlOwoKICAgIC8qKiBBbiBpbnZhbGlkIHN1YnNjcmlwdGlvbiBpZGVudGlmaWVyICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBJTlZBTElEX1NVQlNDUklQVElPTl9JRCA9IC0xOwoKICAgIC8qKiBCYXNlIHZhbHVlIGZvciBEdW1teSBTVUJTQ1JJUFRJT05fSUQncy4gKi8KICAgIC8qKiBGSVhNRTogUmVtb3ZlIER1bW15U3ViSWQncywgYnV0IGZvciBub3cgaGF2ZSB0aGVtIG1hcCBqdXN0IGJlbG93IElOVkFMSURfU1VCU0NSSVBUSU9OX0lECiAgICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBEVU1NWV9TVUJTQ1JJUFRJT05fSURfQkFTRSA9IElOVkFMSURfU1VCU0NSSVBUSU9OX0lEIC0gMTsKCiAgICAvKiogQW4gaW52YWxpZCBwaG9uZSBpZGVudGlmaWVyICovCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IElOVkFMSURfUEhPTkVfSU5ERVggPSAtMTsKCiAgICAvKiogSW5kaWNhdGVzIGludmFsaWQgc2ltIHNsb3QuIFRoaXMgY2FuIGJlIHJldHVybmVkIGJ5IHtAbGluayAjZ2V0U2xvdEluZGV4KGludCl9LiAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgSU5WQUxJRF9TSU1fU0xPVF9JTkRFWCA9IC0xOwoKICAgIC8qKiBJbmRpY2F0ZXMgdGhlIGRlZmF1bHQgc3Vic2NyaXB0aW9uIElEIGluIFRlbGVwaG9ueS4gKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IERFRkFVTFRfU1VCU0NSSVBUSU9OX0lEID0gSW50ZWdlci5NQVhfVkFMVUU7CgogICAgLyoqCiAgICAgKiBJbmRpY2F0ZXMgdGhlIGNhbGxlciB3YW50cyB0aGUgZGVmYXVsdCBwaG9uZSBpZC4KICAgICAqIFVzZWQgaW4gU3Vic2NyaXB0aW9uQ29udHJvbGxlciBhbmQgUGhvbmUgYnV0IGRvIHdlIHJlYWxseSBuZWVkIGl0Pz8/CiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBERUZBVUxUX1BIT05FX0lOREVYID0gSW50ZWdlci5NQVhfVkFMVUU7CgogICAgLyoqIEluZGljYXRlcyB0aGUgY2FsbGVyIHdhbnRzIHRoZSBkZWZhdWx0IHNsb3QgaWQuIE5PVCB1c2VkIHJlbW92ZT8gKi8KICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgREVGQVVMVF9TSU1fU0xPVF9JTkRFWCA9IEludGVnZXIuTUFYX1ZBTFVFOwoKICAgIC8qKiBNaW5pbXVtIHBvc3NpYmxlIHN1YmlkIHRoYXQgcmVwcmVzZW50cyBhIHN1YnNjcmlwdGlvbiAqLwogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBNSU5fU1VCU0NSSVBUSU9OX0lEX1ZBTFVFID0gMDsKCiAgICAvKiogTWF4aW11bSBwb3NzaWJsZSBzdWJpZCB0aGF0IHJlcHJlc2VudHMgYSBzdWJzY3JpcHRpb24gKi8KICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgTUFYX1NVQlNDUklQVElPTl9JRF9WQUxVRSA9IERFRkFVTFRfU1VCU0NSSVBUSU9OX0lEIC0gMTsKCiAgICAvKiogQGhpZGUgKi8KICAgIEBVbnN1cHBvcnRlZEFwcFVzYWdlCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFVyaSBDT05URU5UX1VSSSA9IFNpbUluZm8uQ09OVEVOVF9VUkk7CgogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQUNIRV9LRVlfREVGQVVMVF9TVUJfSURfUFJPUEVSVFkgPQogICAgICAgICAgICAiY2FjaGVfa2V5LnRlbGVwaG9ueS5nZXRfZGVmYXVsdF9zdWJfaWQiOwoKICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0FDSEVfS0VZX0RFRkFVTFRfREFUQV9TVUJfSURfUFJPUEVSVFkgPQogICAgICAgICAgICAiY2FjaGVfa2V5LnRlbGVwaG9ueS5nZXRfZGVmYXVsdF9kYXRhX3N1Yl9pZCI7CgogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQUNIRV9LRVlfREVGQVVMVF9TTVNfU1VCX0lEX1BST1BFUlRZID0KICAgICAgICAgICAgImNhY2hlX2tleS50ZWxlcGhvbnkuZ2V0X2RlZmF1bHRfc21zX3N1Yl9pZCI7CgogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQUNIRV9LRVlfQUNUSVZFX0RBVEFfU1VCX0lEX1BST1BFUlRZID0KICAgICAgICAgICAgImNhY2hlX2tleS50ZWxlcGhvbnkuZ2V0X2FjdGl2ZV9kYXRhX3N1Yl9pZCI7CgogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQUNIRV9LRVlfU0xPVF9JTkRFWF9QUk9QRVJUWSA9CiAgICAgICAgICAgICJjYWNoZV9rZXkudGVsZXBob255LmdldF9zbG90X2luZGV4IjsKCiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBpbnQgTUFYX0NBQ0hFX1NJWkUgPSA0OwoKICAgIHByaXZhdGUgc3RhdGljIGNsYXNzIFZvaWRQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGU8VD4KICAgICAgICAgICAgZXh0ZW5kcyBQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGU8Vm9pZCwgVD4gewogICAgICAgIHByaXZhdGUgZmluYWwgRnVuY3Rpb25hbFV0aWxzLlRocm93aW5nRnVuY3Rpb248SVN1YiwgVD4gbUludGVyZmFjZU1ldGhvZDsKICAgICAgICBwcml2YXRlIGZpbmFsIFN0cmluZyBtQ2FjaGVLZXlQcm9wZXJ0eTsKICAgICAgICBwcml2YXRlIGZpbmFsIFQgbURlZmF1bHRWYWx1ZTsKCiAgICAgICAgVm9pZFByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZSgKICAgICAgICAgICAgICAgIEZ1bmN0aW9uYWxVdGlscy5UaHJvd2luZ0Z1bmN0aW9uPElTdWIsIFQ+IHN1YnNjcmlwdGlvbkludGVyZmFjZU1ldGhvZCwKICAgICAgICAgICAgICAgIFN0cmluZyBjYWNoZUtleVByb3BlcnR5LAogICAgICAgICAgICAgICAgVCBkZWZhdWx0VmFsdWUpIHsKICAgICAgICAgICAgc3VwZXIoTUFYX0NBQ0hFX1NJWkUsIGNhY2hlS2V5UHJvcGVydHkpOwogICAgICAgICAgICBtSW50ZXJmYWNlTWV0aG9kID0gc3Vic2NyaXB0aW9uSW50ZXJmYWNlTWV0aG9kOwogICAgICAgICAgICBtQ2FjaGVLZXlQcm9wZXJ0eSA9IGNhY2hlS2V5UHJvcGVydHk7CiAgICAgICAgICAgIG1EZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7CiAgICAgICAgfQoKICAgICAgICBAT3ZlcnJpZGUKICAgICAgICBwcm90ZWN0ZWQgVCByZWNvbXB1dGUoVm9pZCBhVm9pZCkgewogICAgICAgICAgICBUIHJlc3VsdCA9IG1EZWZhdWx0VmFsdWU7CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbUludGVyZmFjZU1ldGhvZC5hcHBseU9yVGhyb3coaVN1Yik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAgICAgUmxvZy53KExPR19UQUcsICJGYWlsZWQgdG8gcmVjb21wdXRlIGNhY2hlIGtleSBmb3IgIiArIG1DYWNoZUtleVByb3BlcnR5KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKFZEQkcpIGxvZ2QoInJlY29tcHV0aW5nICIgKyBtQ2FjaGVLZXlQcm9wZXJ0eSArICIsIHJlc3VsdCA9ICIgKyByZXN1bHQpOwogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgIH0KCiAgICBwcml2YXRlIHN0YXRpYyBjbGFzcyBJbnRlZ2VyUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlPFQ+CiAgICAgICAgICAgIGV4dGVuZHMgUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlPEludGVnZXIsIFQ+IHsKICAgICAgICBwcml2YXRlIGZpbmFsIEZ1bmN0aW9uYWxVdGlscy5UaHJvd2luZ0JpRnVuY3Rpb248SVN1YiwgSW50ZWdlciwgVD4gbUludGVyZmFjZU1ldGhvZDsKICAgICAgICBwcml2YXRlIGZpbmFsIFN0cmluZyBtQ2FjaGVLZXlQcm9wZXJ0eTsKICAgICAgICBwcml2YXRlIGZpbmFsIFQgbURlZmF1bHRWYWx1ZTsKCiAgICAgICAgSW50ZWdlclByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZSgKICAgICAgICAgICAgICAgIEZ1bmN0aW9uYWxVdGlscy5UaHJvd2luZ0JpRnVuY3Rpb248SVN1YiwgSW50ZWdlciwgVD4gc3Vic2NyaXB0aW9uSW50ZXJmYWNlTWV0aG9kLAogICAgICAgICAgICAgICAgU3RyaW5nIGNhY2hlS2V5UHJvcGVydHksCiAgICAgICAgICAgICAgICBUIGRlZmF1bHRWYWx1ZSkgewogICAgICAgICAgICBzdXBlcihNQVhfQ0FDSEVfU0laRSwgY2FjaGVLZXlQcm9wZXJ0eSk7CiAgICAgICAgICAgIG1JbnRlcmZhY2VNZXRob2QgPSBzdWJzY3JpcHRpb25JbnRlcmZhY2VNZXRob2Q7CiAgICAgICAgICAgIG1DYWNoZUtleVByb3BlcnR5ID0gY2FjaGVLZXlQcm9wZXJ0eTsKICAgICAgICAgICAgbURlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTsKICAgICAgICB9CgogICAgICAgIEBPdmVycmlkZQogICAgICAgIHByb3RlY3RlZCBUIHJlY29tcHV0ZShJbnRlZ2VyIHF1ZXJ5KSB7CiAgICAgICAgICAgIFQgcmVzdWx0ID0gbURlZmF1bHRWYWx1ZTsKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBtSW50ZXJmYWNlTWV0aG9kLmFwcGx5T3JUaHJvdyhpU3ViLCBxdWVyeSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAgICAgUmxvZy53KExPR19UQUcsICJGYWlsZWQgdG8gcmVjb21wdXRlIGNhY2hlIGtleSBmb3IgIiArIG1DYWNoZUtleVByb3BlcnR5KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKFZEQkcpIGxvZ2QoInJlY29tcHV0aW5nICIgKyBtQ2FjaGVLZXlQcm9wZXJ0eSArICIsIHJlc3VsdCA9ICIgKyByZXN1bHQpOwogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgIH0KCiAgICBwcml2YXRlIHN0YXRpYyBWb2lkUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlPEludGVnZXI+IHNEZWZhdWx0U3ViSWRDYWNoZSA9CiAgICAgICAgICAgIG5ldyBWb2lkUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlPD4oSVN1Yjo6Z2V0RGVmYXVsdFN1YklkLAogICAgICAgICAgICAgICAgICAgIENBQ0hFX0tFWV9ERUZBVUxUX1NVQl9JRF9QUk9QRVJUWSwKICAgICAgICAgICAgICAgICAgICBJTlZBTElEX1NVQlNDUklQVElPTl9JRCk7CgogICAgcHJpdmF0ZSBzdGF0aWMgVm9pZFByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZTxJbnRlZ2VyPiBzRGVmYXVsdERhdGFTdWJJZENhY2hlID0KICAgICAgICAgICAgbmV3IFZvaWRQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGU8PihJU3ViOjpnZXREZWZhdWx0RGF0YVN1YklkLAogICAgICAgICAgICAgICAgICAgIENBQ0hFX0tFWV9ERUZBVUxUX0RBVEFfU1VCX0lEX1BST1BFUlRZLAogICAgICAgICAgICAgICAgICAgIElOVkFMSURfU1VCU0NSSVBUSU9OX0lEKTsKCiAgICBwcml2YXRlIHN0YXRpYyBWb2lkUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlPEludGVnZXI+IHNEZWZhdWx0U21zU3ViSWRDYWNoZSA9CiAgICAgICAgICAgIG5ldyBWb2lkUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlPD4oSVN1Yjo6Z2V0RGVmYXVsdFNtc1N1YklkLAogICAgICAgICAgICAgICAgICAgIENBQ0hFX0tFWV9ERUZBVUxUX1NNU19TVUJfSURfUFJPUEVSVFksCiAgICAgICAgICAgICAgICAgICAgSU5WQUxJRF9TVUJTQ1JJUFRJT05fSUQpOwoKICAgIHByaXZhdGUgc3RhdGljIFZvaWRQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGU8SW50ZWdlcj4gc0FjdGl2ZURhdGFTdWJJZENhY2hlID0KICAgICAgICAgICAgbmV3IFZvaWRQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGU8PihJU3ViOjpnZXRBY3RpdmVEYXRhU3Vic2NyaXB0aW9uSWQsCiAgICAgICAgICAgICAgICAgICAgQ0FDSEVfS0VZX0FDVElWRV9EQVRBX1NVQl9JRF9QUk9QRVJUWSwKICAgICAgICAgICAgICAgICAgICBJTlZBTElEX1NVQlNDUklQVElPTl9JRCk7CgogICAgcHJpdmF0ZSBzdGF0aWMgSW50ZWdlclByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZTxJbnRlZ2VyPiBzU2xvdEluZGV4Q2FjaGUgPQogICAgICAgICAgICBuZXcgSW50ZWdlclByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZTw+KElTdWI6OmdldFNsb3RJbmRleCwKICAgICAgICAgICAgICAgICAgICBDQUNIRV9LRVlfU0xPVF9JTkRFWF9QUk9QRVJUWSwKICAgICAgICAgICAgICAgICAgICBJTlZBTElEX1NJTV9TTE9UX0lOREVYKTsKCiAgICAvKiogQ2FjaGUgZGVwZW5kcyBvbiBnZXREZWZhdWx0U3ViSWQsIHNvIHdlIHVzZSB0aGUgZGVmYXVsdFN1YklkIGNhY2hlIGtleSAqLwogICAgcHJpdmF0ZSBzdGF0aWMgSW50ZWdlclByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZTxJbnRlZ2VyPiBzUGhvbmVJZENhY2hlID0KICAgICAgICAgICAgbmV3IEludGVnZXJQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGU8PihJU3ViOjpnZXRQaG9uZUlkLAogICAgICAgICAgICAgICAgICAgIENBQ0hFX0tFWV9ERUZBVUxUX1NVQl9JRF9QUk9QRVJUWSwKICAgICAgICAgICAgICAgICAgICBJTlZBTElEX1BIT05FX0lOREVYKTsKCiAgICAvKioKICAgICAqIEdlbmVyYXRlcyBhIGNvbnRlbnQge0BsaW5rIFVyaX0gdXNlZCB0byByZWNlaXZlIHVwZGF0ZXMgb24gc2ltSW5mbyBjaGFuZ2UKICAgICAqIG9uIHRoZSBnaXZlbiBzdWJzY3JpcHRpb25JZAogICAgICogQHBhcmFtIHN1YnNjcmlwdGlvbklkIHRoZSBzdWJzY3JpcHRpb25JZCB0byByZWNlaXZlIHVwZGF0ZXMgb24KICAgICAqIEByZXR1cm4gdGhlIFVyaSB1c2VkIHRvIG9ic2VydmUgY2FycmllciBpZGVudGl0eSBjaGFuZ2VzCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIFVyaSBnZXRVcmlGb3JTdWJzY3JpcHRpb25JZChpbnQgc3Vic2NyaXB0aW9uSWQpIHsKICAgICAgICByZXR1cm4gVXJpLndpdGhBcHBlbmRlZFBhdGgoQ09OVEVOVF9VUkksIFN0cmluZy52YWx1ZU9mKHN1YnNjcmlwdGlvbklkKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBBIGNvbnRlbnQge0BsaW5rIFVyaX0gdXNlZCB0byByZWNlaXZlIHVwZGF0ZXMgb24gd2ZjIGVuYWJsZWQgdXNlciBzZXR0aW5nLgogICAgICogPHA+CiAgICAgKiBVc2UgdGhpcyB7QGxpbmsgVXJpfSB3aXRoIGEge0BsaW5rIENvbnRlbnRPYnNlcnZlcn0gdG8gYmUgbm90aWZpZWQgb2YgY2hhbmdlcyB0byB0aGUKICAgICAqIHN1YnNjcmlwdGlvbiB3ZmMgZW5hYmxlZCB7QGxpbmsgSW1zTW1UZWxNYW5hZ2VyI2lzVm9XaUZpU2V0dGluZ0VuYWJsZWQoKX0KICAgICAqIHdoaWxlIHlvdXIgYXBwIGlzIHJ1bm5pbmcuIFlvdSBjYW4gYWxzbyB1c2UgYSB7QGxpbmsgYW5kcm9pZC5hcHAuam9iLkpvYlNlcnZpY2V9CiAgICAgKiB0byBlbnN1cmUgeW91ciBhcHAKICAgICAqIGlzIG5vdGlmaWVkIG9mIGNoYW5nZXMgdG8gdGhlIHtAbGluayBVcml9IGV2ZW4gd2hlbiBpdCBpcyBub3QgcnVubmluZy4KICAgICAqIE5vdGUsIGhvd2V2ZXIsIHRoYXQgdXNpbmcgYSB7QGxpbmsgYW5kcm9pZC5hcHAuam9iLkpvYlNlcnZpY2V9IGRvZXMgbm90IGd1YXJhbnRlZSB0aW1lbHkKICAgICAqIGRlbGl2ZXJ5IG9mIHVwZGF0ZXMgdG8gdGhlIHtAbGluayBVcml9LgogICAgICogVG8gYmUgbm90aWZpZWQgb2YgY2hhbmdlcyB0byBhIHNwZWNpZmljIHN1YklkLCBhcHBlbmQgc3ViSWQgdG8gdGhlIFVSSQogICAgICoge0BsaW5rIFVyaSN3aXRoQXBwZW5kZWRQYXRoKFVyaSwgU3RyaW5nKX0uCiAgICAgKiBAaGlkZQogICAgICovCiAgICBATm9uTnVsbAogICAgQFN5c3RlbUFwaQogICAgQFRlc3RBcGkKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgVXJpIFdGQ19FTkFCTEVEX0NPTlRFTlRfVVJJID0gVXJpLndpdGhBcHBlbmRlZFBhdGgoQ09OVEVOVF9VUkksICJ3ZmMiKTsKCiAgICAvKioKICAgICAqIEEgY29udGVudCB7QGxpbmsgVXJpfSB1c2VkIHRvIHJlY2VpdmUgdXBkYXRlcyBvbiBhZHZhbmNlZCBjYWxsaW5nIHVzZXIgc2V0dGluZwogICAgICogQHNlZSBJbXNNbVRlbE1hbmFnZXIjaXNBZHZhbmNlZENhbGxpbmdTZXR0aW5nRW5hYmxlZCgpLgogICAgICogPHA+CiAgICAgKiBVc2UgdGhpcyB7QGxpbmsgVXJpfSB3aXRoIGEge0BsaW5rIENvbnRlbnRPYnNlcnZlcn0gdG8gYmUgbm90aWZpZWQgb2YgY2hhbmdlcyB0byB0aGUKICAgICAqIHN1YnNjcmlwdGlvbiBhZHZhbmNlZCBjYWxsaW5nIGVuYWJsZWQKICAgICAqIHtAbGluayBJbXNNbVRlbE1hbmFnZXIjaXNBZHZhbmNlZENhbGxpbmdTZXR0aW5nRW5hYmxlZCgpfSB3aGlsZSB5b3VyIGFwcCBpcyBydW5uaW5nLgogICAgICogWW91IGNhbiBhbHNvIHVzZSBhIHtAbGluayBhbmRyb2lkLmFwcC5qb2IuSm9iU2VydmljZX0gdG8gZW5zdXJlIHlvdXIgYXBwIGlzIG5vdGlmaWVkIG9mCiAgICAgKiBjaGFuZ2VzIHRvIHRoZSB7QGxpbmsgVXJpfSBldmVuIHdoZW4gaXQgaXMgbm90IHJ1bm5pbmcuCiAgICAgKiBOb3RlLCBob3dldmVyLCB0aGF0IHVzaW5nIGEge0BsaW5rIGFuZHJvaWQuYXBwLmpvYi5Kb2JTZXJ2aWNlfSBkb2VzIG5vdCBndWFyYW50ZWUgdGltZWx5CiAgICAgKiBkZWxpdmVyeSBvZiB1cGRhdGVzIHRvIHRoZSB7QGxpbmsgVXJpfS4KICAgICAqIFRvIGJlIG5vdGlmaWVkIG9mIGNoYW5nZXMgdG8gYSBzcGVjaWZpYyBzdWJJZCwgYXBwZW5kIHN1YklkIHRvIHRoZSBVUkkKICAgICAqIHtAbGluayBVcmkjd2l0aEFwcGVuZGVkUGF0aChVcmksIFN0cmluZyl9LgogICAgICogQGhpZGUKICAgICAqLwogICAgQE5vbk51bGwKICAgIEBTeXN0ZW1BcGkKICAgIEBUZXN0QXBpCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFVyaSBBRFZBTkNFRF9DQUxMSU5HX0VOQUJMRURfQ09OVEVOVF9VUkkgPSBVcmkud2l0aEFwcGVuZGVkUGF0aCgKICAgICAgICAgICAgQ09OVEVOVF9VUkksICJhZHZhbmNlZF9jYWxsaW5nIik7CgogICAgLyoqCiAgICAgKiBBIGNvbnRlbnQge0BsaW5rIFVyaX0gdXNlZCB0byByZWNlaXZlIHVwZGF0ZXMgb24gd2ZjIG1vZGUgc2V0dGluZy4KICAgICAqIDxwPgogICAgICogVXNlIHRoaXMge0BsaW5rIFVyaX0gd2l0aCBhIHtAbGluayBDb250ZW50T2JzZXJ2ZXJ9IHRvIGJlIG5vdGlmaWVkIG9mIGNoYW5nZXMgdG8gdGhlCiAgICAgKiBzdWJzY3JpcHRpb24gd2ZjIG1vZGUge0BsaW5rIEltc01tVGVsTWFuYWdlciNnZXRWb1dpRmlNb2RlU2V0dGluZygpfQogICAgICogd2hpbGUgeW91ciBhcHAgaXMgcnVubmluZy4gWW91IGNhbiBhbHNvIHVzZSBhIHtAbGluayBhbmRyb2lkLmFwcC5qb2IuSm9iU2VydmljZX0gdG8gZW5zdXJlCiAgICAgKiB5b3VyIGFwcCBpcyBub3RpZmllZCBvZiBjaGFuZ2VzIHRvIHRoZSB7QGxpbmsgVXJpfSBldmVuIHdoZW4gaXQgaXMgbm90IHJ1bm5pbmcuCiAgICAgKiBOb3RlLCBob3dldmVyLCB0aGF0IHVzaW5nIGEge0BsaW5rIGFuZHJvaWQuYXBwLmpvYi5Kb2JTZXJ2aWNlfSBkb2VzIG5vdCBndWFyYW50ZWUgdGltZWx5CiAgICAgKiBkZWxpdmVyeSBvZiB1cGRhdGVzIHRvIHRoZSB7QGxpbmsgVXJpfS4KICAgICAqIFRvIGJlIG5vdGlmaWVkIG9mIGNoYW5nZXMgdG8gYSBzcGVjaWZpYyBzdWJJZCwgYXBwZW5kIHN1YklkIHRvIHRoZSBVUkkKICAgICAqIHtAbGluayBVcmkjd2l0aEFwcGVuZGVkUGF0aChVcmksIFN0cmluZyl9LgogICAgICogQGhpZGUKICAgICAqLwogICAgQE5vbk51bGwKICAgIEBTeXN0ZW1BcGkKICAgIEBUZXN0QXBpCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFVyaSBXRkNfTU9ERV9DT05URU5UX1VSSSA9IFVyaS53aXRoQXBwZW5kZWRQYXRoKENPTlRFTlRfVVJJLCAid2ZjX21vZGUiKTsKCiAgICAvKioKICAgICAqIEEgY29udGVudCB7QGxpbmsgVXJpfSB1c2VkIHRvIHJlY2VpdmUgdXBkYXRlcyBvbiB3ZmMgcm9hbWluZyBtb2RlIHNldHRpbmcuCiAgICAgKiA8cD4KICAgICAqIFVzZSB0aGlzIHtAbGluayBVcml9IHdpdGggYSB7QGxpbmsgQ29udGVudE9ic2VydmVyfSB0byBiZSBub3RpZmllZCBvZiBjaGFuZ2VzIHRvIHRoZQogICAgICogc3Vic2NyaXB0aW9uIHdmYyByb2FtaW5nIG1vZGUge0BsaW5rIEltc01tVGVsTWFuYWdlciNnZXRWb1dpRmlSb2FtaW5nTW9kZVNldHRpbmcoKX0KICAgICAqIHdoaWxlIHlvdXIgYXBwIGlzIHJ1bm5pbmcuIFlvdSBjYW4gYWxzbyB1c2UgYSB7QGxpbmsgYW5kcm9pZC5hcHAuam9iLkpvYlNlcnZpY2V9CiAgICAgKiB0byBlbnN1cmUgeW91ciBhcHAgaXMgbm90aWZpZWQgb2YgY2hhbmdlcyB0byB0aGUge0BsaW5rIFVyaX0gZXZlbiB3aGVuIGl0IGlzIG5vdCBydW5uaW5nLgogICAgICogTm90ZSwgaG93ZXZlciwgdGhhdCB1c2luZyBhIHtAbGluayBhbmRyb2lkLmFwcC5qb2IuSm9iU2VydmljZX0gZG9lcyBub3QgZ3VhcmFudGVlIHRpbWVseQogICAgICogZGVsaXZlcnkgb2YgdXBkYXRlcyB0byB0aGUge0BsaW5rIFVyaX0uCiAgICAgKiBUbyBiZSBub3RpZmllZCBvZiBjaGFuZ2VzIHRvIGEgc3BlY2lmaWMgc3ViSWQsIGFwcGVuZCBzdWJJZCB0byB0aGUgVVJJCiAgICAgKiB7QGxpbmsgVXJpI3dpdGhBcHBlbmRlZFBhdGgoVXJpLCBTdHJpbmcpfS4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBOb25OdWxsCiAgICBAU3lzdGVtQXBpCiAgICBAVGVzdEFwaQogICAgcHVibGljIHN0YXRpYyBmaW5hbCBVcmkgV0ZDX1JPQU1JTkdfTU9ERV9DT05URU5UX1VSSSA9IFVyaS53aXRoQXBwZW5kZWRQYXRoKAogICAgICAgICAgICBDT05URU5UX1VSSSwgIndmY19yb2FtaW5nX21vZGUiKTsKCiAgICAvKioKICAgICAqIEEgY29udGVudCB7QGxpbmsgVXJpfSB1c2VkIHRvIHJlY2VpdmUgdXBkYXRlcyBvbiB2dCh2aWRlbyB0ZWxlcGhvbnkgb3ZlciBJTVMpIGVuYWJsZWQKICAgICAqIHNldHRpbmcuCiAgICAgKiA8cD4KICAgICAqIFVzZSB0aGlzIHtAbGluayBVcml9IHdpdGggYSB7QGxpbmsgQ29udGVudE9ic2VydmVyfSB0byBiZSBub3RpZmllZCBvZiBjaGFuZ2VzIHRvIHRoZQogICAgICogc3Vic2NyaXB0aW9uIHZ0IGVuYWJsZWQge0BsaW5rIEltc01tVGVsTWFuYWdlciNpc1Z0U2V0dGluZ0VuYWJsZWQoKX0KICAgICAqIHdoaWxlIHlvdXIgYXBwIGlzIHJ1bm5pbmcuIFlvdSBjYW4gYWxzbyB1c2UgYSB7QGxpbmsgYW5kcm9pZC5hcHAuam9iLkpvYlNlcnZpY2V9IHRvIGVuc3VyZQogICAgICogeW91ciBhcHAgaXMgbm90aWZpZWQgb2YgY2hhbmdlcyB0byB0aGUge0BsaW5rIFVyaX0gZXZlbiB3aGVuIGl0IGlzIG5vdCBydW5uaW5nLgogICAgICogTm90ZSwgaG93ZXZlciwgdGhhdCB1c2luZyBhIHtAbGluayBhbmRyb2lkLmFwcC5qb2IuSm9iU2VydmljZX0gZG9lcyBub3QgZ3VhcmFudGVlIHRpbWVseQogICAgICogZGVsaXZlcnkgb2YgdXBkYXRlcyB0byB0aGUge0BsaW5rIFVyaX0uCiAgICAgKiBUbyBiZSBub3RpZmllZCBvZiBjaGFuZ2VzIHRvIGEgc3BlY2lmaWMgc3ViSWQsIGFwcGVuZCBzdWJJZCB0byB0aGUgVVJJCiAgICAgKiB7QGxpbmsgVXJpI3dpdGhBcHBlbmRlZFBhdGgoVXJpLCBTdHJpbmcpfS4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBOb25OdWxsCiAgICBAU3lzdGVtQXBpCiAgICBAVGVzdEFwaQogICAgcHVibGljIHN0YXRpYyBmaW5hbCBVcmkgVlRfRU5BQkxFRF9DT05URU5UX1VSSSA9IFVyaS53aXRoQXBwZW5kZWRQYXRoKAogICAgICAgICAgICBDT05URU5UX1VSSSwgInZ0X2VuYWJsZWQiKTsKCiAgICAvKioKICAgICAqIEEgY29udGVudCB7QGxpbmsgVXJpfSB1c2VkIHRvIHJlY2VpdmUgdXBkYXRlcyBvbiB3ZmMgcm9hbWluZyBlbmFibGVkIHNldHRpbmcuCiAgICAgKiA8cD4KICAgICAqIFVzZSB0aGlzIHtAbGluayBVcml9IHdpdGggYSB7QGxpbmsgQ29udGVudE9ic2VydmVyfSB0byBiZSBub3RpZmllZCBvZiBjaGFuZ2VzIHRvIHRoZQogICAgICogc3Vic2NyaXB0aW9uIHdmYyByb2FtaW5nIGVuYWJsZWQge0BsaW5rIEltc01tVGVsTWFuYWdlciNpc1ZvV2lGaVJvYW1pbmdTZXR0aW5nRW5hYmxlZCgpfQogICAgICogd2hpbGUgeW91ciBhcHAgaXMgcnVubmluZy4gWW91IGNhbiBhbHNvIHVzZSBhIHtAbGluayBhbmRyb2lkLmFwcC5qb2IuSm9iU2VydmljZX0gdG8gZW5zdXJlCiAgICAgKiB5b3VyIGFwcCBpcyBub3RpZmllZCBvZiBjaGFuZ2VzIHRvIHRoZSB7QGxpbmsgVXJpfSBldmVuIHdoZW4gaXQgaXMgbm90IHJ1bm5pbmcuCiAgICAgKiBOb3RlLCBob3dldmVyLCB0aGF0IHVzaW5nIGEge0BsaW5rIGFuZHJvaWQuYXBwLmpvYi5Kb2JTZXJ2aWNlfSBkb2VzIG5vdCBndWFyYW50ZWUgdGltZWx5CiAgICAgKiBkZWxpdmVyeSBvZiB1cGRhdGVzIHRvIHRoZSB7QGxpbmsgVXJpfS4KICAgICAqIFRvIGJlIG5vdGlmaWVkIG9mIGNoYW5nZXMgdG8gYSBzcGVjaWZpYyBzdWJJZCwgYXBwZW5kIHN1YklkIHRvIHRoZSBVUkkKICAgICAqIHtAbGluayBVcmkjd2l0aEFwcGVuZGVkUGF0aChVcmksIFN0cmluZyl9LgogICAgICogQGhpZGUKICAgICAqLwogICAgQE5vbk51bGwKICAgIEBTeXN0ZW1BcGkKICAgIEBUZXN0QXBpCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFVyaSBXRkNfUk9BTUlOR19FTkFCTEVEX0NPTlRFTlRfVVJJID0gVXJpLndpdGhBcHBlbmRlZFBhdGgoCiAgICAgICAgICAgIENPTlRFTlRfVVJJLCAid2ZjX3JvYW1pbmdfZW5hYmxlZCIpOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgdW5pcXVlIGtleSBjb2x1bW4gbmFtZSBpcyB0aGUgc3Vic2NyaXB0aW9uIGlkLgogICAgICogPFA+VHlwZTogVEVYVCAoU3RyaW5nKTwvUD4KICAgICAqLwogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBVTklRVUVfS0VZX1NVQlNDUklQVElPTl9JRCA9CiAgICAgICAgICAgIFNpbUluZm8uQ09MVU1OX1VOSVFVRV9LRVlfU1VCU0NSSVBUSU9OX0lEOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIGEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBzdWJzY3JpcHRpb24gd2l0aGluIHRoZQogICAgICogc3BlY2lmaWMgc3Vic2NyaXB0aW9uIHR5cGUuIEZvciBleGFtcGxlLCBpdCBjb250YWlucyBTSU0gSUNDIElkZW50aWZpZXIgc3Vic2NyaXB0aW9ucwogICAgICogb24gTG9jYWwgU0lNcy4gYW5kIE1hYy1hZGRyZXNzIGZvciBSZW1vdGUtU0lNIFN1YnNjcmlwdGlvbnMgZm9yIEJsdWV0b290aCBkZXZpY2VzLgogICAgICogPFA+VHlwZTogVEVYVCAoU3RyaW5nKTwvUD4KICAgICAqLwogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBJQ0NfSUQgPSBTaW1JbmZvLkNPTFVNTl9JQ0NfSUQ7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgdXNlciBTSU1fU2xPVF9JTkRFWAogICAgICogPFA+VHlwZTogSU5URUdFUiAoaW50KTwvUD4KICAgICAqLwogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBTSU1fU0xPVF9JTkRFWCA9IFNpbUluZm8uQ09MVU1OX1NJTV9TTE9UX0lOREVYOwoKICAgIC8qKiBTSU0gaXMgbm90IGluc2VydGVkICovCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFNJTV9OT1RfSU5TRVJURUQgPSBTaW1JbmZvLlNJTV9OT1RfSU5TRVJURUQ7CgogICAgLyoqCiAgICAgKiBUaGUgc2xvdC1pbmRleCBmb3IgQmx1ZXRvb3RoIFJlbW90ZS1TSU0gc3Vic2NyaXB0aW9ucwogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgU0xPVF9JTkRFWF9GT1JfUkVNT1RFX1NJTV9TVUIgPSBJTlZBTElEX1NJTV9TTE9UX0lOREVYOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgU3Vic2NyaXB0aW9uLXR5cGUuCiAgICAgKiA8UD5UeXBlOiBJTlRFR0VSIChpbnQpPC9QPiB7QGxpbmsgI1NVQlNDUklQVElPTl9UWVBFX0xPQ0FMX1NJTX0gZm9yIExvY2FsLVNJTSBTdWJzY3JpcHRpb25zLAogICAgICoge0BsaW5rICNTVUJTQ1JJUFRJT05fVFlQRV9SRU1PVEVfU0lNfSBmb3IgUmVtb3RlLVNJTSBTdWJzY3JpcHRpb25zLgogICAgICogRGVmYXVsdCB2YWx1ZSBpcyAwLgogICAgICovCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIFNVQlNDUklQVElPTl9UWVBFID0gU2ltSW5mby5DT0xVTU5fU1VCU0NSSVBUSU9OX1RZUEU7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBkYXRhX2VuYWJsZWRfb3ZlcnJpZGVfcnVsZXMuCiAgICAgKiBJdCdzIGEgbGlzdCBvZiBydWxlcyBmb3Igb3ZlcnJpZGluZyBkYXRhIGVuYWJsZWQgc2V0dGluZ3MuIFRoZSBzeW50YXggaXMKICAgICAqIEZvciBleGFtcGxlLCAibW1zPW5vbkRlZmF1bHQiIGluZGljYXRlcyBlbmFibGluZyBkYXRhIGZvciBtbXMgaW4gbm9uLWRlZmF1bHQgc3Vic2NyaXB0aW9uLgogICAgICogImRlZmF1bHQ9bm9uRGVmYXVsdCZpblZvaWNlQ2FsbCIgaW5kaWNhdGVzIGVuYWJsaW5nIGRhdGEgZm9yIGludGVybmV0IGluIG5vbi1kZWZhdWx0CiAgICAgKiBzdWJzY3JpcHRpb24gYW5kIHdoaWxlIGlzIGluIHZvaWNlIGNhbGwuCiAgICAgKgogICAgICogRGVmYXVsdCB2YWx1ZSBpcyBlbXB0eSBzdHJpbmcuCiAgICAgKgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgREFUQV9FTkFCTEVEX09WRVJSSURFX1JVTEVTID0KICAgICAgICAgICAgU2ltSW5mby5DT0xVTU5fREFUQV9FTkFCTEVEX09WRVJSSURFX1JVTEVTOwoKICAgIC8qKiBAaGlkZSAqLwogICAgQFJldGVudGlvbihSZXRlbnRpb25Qb2xpY3kuU09VUkNFKQogICAgQEludERlZihwcmVmaXggPSB7IlNVQlNDUklQVElPTl9UWVBFXyJ9LAogICAgICAgIHZhbHVlID0gewogICAgICAgICAgICBTVUJTQ1JJUFRJT05fVFlQRV9MT0NBTF9TSU0sCiAgICAgICAgICAgIFNVQlNDUklQVElPTl9UWVBFX1JFTU9URV9TSU19KQogICAgcHVibGljIEBpbnRlcmZhY2UgU3Vic2NyaXB0aW9uVHlwZSB7fQoKICAgIC8qKgogICAgICogVGhpcyBjb25zdGFudCBpcyB0byBkZXNpZ25hdGUgYSBzdWJzY3JpcHRpb24gYXMgYSBMb2NhbC1TSU0gU3Vic2NyaXB0aW9uLgogICAgICogPHA+IEEgTG9jYWwtU0lNIGNhbiBiZSBhIHBoeXNpY2FsIFNJTSBpbnNlcnRlZCBpbnRvIGEgc2ltLXNsb3QgaW4gdGhlIGRldmljZSwgb3IgZVNJTSBvbiB0aGUKICAgICAqIGRldmljZS4KICAgICAqIDwvcD4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgU1VCU0NSSVBUSU9OX1RZUEVfTE9DQUxfU0lNID0gU2ltSW5mby5TVUJTQ1JJUFRJT05fVFlQRV9MT0NBTF9TSU07CgogICAgLyoqCiAgICAgKiBUaGlzIGNvbnN0YW50IGlzIHRvIGRlc2lnbmF0ZSBhIHN1YnNjcmlwdGlvbiBhcyBhIFJlbW90ZS1TSU0gU3Vic2NyaXB0aW9uLgogICAgICogPHA+CiAgICAgKiBBIFJlbW90ZS1TSU0gc3Vic2NyaXB0aW9uIGlzIGZvciBhIFNJTSBvbiBhIHBob25lIGNvbm5lY3RlZCB0byB0aGlzIGRldmljZSB2aWEgc29tZQogICAgICogY29ubmVjdGl2aXR5IG1lY2hhbmlzbSwgZm9yIGV4YW1wbGUgYmx1ZXRvb3RoLiBTaW1pbGFyIHRvIExvY2FsIFNJTSwgdGhpcyBzdWJzY3JpcHRpb24gY2FuCiAgICAgKiBiZSB1c2VkIGZvciBTTVMsIFZvaWNlIGFuZCBkYXRhIGJ5IHByb3h5aW5nIGRhdGEgdGhyb3VnaCB0aGUgY29ubmVjdGVkIGRldmljZS4KICAgICAqIENlcnRhaW4gZGF0YSBvZiB0aGUgU0lNLCBzdWNoIGFzIElNRUksIGFyZSBub3QgYWNjZXNzaWJsZSBmb3IgUmVtb3RlIFNJTXMuCiAgICAgKiA8L3A+CiAgICAgKgogICAgICogPHA+CiAgICAgKiBBIFJlbW90ZS1TSU0gaXMgYXZhaWxhYmxlIG9ubHkgYXMgbG9uZyB0aGUgcGhvbmUgc3RheXMgY29ubmVjdGVkIHRvIHRoaXMgZGV2aWNlLgogICAgICogV2hlbiB0aGUgcGhvbmUgZGlzY29ubmVjdHMsIFJlbW90ZS1TSU0gc3Vic2NyaXB0aW9uIGlzIHJlbW92ZWQgZnJvbSB0aGlzIGRldmljZSBhbmQgaXMKICAgICAqIG5vIGxvbmdlciBrbm93bi4gQWxsIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBzdWJzY3JpcHRpb24sIHN1Y2ggYXMgc3RvcmVkIFNNUywgY2FsbCBsb2dzLAogICAgICogY29udGFjdHMgZXRjLCBhcmUgcmVtb3ZlZCBmcm9tIHRoaXMgZGV2aWNlLgogICAgICogPC9wPgogICAgICoKICAgICAqIDxwPgogICAgICogSWYgdGhlIHBob25lIHJlLWNvbm5lY3RzIHRvIHRoaXMgZGV2aWNlLCBhIG5ldyBSZW1vdGUtU0lNIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGZvcgogICAgICogdGhlIHBob25lLiBUaGUgU3Vic2NyaXB0aW9uIElkIGFzc29jaWF0ZWQgd2l0aCB0aGUgbmV3IHN1YnNjcmlwdGlvbiBpcyBkaWZmZXJlbnQgZnJvbQogICAgICogdGhlIFN1YnNjcmlwdGlvbiBJZCBvZiB0aGUgcHJldmlvdXMgUmVtb3RlLVNJTSBzdWJzY3JpcHRpb24gY3JlYXRlZCAoYW5kIHJlbW92ZWQpIGZvciB0aGUKICAgICAqIHBob25lOyBpLmUuLCBuZXcgUmVtb3RlLVNJTSBzdWJzY3JpcHRpb24gdHJlYXRzIHRoZSByZWNvbm5lY3RlZCBwaG9uZSBhcyBhIFJlbW90ZS1TSU0gdGhhdAogICAgICogd2FzIG5ldmVyIHNlZW4gYmVmb3JlLgogICAgICogPC9wPgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBTVUJTQ1JJUFRJT05fVFlQRV9SRU1PVEVfU0lNID0gU2ltSW5mby5TVUJTQ1JJUFRJT05fVFlQRV9SRU1PVEVfU0lNOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHVzZXIgZGlzcGxheWVkIG5hbWUuCiAgICAgKiA8UD5UeXBlOiBURVhUIChTdHJpbmcpPC9QPgogICAgICovCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIERJU1BMQVlfTkFNRSA9IFNpbUluZm8uQ09MVU1OX0RJU1BMQVlfTkFNRTsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciB0aGUgc2VydmljZSBwcm92aWRlciBuYW1lIGZvciB0aGUgU0lNLgogICAgICogPFA+VHlwZTogVEVYVCAoU3RyaW5nKTwvUD4KICAgICAqLwogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQVJSSUVSX05BTUUgPSBTaW1JbmZvLkNPTFVNTl9DQVJSSUVSX05BTUU7CgogICAgLyoqCiAgICAgKiBEZWZhdWx0IG5hbWUgcmVzb3VyY2UKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IERFRkFVTFRfTkFNRV9SRVMgPSBjb20uYW5kcm9pZC5pbnRlcm5hbC5SLnN0cmluZy51bmtub3duTmFtZTsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBzb3VyY2Ugb2YgdGhlIHVzZXIgZGlzcGxheWVkIG5hbWUuCiAgICAgKiA8UD5UeXBlOiBJTlQgKGludCk8L1A+IHdpdGggb25lIG9mIHRoZSBOQU1FX1NPVVJDRV9YWFhYIHZhbHVlcyBiZWxvdwogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE5BTUVfU09VUkNFID0gU2ltSW5mby5DT0xVTU5fTkFNRV9TT1VSQ0U7CgogICAgLyoqCiAgICAgKiBUaGUgbmFtZV9zb3VyY2UgaXMgZnJvbSB0aGUgY2FycmllciBpZC4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE5BTUVfU09VUkNFX0NBUlJJRVJfSUQgPSBTaW1JbmZvLk5BTUVfU09VUkNFX0NBUlJJRVJfSUQ7CgogICAgLyoqCiAgICAgKiBUaGUgbmFtZV9zb3VyY2UgaXMgZnJvbSBTSU0gRUZfU1BOLgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgTkFNRV9TT1VSQ0VfU0lNX1NQTiA9IFNpbUluZm8uTkFNRV9TT1VSQ0VfU0lNX1NQTjsKCiAgICAvKioKICAgICAqIFRoZSBuYW1lX3NvdXJjZSBpcyBmcm9tIHVzZXIgaW5wdXQKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBVbnN1cHBvcnRlZEFwcFVzYWdlKG1heFRhcmdldFNkayA9IEJ1aWxkLlZFUlNJT05fQ09ERVMuUCwgdHJhY2tpbmdCdWcgPSAxMTU2MDkwMjMpCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBOQU1FX1NPVVJDRV9VU0VSX0lOUFVUID0gU2ltSW5mby5OQU1FX1NPVVJDRV9VU0VSX0lOUFVUOwoKICAgIC8qKgogICAgICogVGhlIG5hbWVfc291cmNlIGlzIGNhcnJpZXIgKGNhcnJpZXIgYXBwLCBjYXJyaWVyIGNvbmZpZywgZXRjLikKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE5BTUVfU09VUkNFX0NBUlJJRVIgPSBTaW1JbmZvLk5BTUVfU09VUkNFX0NBUlJJRVI7CgogICAgLyoqCiAgICAgKiBUaGUgbmFtZV9zb3VyY2UgaXMgZnJvbSBTSU0gRUZfUE5OLgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgTkFNRV9TT1VSQ0VfU0lNX1BOTiA9IFNpbUluZm8uTkFNRV9TT1VSQ0VfU0lNX1BOTjsKCiAgICAvKiogQGhpZGUgKi8KICAgIEBSZXRlbnRpb24oUmV0ZW50aW9uUG9saWN5LlNPVVJDRSkKICAgIEBJbnREZWYocHJlZml4ID0geyJOQU1FX1NPVVJDRV8ifSwKICAgICAgICAgICAgdmFsdWUgPSB7CiAgICAgICAgICAgICAgICAgICAgTkFNRV9TT1VSQ0VfQ0FSUklFUl9JRCwKICAgICAgICAgICAgICAgICAgICBOQU1FX1NPVVJDRV9TSU1fU1BOLAogICAgICAgICAgICAgICAgICAgIE5BTUVfU09VUkNFX1VTRVJfSU5QVVQsCiAgICAgICAgICAgICAgICAgICAgTkFNRV9TT1VSQ0VfQ0FSUklFUiwKICAgICAgICAgICAgICAgICAgICBOQU1FX1NPVVJDRV9TSU1fUE5OCiAgICAgICAgICAgIH0pCiAgICBwdWJsaWMgQGludGVyZmFjZSBTaW1EaXNwbGF5TmFtZVNvdXJjZSB7fQoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHRoZSBjb2xvciBvZiBhIFNJTS4KICAgICAqIDxQPlR5cGU6IElOVEVHRVIgKGludCk8L1A+CiAgICAgKi8KICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgSFVFID0gU2ltSW5mby5DT0xVTU5fQ09MT1I7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgdGhlIHBob25lIG51bWJlciBvZiBhIFNJTS4KICAgICAqIDxQPlR5cGU6IFRFWFQgKFN0cmluZyk8L1A+CiAgICAgKi8KICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgTlVNQkVSID0gU2ltSW5mby5DT0xVTU5fTlVNQkVSOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHdoZXRoZXIgZGF0YSByb2FtaW5nIGlzIGVuYWJsZWQuCiAgICAgKiA8UD5UeXBlOiBJTlRFR0VSIChpbnQpPC9QPgogICAgICovCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIERBVEFfUk9BTUlORyA9IFNpbUluZm8uQ09MVU1OX0RBVEFfUk9BTUlORzsKCiAgICAvKiogSW5kaWNhdGVzIHRoYXQgZGF0YSByb2FtaW5nIGlzIGVuYWJsZWQgZm9yIGEgc3Vic2NyaXB0aW9uICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBEQVRBX1JPQU1JTkdfRU5BQkxFID0gU2ltSW5mby5EQVRBX1JPQU1JTkdfRU5BQkxFOwoKICAgIC8qKiBJbmRpY2F0ZXMgdGhhdCBkYXRhIHJvYW1pbmcgaXMgZGlzYWJsZWQgZm9yIGEgc3Vic2NyaXB0aW9uICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBEQVRBX1JPQU1JTkdfRElTQUJMRSA9IFNpbUluZm8uREFUQV9ST0FNSU5HX0RJU0FCTEU7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3Igc3Vic2NyaXB0aW9uIGNhcnJpZXIgaWQuCiAgICAgKiBAc2VlIFRlbGVwaG9ueU1hbmFnZXIjZ2V0U2ltQ2FycmllcklkKCkKICAgICAqIDxwPlR5cGU6IElOVEVHRVIgKGludCkgPC9wPgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0FSUklFUl9JRCA9IFNpbUluZm8uQ09MVU1OX0NBUlJJRVJfSUQ7CgogICAgLyoqCiAgICAgKiBAaGlkZSBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIEVIUExNTnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBzdWJzY3JpcHRpb24KICAgICAqIDxQPlR5cGU6IFRFWFQgKFN0cmluZyk8L1A+CiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIEVIUExNTlMgPSBTaW1JbmZvLkNPTFVNTl9FSFBMTU5TOwoKICAgIC8qKgogICAgICogQGhpZGUgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBIUExNTnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBzdWJzY3JpcHRpb24KICAgICAqIDxQPlR5cGU6IFRFWFQgKFN0cmluZyk8L1A+CiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIEhQTE1OUyA9IFNpbUluZm8uQ09MVU1OX0hQTE1OUzsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciB0aGUgTUNDIGFzc29jaWF0ZWQgd2l0aCBhIFNJTSwgc3RvcmVkIGFzIGEgc3RyaW5nLgogICAgICogPFA+VHlwZTogVEVYVCAoU3RyaW5nKTwvUD4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE1DQ19TVFJJTkcgPSBTaW1JbmZvLkNPTFVNTl9NQ0NfU1RSSU5HOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHRoZSBNTkMgYXNzb2NpYXRlZCB3aXRoIGEgU0lNLCBzdG9yZWQgYXMgYSBzdHJpbmcuCiAgICAgKiA8UD5UeXBlOiBURVhUIChTdHJpbmcpPC9QPgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgTU5DX1NUUklORyA9IFNpbUluZm8uQ09MVU1OX01OQ19TVFJJTkc7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgdGhlIE1DQyBhc3NvY2lhdGVkIHdpdGggYSBTSU0uCiAgICAgKiA8UD5UeXBlOiBJTlRFR0VSIChpbnQpPC9QPgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgTUNDID0gU2ltSW5mby5DT0xVTU5fTUNDOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHRoZSBNTkMgYXNzb2NpYXRlZCB3aXRoIGEgU0lNLgogICAgICogPFA+VHlwZTogSU5URUdFUiAoaW50KTwvUD4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE1OQyA9IFNpbUluZm8uQ09MVU1OX01OQzsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciB0aGUgaXNvIGNvdW50cnkgY29kZSBhc3NvY2lhdGVkIHdpdGggYSBTSU0uCiAgICAgKiA8UD5UeXBlOiBURVhUIChTdHJpbmcpPC9QPgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgSVNPX0NPVU5UUllfQ09ERSA9IFNpbUluZm8uQ09MVU1OX0lTT19DT1VOVFJZX0NPREU7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3Igd2hldGhlciBhIHN1YnNjcmlwdGlvbiBpcyBlbWJlZGRlZCAodGhhdCBpcywgcHJlc2VudCBvbiBhbgogICAgICogZVNJTSkuCiAgICAgKiA8cD5UeXBlOiBJTlRFR0VSIChpbnQpLCAxIGZvciBlbWJlZGRlZCBvciAwIGZvciBub24tZW1iZWRkZWQuCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBJU19FTUJFRERFRCA9IFNpbUluZm8uQ09MVU1OX0lTX0VNQkVEREVEOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIFNJTSBjYXJkIGlkZW50aWZpZXIuIEZvciBVSUNDIGNhcmQgaXQgaXMgdGhlIElDQ0lEIG9mIHRoZQogICAgICogY3VycmVudCBlbmFibGVkIHByb2ZpbGUgb24gdGhlIGNhcmQsIHdoaWxlIGZvciBlVUlDQyBjYXJkIGl0IGlzIHRoZSBFSUQgb2YgdGhlIGNhcmQuCiAgICAgKiA8UD5UeXBlOiBURVhUIChTdHJpbmcpPC9QPgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0FSRF9JRCA9IFNpbUluZm8uQ09MVU1OX0NBUkRfSUQ7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgdGhlIGVuY29kZWQge0BsaW5rIFVpY2NBY2Nlc3NSdWxlfXMgZnJvbQogICAgICoge0BsaW5rIFVpY2NBY2Nlc3NSdWxlI2VuY29kZVJ1bGVzfS4gT25seSBwcmVzZW50IGlmIHtAbGluayAjSVNfRU1CRURERUR9IGlzIDEuCiAgICAgKiA8cD5UWVBFOiBCTE9CCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBBQ0NFU1NfUlVMRVMgPSBTaW1JbmZvLkNPTFVNTl9BQ0NFU1NfUlVMRVM7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgdGhlIGVuY29kZWQge0BsaW5rIFVpY2NBY2Nlc3NSdWxlfXMgZnJvbQogICAgICoge0BsaW5rIFVpY2NBY2Nlc3NSdWxlI2VuY29kZVJ1bGVzfSBidXQgZm9yIHRoZSBydWxlcyB0aGF0IGNvbWUgZnJvbSBDYXJyaWVyQ29uZmlncy4KICAgICAqIE9ubHkgcHJlc2VudCBpZiB0aGVyZSBhcmUgYWNjZXNzIHJ1bGVzIGluIENhcnJpZXJDb25maWdzCiAgICAgKiA8cD5UWVBFOiBCTE9CCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBBQ0NFU1NfUlVMRVNfRlJPTV9DQVJSSUVSX0NPTkZJR1MgPQogICAgICAgICAgICBTaW1JbmZvLkNPTFVNTl9BQ0NFU1NfUlVMRVNfRlJPTV9DQVJSSUVSX0NPTkZJR1M7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBpZGVudGlmeWluZyB3aGV0aGVyIGFuIGVtYmVkZGVkIHN1YnNjcmlwdGlvbiBpcyBvbiBhIHJlbW92YWJsZQogICAgICogY2FyZC4gU3VjaCBzdWJzY3JpcHRpb25zIGFyZSBtYXJrZWQgaW5hY2Nlc3NpYmxlIGFzIHNvb24gYXMgdGhlIGN1cnJlbnQgY2FyZCBpcyByZW1vdmVkLgogICAgICogT3RoZXJ3aXNlLCB0aGV5IHdpbGwgcmVtYWluIGFjY2Vzc2libGUgdW5sZXNzIGV4cGxpY2l0bHkgZGVsZXRlZC4gT25seSBwcmVzZW50IGlmCiAgICAgKiB7QGxpbmsgI0lTX0VNQkVEREVEfSBpcyAxLgogICAgICogPHA+VFlQRTogSU5URUdFUiAoaW50KSwgMSBmb3IgcmVtb3ZhYmxlIG9yIDAgZm9yIG5vbi1yZW1vdmFibGUuCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBJU19SRU1PVkFCTEUgPSBTaW1JbmZvLkNPTFVNTl9JU19SRU1PVkFCTEU7CgogICAgLyoqCiAgICAgKiAgVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIGV4dHJlbWUgdGhyZWF0IGluIENCIHNldHRpbmdzCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQl9FWFRSRU1FX1RIUkVBVF9BTEVSVCA9CiAgICAgICAgICAgIFNpbUluZm8uQ09MVU1OX0NCX0VYVFJFTUVfVEhSRUFUX0FMRVJUOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHNldmVyZSB0aHJlYXQgaW4gQ0Igc2V0dGluZ3MKICAgICAqQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0JfU0VWRVJFX1RIUkVBVF9BTEVSVCA9IFNpbUluZm8uQ09MVU1OX0NCX1NFVkVSRV9USFJFQVRfQUxFUlQ7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgYW1iZXIgYWxlcnQgaW4gQ0Igc2V0dGluZ3MKICAgICAqQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0JfQU1CRVJfQUxFUlQgPSBTaW1JbmZvLkNPTFVNTl9DQl9BTUJFUl9BTEVSVDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBlbWVyZ2VuY3kgYWxlcnQgaW4gQ0Igc2V0dGluZ3MKICAgICAqQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0JfRU1FUkdFTkNZX0FMRVJUID0gU2ltSW5mby5DT0xVTU5fQ0JfRU1FUkdFTkNZX0FMRVJUOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIGFsZXJ0IHNvdW5kIGR1cmF0aW9uIGluIENCIHNldHRpbmdzCiAgICAgKkBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENCX0FMRVJUX1NPVU5EX0RVUkFUSU9OID0KICAgICAgICAgICAgU2ltSW5mby5DT0xVTU5fQ0JfQUxFUlRfU09VTkRfRFVSQVRJT047CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgYWxlcnQgcmVtaW5kZXIgaW50ZXJ2YWwgaW4gQ0Igc2V0dGluZ3MKICAgICAqQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0JfQUxFUlRfUkVNSU5ERVJfSU5URVJWQUwgPQogICAgICAgICAgICBTaW1JbmZvLkNPTFVNTl9DQl9BTEVSVF9SRU1JTkRFUl9JTlRFUlZBTDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBlbmFibGluZyB2aWJyYXRlIGluIENCIHNldHRpbmdzCiAgICAgKkBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENCX0FMRVJUX1ZJQlJBVEUgPSBTaW1JbmZvLkNPTFVNTl9DQl9BTEVSVF9WSUJSQVRFOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIGVuYWJsaW5nIGFsZXJ0IHNwZWVjaCBpbiBDQiBzZXR0aW5ncwogICAgICpAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQl9BTEVSVF9TUEVFQ0ggPSBTaW1JbmZvLkNPTFVNTl9DQl9BTEVSVF9TUEVFQ0g7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgRVRXUyB0ZXN0IGFsZXJ0IGluIENCIHNldHRpbmdzCiAgICAgKkBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENCX0VUV1NfVEVTVF9BTEVSVCA9IFNpbUluZm8uQ09MVU1OX0NCX0VUV1NfVEVTVF9BTEVSVDsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBlbmFibGUgY2hhbm5lbDUwIGFsZXJ0IGluIENCIHNldHRpbmdzCiAgICAgKkBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENCX0NIQU5ORUxfNTBfQUxFUlQgPSBTaW1JbmZvLkNPTFVNTl9DQl9DSEFOTkVMXzUwX0FMRVJUOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIENNQVMgdGVzdCBhbGVydCBpbiBDQiBzZXR0aW5ncwogICAgICpAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDQl9DTUFTX1RFU1RfQUxFUlQgPSBTaW1JbmZvLkNPTFVNTl9DQl9DTUFTX1RFU1RfQUxFUlQ7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgT3B0IG91dCBkaWFsb2cgaW4gQ0Igc2V0dGluZ3MKICAgICAqQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ0JfT1BUX09VVF9ESUFMT0cgPSBTaW1JbmZvLkNPTFVNTl9DQl9PUFRfT1VUX0RJQUxPRzsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBlbmFibGUgVm9sdGUuCiAgICAgKgogICAgICogSWYgdGhpcyBzZXR0aW5nIGlzIG5vdCBpbml0aWFsaXplZCAoc2V0IHRvIC0xKSAgdGhlbiB3ZSB1c2UgdGhlIENhcnJpZXIgQ29uZmlnIHZhbHVlCiAgICAgKiB7QGxpbmsgQ2FycmllckNvbmZpZ01hbmFnZXIjS0VZX0VOSEFOQ0VEXzRHX0xURV9PTl9CWV9ERUZBVUxUX0JPT0x9LgogICAgICpAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBFTkhBTkNFRF80R19NT0RFX0VOQUJMRUQgPQogICAgICAgICAgICBTaW1JbmZvLkNPTFVNTl9FTkhBTkNFRF80R19NT0RFX0VOQUJMRUQ7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgZW5hYmxlIFZUIChWaWRlbyBUZWxlcGhvbnkgb3ZlciBJTVMpCiAgICAgKkBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIFZUX0lNU19FTkFCTEVEID0gU2ltSW5mby5DT0xVTU5fVlRfSU1TX0VOQUJMRUQ7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgZW5hYmxlIFdpZmkgY2FsbGluZwogICAgICpAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBXRkNfSU1TX0VOQUJMRUQgPSBTaW1JbmZvLkNPTFVNTl9XRkNfSU1TX0VOQUJMRUQ7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgV2lmaSBjYWxsaW5nIG1vZGUKICAgICAqQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgV0ZDX0lNU19NT0RFID0gU2ltSW5mby5DT0xVTU5fV0ZDX0lNU19NT0RFOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIFdpZmkgY2FsbGluZyBtb2RlIGluIHJvYW1pbmcKICAgICAqQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgV0ZDX0lNU19ST0FNSU5HX01PREUgPSBTaW1JbmZvLkNPTFVNTl9XRkNfSU1TX1JPQU1JTkdfTU9ERTsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciBlbmFibGUgV2lmaSBjYWxsaW5nIGluIHJvYW1pbmcKICAgICAqQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgV0ZDX0lNU19ST0FNSU5HX0VOQUJMRUQgPSBTaW1JbmZvLkNPTFVNTl9XRkNfSU1TX1JPQU1JTkdfRU5BQkxFRDsKCiAgICAvKioKICAgICAqIERldGVybWluZXMgaWYgdGhlIHVzZXIgaGFzIGVuYWJsZWQgSU1TIFJDUyBVc2VyIENhcGFiaWxpdHkgRXhjaGFuZ2UgKFVDRSkgZm9yIHRoaXMKICAgICAqIHN1YnNjcmlwdGlvbi4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIElNU19SQ1NfVUNFX0VOQUJMRUQgPSBTaW1JbmZvLkNPTFVNTl9JTVNfUkNTX1VDRV9FTkFCTEVEOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIHdoZXRoZXIgYSBzdWJzY3JpcHRpb24gaXMgb3Bwb3J0dW5pc3RpYywgdGhhdCBpcywKICAgICAqIHdoZXRoZXIgdGhlIG5ldHdvcmsgaXQgY29ubmVjdHMgdG8gaXMgbGltaXRlZCBpbiBmdW5jdGlvbmFsaXR5IG9yIGNvdmVyYWdlLgogICAgICogRm9yIGV4YW1wbGUsIENCUlMuCiAgICAgKiA8cD5UeXBlOiBJTlRFR0VSIChpbnQpLCAxIGZvciBvcHBvcnR1bmlzdGljIG9yIDAgZm9yIG5vbi1vcHBvcnR1bmlzdGljLgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgSVNfT1BQT1JUVU5JU1RJQyA9IFNpbUluZm8uQ09MVU1OX0lTX09QUE9SVFVOSVNUSUM7CgogICAgLyoqCiAgICAgKiBUZWxlcGhvbnlQcm92aWRlciBjb2x1bW4gbmFtZSBmb3IgZ3JvdXAgSUQuIFN1YnNjcmlwdGlvbnMgd2l0aCBzYW1lIGdyb3VwIElECiAgICAgKiBhcmUgY29uc2lkZXJlZCBidW5kbGVkIHRvZ2V0aGVyLCBhbmQgc2hvdWxkIGJlaGF2ZSBhcyBhIHNpbmdsZSBzdWJzY3JpcHRpb24gYXQKICAgICAqIGNlcnRhaW4gc2NlbmFyaW9zLgogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIEdST1VQX1VVSUQgPSBTaW1JbmZvLkNPTFVNTl9HUk9VUF9VVUlEOwoKICAgIC8qKgogICAgICogVGVsZXBob255UHJvdmlkZXIgY29sdW1uIG5hbWUgZm9yIGdyb3VwIG93bmVyLiBJdCdzIHRoZSBwYWNrYWdlIG5hbWUgd2hvIGNyZWF0ZWQKICAgICAqIHRoZSBzdWJzY3JpcHRpb24gZ3JvdXAuCiAgICAgKgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgR1JPVVBfT1dORVIgPSBTaW1JbmZvLkNPTFVNTl9HUk9VUF9PV05FUjsKCiAgICAvKioKICAgICAqIFRlbGVwaG9ueVByb3ZpZGVyIGNvbHVtbiBuYW1lIGZvciB0aGUgcHJvZmlsZSBjbGFzcyBvZiBhIHN1YnNjcmlwdGlvbgogICAgICogT25seSBwcmVzZW50IGlmIHtAbGluayAjSVNfRU1CRURERUR9IGlzIDEuCiAgICAgKiA8UD5UeXBlOiBJTlRFR0VSIChpbnQpPC9QPgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgUFJPRklMRV9DTEFTUyA9IFNpbUluZm8uQ09MVU1OX1BST0ZJTEVfQ0xBU1M7CgogICAgLyoqCiAgICAgKiBQcm9maWxlIGNsYXNzIG9mIHRoZSBzdWJzY3JpcHRpb24KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBSZXRlbnRpb24oUmV0ZW50aW9uUG9saWN5LlNPVVJDRSkKICAgIEBJbnREZWYocHJlZml4ID0geyAiUFJPRklMRV9DTEFTU18iIH0sIHZhbHVlID0gewogICAgICAgICAgICBTaW1JbmZvLlBST0ZJTEVfQ0xBU1NfVEVTVElORywKICAgICAgICAgICAgU2ltSW5mby5QUk9GSUxFX0NMQVNTX1BST1ZJU0lPTklORywKICAgICAgICAgICAgU2ltSW5mby5QUk9GSUxFX0NMQVNTX09QRVJBVElPTkFMLAogICAgICAgICAgICBTaW1JbmZvLlBST0ZJTEVfQ0xBU1NfVU5TRVQsCiAgICB9KQogICAgcHVibGljIEBpbnRlcmZhY2UgUHJvZmlsZUNsYXNzIHt9CgogICAgLyoqCiAgICAgKiBBIHRlc3RpbmcgcHJvZmlsZSBjYW4gYmUgcHJlLWxvYWRlZCBvciBkb3dubG9hZGVkIG9udG8KICAgICAqIHRoZSBlVUlDQyBhbmQgcHJvdmlkZXMgY29ubmVjdGl2aXR5IHRvIHRlc3QgZXF1aXBtZW50CiAgICAgKiBmb3IgdGhlIHB1cnBvc2Ugb2YgdGVzdGluZyB0aGUgZGV2aWNlIGFuZCB0aGUgZVVJQ0MuIEl0CiAgICAgKiBpcyBub3QgaW50ZW5kZWQgdG8gc3RvcmUgYW55IG9wZXJhdG9yIGNyZWRlbnRpYWxzLgogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgUFJPRklMRV9DTEFTU19URVNUSU5HID0gU2ltSW5mby5QUk9GSUxFX0NMQVNTX1RFU1RJTkc7CgogICAgLyoqCiAgICAgKiBBIHByb3Zpc2lvbmluZyBwcm9maWxlIGlzIHByZS1sb2FkZWQgb250byB0aGUgZVVJQ0MgYW5kCiAgICAgKiBwcm92aWRlcyBjb25uZWN0aXZpdHkgdG8gYSBtb2JpbGUgbmV0d29yayBzb2xlbHkgZm9yIHRoZQogICAgICogcHVycG9zZSBvZiBwcm92aXNpb25pbmcgcHJvZmlsZXMuCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAU3lzdGVtQXBpCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBQUk9GSUxFX0NMQVNTX1BST1ZJU0lPTklORyA9IFNpbUluZm8uUFJPRklMRV9DTEFTU19QUk9WSVNJT05JTkc7CgogICAgLyoqCiAgICAgKiBBbiBvcGVyYXRpb25hbCBwcm9maWxlIGNhbiBiZSBwcmUtbG9hZGVkIG9yIGRvd25sb2FkZWQKICAgICAqIG9udG8gdGhlIGVVSUNDIGFuZCBwcm92aWRlcyBzZXJ2aWNlcyBwcm92aWRlZCBieSB0aGUKICAgICAqIG9wZXJhdG9yLgogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgUFJPRklMRV9DTEFTU19PUEVSQVRJT05BTCA9IFNpbUluZm8uUFJPRklMRV9DTEFTU19PUEVSQVRJT05BTDsKCiAgICAvKioKICAgICAqIFRoZSBwcm9maWxlIGNsYXNzIGlzIHVuc2V0LiBUaGlzIG9jY3VycyB3aGVuIHByb2ZpbGUgY2xhc3MKICAgICAqIGluZm8gaXMgbm90IGF2YWlsYWJsZS4gVGhlIHN1YnNjcmlwdGlvbiBlaXRoZXIgaGFzIG5vIHByb2ZpbGUKICAgICAqIG1ldGFkYXRhIG9yIHRoZSBwcm9maWxlIG1ldGFkYXRhIGRpZCBub3QgZW5jb2RlIHByb2ZpbGUgY2xhc3MuCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAU3lzdGVtQXBpCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIGludCBQUk9GSUxFX0NMQVNTX1VOU0VUID0gU2ltSW5mby5QUk9GSUxFX0NMQVNTX1VOU0VUOwoKICAgIC8qKgogICAgICogRGVmYXVsdCBwcm9maWxlIGNsYXNzCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAU3lzdGVtQXBpCiAgICBARGVwcmVjYXRlZAogICAgcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgUFJPRklMRV9DTEFTU19ERUZBVUxUID0gU2ltSW5mby5QUk9GSUxFX0NMQVNTX1VOU0VUOwoKICAgIC8qKgogICAgICogSU1TSSAoSW50ZXJuYXRpb25hbCBNb2JpbGUgU3Vic2NyaWJlciBJZGVudGl0eSkuCiAgICAgKiA8UD5UeXBlOiBURVhUIDwvUD4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIC8vVE9ETzogYWRkIEBTeXN0ZW1BcGkKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIElNU0kgPSBTaW1JbmZvLkNPTFVNTl9JTVNJOwoKICAgIC8qKgogICAgICogV2hldGhlciB1aWNjIGFwcGxpY2F0aW9ucyBpcyBzZXQgdG8gYmUgZW5hYmxlZCBvciBkaXNhYmxlZC4gQnkgZGVmYXVsdCBpdCdzIGVuYWJsZWQuCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBVSUNDX0FQUExJQ0FUSU9OU19FTkFCTEVEID0gU2ltSW5mby5DT0xVTU5fVUlDQ19BUFBMSUNBVElPTlNfRU5BQkxFRDsKCiAgICAvKioKICAgICAqIEluZGljYXRlIHdoaWNoIG5ldHdvcmsgdHlwZSBpcyBhbGxvd2VkLiBCeSBkZWZhdWx0IGl0J3MgZW5hYmxlZC4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIEFMTE9XRURfTkVUV09SS19UWVBFUyA9IFNpbUluZm8uQ09MVU1OX0FMTE9XRURfTkVUV09SS19UWVBFUzsKCiAgICAvKioKICAgICAqIEJyb2FkY2FzdCBBY3Rpb246IFRoZSB1c2VyIGhhcyBjaGFuZ2VkIG9uZSBvZiB0aGUgZGVmYXVsdCBzdWJzIHJlbGF0ZWQgdG8KICAgICAqIGRhdGEsIHBob25lIGNhbGxzLCBvciBzbXM8L3A+CiAgICAgKgogICAgICogVE9ETzogQ2hhbmdlIHRvIGEgbGlzdGVuZXIKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBTZGtDb25zdGFudChTZGtDb25zdGFudFR5cGUuQlJPQURDQVNUX0lOVEVOVF9BQ1RJT04pCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBTVUJfREVGQVVMVF9DSEFOR0VEX0FDVElPTiA9CiAgICAgICAgICAgICJhbmRyb2lkLmludGVudC5hY3Rpb24uU1VCX0RFRkFVTFRfQ0hBTkdFRCI7CgogICAgLyoqCiAgICAgKiBCcm9hZGNhc3QgQWN0aW9uOiBUaGUgZGVmYXVsdCBzdWJzY3JpcHRpb24gaGFzIGNoYW5nZWQuICBUaGlzIGhhcyB0aGUgZm9sbG93aW5nCiAgICAgKiBleHRyYSB2YWx1ZXM6PC9wPgogICAgICogVGhlIHtAbGluayAjRVhUUkFfU1VCU0NSSVBUSU9OX0lOREVYfSBleHRyYSBpbmRpY2F0ZXMgdGhlIGN1cnJlbnQgZGVmYXVsdCBzdWJzY3JpcHRpb24gaW5kZXgKICAgICAqLwogICAgQFNka0NvbnN0YW50KFNka0NvbnN0YW50VHlwZS5CUk9BRENBU1RfSU5URU5UX0FDVElPTikKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIEFDVElPTl9ERUZBVUxUX1NVQlNDUklQVElPTl9DSEFOR0VECiAgICAgICAgICAgID0gImFuZHJvaWQudGVsZXBob255LmFjdGlvbi5ERUZBVUxUX1NVQlNDUklQVElPTl9DSEFOR0VEIjsKCiAgICAvKioKICAgICAqIEJyb2FkY2FzdCBBY3Rpb246IFRoZSBkZWZhdWx0IHNtcyBzdWJzY3JpcHRpb24gaGFzIGNoYW5nZWQuICBUaGlzIGhhcyB0aGUgZm9sbG93aW5nCiAgICAgKiBleHRyYSB2YWx1ZXM6PC9wPgogICAgICoge0BsaW5rICNFWFRSQV9TVUJTQ1JJUFRJT05fSU5ERVh9IGV4dHJhIGluZGljYXRlcyB0aGUgY3VycmVudCBkZWZhdWx0IHNtcwogICAgICogc3Vic2NyaXB0aW9uIGluZGV4CiAgICAgKi8KICAgIEBTZGtDb25zdGFudChTZGtDb25zdGFudFR5cGUuQlJPQURDQVNUX0lOVEVOVF9BQ1RJT04pCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBBQ1RJT05fREVGQVVMVF9TTVNfU1VCU0NSSVBUSU9OX0NIQU5HRUQKICAgICAgICAgICAgPSAiYW5kcm9pZC50ZWxlcGhvbnkuYWN0aW9uLkRFRkFVTFRfU01TX1NVQlNDUklQVElPTl9DSEFOR0VEIjsKCiAgICAvKioKICAgICAqIEFjdGl2aXR5IEFjdGlvbjogRGlzcGxheSBVSSBmb3IgbWFuYWdpbmcgdGhlIGJpbGxpbmcgcmVsYXRpb25zaGlwIHBsYW5zCiAgICAgKiBiZXR3ZWVuIGEgY2FycmllciBhbmQgYSBzcGVjaWZpYyBzdWJzY3JpYmVyLgogICAgICogPHA+CiAgICAgKiBDYXJyaWVyIGFwcHMgYXJlIGVuY291cmFnZWQgdG8gaW1wbGVtZW50IHRoaXMgYWN0aXZpdHksIGFuZCB0aGUgT1Mgd2lsbAogICAgICogcHJvdmlkZSBhbiBhZmZvcmRhbmNlIHRvIHF1aWNrbHkgZW50ZXIgdGhpcyBhY3Rpdml0eSwgdHlwaWNhbGx5IHZpYQogICAgICogU2V0dGluZ3MuIFRoaXMgYWZmb3JkYW5jZSB3aWxsIG9ubHkgYmUgc2hvd24gd2hlbiB0aGUgY2FycmllciBhcHAgaXMKICAgICAqIGFjdGl2ZWx5IHByb3ZpZGluZyBzdWJzY3JpcHRpb24gcGxhbiBpbmZvcm1hdGlvbiB2aWEKICAgICAqIHtAbGluayAjc2V0U3Vic2NyaXB0aW9uUGxhbnMoaW50LCBMaXN0KX0uCiAgICAgKiA8cD4KICAgICAqIENvbnRhaW5zIHtAbGluayAjRVhUUkFfU1VCU0NSSVBUSU9OX0lOREVYfSB0byBpbmRpY2F0ZSB3aGljaCBzdWJzY3JpcHRpb24KICAgICAqIHRoZSB1c2VyIGlzIGludGVyZXN0ZWQgaW4uCiAgICAgKi8KICAgIEBTZGtDb25zdGFudChTZGtDb25zdGFudFR5cGUuQUNUSVZJVFlfSU5URU5UX0FDVElPTikKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIEFDVElPTl9NQU5BR0VfU1VCU0NSSVBUSU9OX1BMQU5TCiAgICAgICAgICAgID0gImFuZHJvaWQudGVsZXBob255LmFjdGlvbi5NQU5BR0VfU1VCU0NSSVBUSU9OX1BMQU5TIjsKCiAgICAvKioKICAgICAqIEJyb2FkY2FzdCBBY3Rpb246IFJlcXVlc3QgYSByZWZyZXNoIG9mIHRoZSBiaWxsaW5nIHJlbGF0aW9uc2hpcCBwbGFucwogICAgICogYmV0d2VlbiBhIGNhcnJpZXIgYW5kIGEgc3BlY2lmaWMgc3Vic2NyaWJlci4KICAgICAqIDxwPgogICAgICogQ2FycmllciBhcHBzIGFyZSBlbmNvdXJhZ2VkIHRvIGltcGxlbWVudCB0aGlzIHJlY2VpdmVyLCBhbmQgdGhlIE9TIHdpbGwKICAgICAqIHByb3ZpZGUgYW4gYWZmb3JkYW5jZSB0byByZXF1ZXN0IGEgcmVmcmVzaC4gVGhpcyBhZmZvcmRhbmNlIHdpbGwgb25seSBiZQogICAgICogc2hvd24gd2hlbiB0aGUgY2FycmllciBhcHAgaXMgYWN0aXZlbHkgcHJvdmlkaW5nIHN1YnNjcmlwdGlvbiBwbGFuCiAgICAgKiBpbmZvcm1hdGlvbiB2aWEge0BsaW5rICNzZXRTdWJzY3JpcHRpb25QbGFucyhpbnQsIExpc3QpfS4KICAgICAqIDxwPgogICAgICogQ29udGFpbnMge0BsaW5rICNFWFRSQV9TVUJTQ1JJUFRJT05fSU5ERVh9IHRvIGluZGljYXRlIHdoaWNoIHN1YnNjcmlwdGlvbgogICAgICogdGhlIHVzZXIgaXMgaW50ZXJlc3RlZCBpbi4KICAgICAqIDxwPgogICAgICogUmVjZWl2ZXJzIHNob3VsZCBwcm90ZWN0IHRoZW1zZWx2ZXMgYnkgY2hlY2tpbmcgdGhhdCB0aGUgc2VuZGVyIGhvbGRzIHRoZQogICAgICoge0Bjb2RlIGFuZHJvaWQucGVybWlzc2lvbi5NQU5BR0VfU1VCU0NSSVBUSU9OX1BMQU5TfSBwZXJtaXNzaW9uLgogICAgICovCiAgICBAU2RrQ29uc3RhbnQoU2RrQ29uc3RhbnRUeXBlLkJST0FEQ0FTVF9JTlRFTlRfQUNUSU9OKQogICAgcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgQUNUSU9OX1JFRlJFU0hfU1VCU0NSSVBUSU9OX1BMQU5TCiAgICAgICAgICAgID0gImFuZHJvaWQudGVsZXBob255LmFjdGlvbi5SRUZSRVNIX1NVQlNDUklQVElPTl9QTEFOUyI7CgogICAgLyoqCiAgICAgKiBCcm9hZGNhc3QgQWN0aW9uOiBUaGUgYmlsbGluZyByZWxhdGlvbnNoaXAgcGxhbnMgYmV0d2VlbiBhIGNhcnJpZXIgYW5kIGEKICAgICAqIHNwZWNpZmljIHN1YnNjcmliZXIgaGFzIGNoYW5nZWQuCiAgICAgKiA8cD4KICAgICAqIENvbnRhaW5zIHtAbGluayAjRVhUUkFfU1VCU0NSSVBUSU9OX0lOREVYfSB0byBpbmRpY2F0ZSB3aGljaCBzdWJzY3JpcHRpb24KICAgICAqIGNoYW5nZWQuCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAU3lzdGVtQXBpCiAgICBAU2RrQ29uc3RhbnQoU2RrQ29uc3RhbnRUeXBlLkJST0FEQ0FTVF9JTlRFTlRfQUNUSU9OKQogICAgQFJlcXVpcmVzUGVybWlzc2lvbihhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uTUFOQUdFX1NVQlNDUklQVElPTl9QTEFOUykKICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIEFDVElPTl9TVUJTQ1JJUFRJT05fUExBTlNfQ0hBTkdFRAogICAgICAgICAgICA9ICJhbmRyb2lkLnRlbGVwaG9ueS5hY3Rpb24uU1VCU0NSSVBUSU9OX1BMQU5TX0NIQU5HRUQiOwoKICAgIC8qKgogICAgICogSW50ZWdlciBleHRyYSB1c2VkIHdpdGgge0BsaW5rICNBQ1RJT05fREVGQVVMVF9TVUJTQ1JJUFRJT05fQ0hBTkdFRH0gYW5kCiAgICAgKiB7QGxpbmsgI0FDVElPTl9ERUZBVUxUX1NNU19TVUJTQ1JJUFRJT05fQ0hBTkdFRH0gdG8gaW5kaWNhdGUgdGhlIHN1YnNjcmlwdGlvbgogICAgICogd2hpY2ggaGFzIGNoYW5nZWQuCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIEVYVFJBX1NVQlNDUklQVElPTl9JTkRFWCA9ICJhbmRyb2lkLnRlbGVwaG9ueS5leHRyYS5TVUJTQ1JJUFRJT05fSU5ERVgiOwoKICAgIC8qKgogICAgICogSW50ZWdlciBleHRyYSB0byBzcGVjaWZ5IFNJTSBzbG90IGluZGV4LgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBFWFRSQV9TTE9UX0lOREVYID0gImFuZHJvaWQudGVsZXBob255LmV4dHJhLlNMT1RfSU5ERVgiOwoKICAgIHByaXZhdGUgZmluYWwgQ29udGV4dCBtQ29udGV4dDsKCiAgICAvLyBDYWNoZSBvZiBSZXNvdXJjZSB0aGF0IGhhcyBiZWVuIGNyZWF0ZWQgaW4gZ2V0UmVzb3VyY2VzRm9yU3ViSWQuIEtleSBpcyBhIFBhaXIgY29udGFpbmluZwogICAgLy8gdGhlIENvbnRleHQgYW5kIHN1YklkLgogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgTWFwPFBhaXI8Q29udGV4dCwgSW50ZWdlcj4sIFJlc291cmNlcz4gc1Jlc291cmNlc0NhY2hlID0KICAgICAgICAgICAgbmV3IENvbmN1cnJlbnRIYXNoTWFwPD4oKTsKCiAgICAvKioKICAgICAqIEEgbGlzdGVuZXIgY2xhc3MgZm9yIG1vbml0b3JpbmcgY2hhbmdlcyB0byB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mb30gcmVjb3Jkcy4KICAgICAqIDxwPgogICAgICogT3ZlcnJpZGUgdGhlIG9uU3Vic2NyaXB0aW9uc0NoYW5nZWQgbWV0aG9kIGluIHRoZSBvYmplY3QgdGhhdCBleHRlbmRzIHRoaXMKICAgICAqIGNsYXNzIGFuZCBwYXNzIGl0IHRvIHtAbGluayAjYWRkT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyKE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcil9CiAgICAgKiB0byByZWdpc3RlciB5b3VyIGxpc3RlbmVyIGFuZCB0byB1bnJlZ2lzdGVyIGludm9rZQogICAgICoge0BsaW5rICNyZW1vdmVPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyKX0KICAgICAqIDxwPgogICAgICogUGVybWlzc2lvbnMgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUEhPTkVfU1RBVEUgaXMgcmVxdWlyZWQKICAgICAqIGZvciAjb25TdWJzY3JpcHRpb25zQ2hhbmdlZCB0byBiZSBpbnZva2VkLgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lciB7CiAgICAgICAgcHJpdmF0ZSBjbGFzcyBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJIYW5kbGVyIGV4dGVuZHMgSGFuZGxlciB7CiAgICAgICAgICAgIE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lckhhbmRsZXIoKSB7CiAgICAgICAgICAgICAgICBzdXBlcigpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJIYW5kbGVyKExvb3BlciBsb29wZXIpIHsKICAgICAgICAgICAgICAgIHN1cGVyKGxvb3Blcik7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIFBvc3RlZCBleGVjdXRvciBjYWxsYmFjayBvbiB0aGUgaGFuZGxlciBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiBsb29wZXIuCiAgICAgICAgICogVGhlIGxvb3BlciBjYW4gYmUgdGhlIGNhbGxpbmcgdGhyZWFkJ3MgbG9vcGVyIG9yIHRoZSBsb29wZXIgcGFzc2VkIGZyb20gdGhlCiAgICAgICAgICogY29uc3RydWN0b3Ige0BsaW5rICNPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoTG9vcGVyKX0uCiAgICAgICAgICovCiAgICAgICAgcHJpdmF0ZSBmaW5hbCBIYW5kbGVyRXhlY3V0b3IgbUV4ZWN1dG9yOwoKICAgICAgICAvKioKICAgICAgICAgKiBAaGlkZQogICAgICAgICAqLwogICAgICAgIHB1YmxpYyBIYW5kbGVyRXhlY3V0b3IgZ2V0SGFuZGxlckV4ZWN1dG9yKCkgewogICAgICAgICAgICByZXR1cm4gbUV4ZWN1dG9yOwogICAgICAgIH0KCiAgICAgICAgcHVibGljIE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcigpIHsKICAgICAgICAgICAgbUV4ZWN1dG9yID0gbmV3IEhhbmRsZXJFeGVjdXRvcihuZXcgT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVySGFuZGxlcigpKTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIEFsbG93IGEgbGlzdGVuZXIgdG8gYmUgY3JlYXRlZCB3aXRoIGEgY3VzdG9tIGxvb3BlcgogICAgICAgICAqIEBwYXJhbSBsb29wZXIgdGhlIGxvb3BlciB0aGF0IHRoZSB1bmRlcmxpbmluZyBoYW5kbGVyIHNob3VsZCBydW4gb24KICAgICAgICAgKiBAaGlkZQogICAgICAgICAqLwogICAgICAgIHB1YmxpYyBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoTG9vcGVyIGxvb3BlcikgewogICAgICAgICAgICBtRXhlY3V0b3IgPSBuZXcgSGFuZGxlckV4ZWN1dG9yKG5ldyBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJIYW5kbGVyKGxvb3BlcikpOwogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICogQ2FsbGJhY2sgaW52b2tlZCB3aGVuIHRoZXJlIGlzIGFueSBjaGFuZ2UgdG8gYW55IFN1YnNjcmlwdGlvbkluZm8sIGFzIHdlbGwgYXMgb25jZSBvbgogICAgICAgICAqIHJlZ2lzdGVyaW5nIGZvciBjaGFuZ2VzIHdpdGgge0BsaW5rICNhZGRPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJ9LiBUeXBpY2FsbHkKICAgICAgICAgKiB0aGlzIG1ldGhvZCB3b3VsZCBpbnZva2Uge0BsaW5rICNnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvTGlzdH0KICAgICAgICAgKi8KICAgICAgICBwdWJsaWMgdm9pZCBvblN1YnNjcmlwdGlvbnNDaGFuZ2VkKCkgewogICAgICAgICAgICBpZiAoREJHKSBsb2coIm9uU3Vic2NyaXB0aW9uc0NoYW5nZWQ6IE5PVCBPVkVSUklEREVOIik7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBDYWxsYmFjayBpbnZva2VkIHdoZW4ge0BsaW5rIFN1YnNjcmlwdGlvbk1hbmFnZXIjYWRkT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyKAogICAgICAgICAqIEV4ZWN1dG9yLCBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIpfSBvcgogICAgICAgICAqIHtAbGluayBTdWJzY3JpcHRpb25NYW5hZ2VyI2FkZE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcigKICAgICAgICAgKiBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIpfSBmYWlscyB0byBjb21wbGV0ZSBkdWUgdG8gdGhlCiAgICAgICAgICoge0BsaW5rIENvbnRleHQjVEVMRVBIT05ZX1JFR0lTVFJZX1NFUlZJQ0V9IGJlaW5nIHVuYXZhaWxhYmxlLgogICAgICAgICAqIEBoaWRlCiAgICAgICAgICovCiAgICAgICAgcHVibGljIHZvaWQgb25BZGRMaXN0ZW5lckZhaWxlZCgpIHsKICAgICAgICAgICAgUmxvZy53KExPR19UQUcsICJvbkFkZExpc3RlbmVyRmFpbGVkIG5vdCBvdmVycmlkZGVuIik7CiAgICAgICAgfQoKICAgICAgICBwcml2YXRlIHZvaWQgbG9nKFN0cmluZyBzKSB7CiAgICAgICAgICAgIFJsb2cuZChMT0dfVEFHLCBzKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqIEBoaWRlICovCiAgICBAVW5zdXBwb3J0ZWRBcHBVc2FnZQogICAgcHVibGljIFN1YnNjcmlwdGlvbk1hbmFnZXIoQ29udGV4dCBjb250ZXh0KSB7CiAgICAgICAgaWYgKERCRykgbG9nZCgiU3Vic2NyaXB0aW9uTWFuYWdlciBjcmVhdGVkIik7CiAgICAgICAgbUNvbnRleHQgPSBjb250ZXh0OwogICAgfQoKICAgIHByaXZhdGUgTmV0d29ya1BvbGljeU1hbmFnZXIgZ2V0TmV0d29ya1BvbGljeU1hbmFnZXIoKSB7CiAgICAgICAgcmV0dXJuIChOZXR3b3JrUG9saWN5TWFuYWdlcikgbUNvbnRleHQKICAgICAgICAgICAgICAgIC5nZXRTeXN0ZW1TZXJ2aWNlKENvbnRleHQuTkVUV09SS19QT0xJQ1lfU0VSVklDRSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGVwcmVjYXRlZCBkZXZlbG9wZXJzIHNob3VsZCBhbHdheXMgb2J0YWluIHJlZmVyZW5jZXMgZGlyZWN0bHkgZnJvbQogICAgICogICAgICAgICAgICAge0BsaW5rIENvbnRleHQjZ2V0U3lzdGVtU2VydmljZShDbGFzcyl9LgogICAgICovCiAgICBARGVwcmVjYXRlZAogICAgcHVibGljIHN0YXRpYyBTdWJzY3JpcHRpb25NYW5hZ2VyIGZyb20oQ29udGV4dCBjb250ZXh0KSB7CiAgICAgICAgcmV0dXJuIChTdWJzY3JpcHRpb25NYW5hZ2VyKSBjb250ZXh0CiAgICAgICAgICAgICAgICAuZ2V0U3lzdGVtU2VydmljZShDb250ZXh0LlRFTEVQSE9OWV9TVUJTQ1JJUFRJT05fU0VSVklDRSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWdpc3RlciBmb3IgY2hhbmdlcyB0byB0aGUgbGlzdCBvZiBhY3RpdmUge0BsaW5rIFN1YnNjcmlwdGlvbkluZm99IHJlY29yZHMgb3IgdG8gdGhlCiAgICAgKiBpbmRpdmlkdWFsIHJlY29yZHMgdGhlbXNlbHZlcy4gV2hlbiBhIGNoYW5nZSBvY2N1cnMgdGhlIG9uU3Vic2NyaXB0aW9uc0NoYW5nZWQgbWV0aG9kIG9mCiAgICAgKiB0aGUgbGlzdGVuZXIgd2lsbCBiZSBpbnZva2VkIGltbWVkaWF0ZWx5IGlmIHRoZXJlIGhhcyBiZWVuIGEgbm90aWZpY2F0aW9uLiBUaGUKICAgICAqIG9uU3Vic2NyaXB0aW9uQ2hhbmdlZCBtZXRob2Qgd2lsbCBhbHNvIGJlIHRyaWdnZXJlZCBvbmNlIGluaXRpYWxseSB3aGVuIGNhbGxpbmcgdGhpcwogICAgICogZnVuY3Rpb24uCiAgICAgKgogICAgICogQHBhcmFtIGxpc3RlbmVyIGFuIGluc3RhbmNlIG9mIHtAbGluayBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJ9IHdpdGgKICAgICAqICAgICAgICAgICAgICAgICBvblN1YnNjcmlwdGlvbnNDaGFuZ2VkIG92ZXJyaWRkZW4uCiAgICAgKi8KICAgIHB1YmxpYyB2b2lkIGFkZE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcihPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIgbGlzdGVuZXIpIHsKICAgICAgICBpZiAobGlzdGVuZXIgPT0gbnVsbCkgcmV0dXJuOwogICAgICAgIGFkZE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcihsaXN0ZW5lci5tRXhlY3V0b3IsIGxpc3RlbmVyKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJlZ2lzdGVyIGZvciBjaGFuZ2VzIHRvIHRoZSBsaXN0IG9mIGFjdGl2ZSB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mb30gcmVjb3JkcyBvciB0byB0aGUKICAgICAqIGluZGl2aWR1YWwgcmVjb3JkcyB0aGVtc2VsdmVzLiBXaGVuIGEgY2hhbmdlIG9jY3VycyB0aGUgb25TdWJzY3JpcHRpb25zQ2hhbmdlZCBtZXRob2Qgb2YKICAgICAqIHRoZSBsaXN0ZW5lciB3aWxsIGJlIGludm9rZWQgaW1tZWRpYXRlbHkgaWYgdGhlcmUgaGFzIGJlZW4gYSBub3RpZmljYXRpb24uIFRoZQogICAgICogb25TdWJzY3JpcHRpb25DaGFuZ2VkIG1ldGhvZCB3aWxsIGFsc28gYmUgdHJpZ2dlcmVkIG9uY2UgaW5pdGlhbGx5IHdoZW4gY2FsbGluZyB0aGlzCiAgICAgKiBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcn0gd2l0aAogICAgICogICAgICAgICAgICAgICAgIG9uU3Vic2NyaXB0aW9uc0NoYW5nZWQgb3ZlcnJpZGRlbi4KICAgICAqIEBwYXJhbSBleGVjdXRvciB0aGUgZXhlY3V0b3IgdGhhdCB3aWxsIGV4ZWN1dGUgY2FsbGJhY2tzLgogICAgICovCiAgICBwdWJsaWMgdm9pZCBhZGRPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoCiAgICAgICAgICAgIEBOb25OdWxsIEBDYWxsYmFja0V4ZWN1dG9yIEV4ZWN1dG9yIGV4ZWN1dG9yLAogICAgICAgICAgICBATm9uTnVsbCBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIgbGlzdGVuZXIpIHsKICAgICAgICBTdHJpbmcgcGtnTmFtZSA9IG1Db250ZXh0ICE9IG51bGwgPyBtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCkgOiAiPHVua25vd24+IjsKICAgICAgICBpZiAoREJHKSB7CiAgICAgICAgICAgIGxvZ2QoInJlZ2lzdGVyIE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lciBwa2dOYW1lPSIgKyBwa2dOYW1lCiAgICAgICAgICAgICAgICAgICAgKyAiIGxpc3RlbmVyPSIgKyBsaXN0ZW5lcik7CiAgICAgICAgfQogICAgICAgIC8vIFdlIHVzZSB0aGUgVGVsZXBob255UmVnaXN0cnkgYXMgaXQgcnVucyBpbiB0aGUgc3lzdGVtIGFuZCB0aHVzIGlzIGFsd2F5cwogICAgICAgIC8vIGF2YWlsYWJsZS4gV2hlcmUgYXMgU3Vic2NyaXB0aW9uQ29udHJvbGxlciBjb3VsZCBjcmFzaCBhbmQgbm90IGJlIGF2YWlsYWJsZQogICAgICAgIFRlbGVwaG9ueVJlZ2lzdHJ5TWFuYWdlciB0ZWxlcGhvbnlSZWdpc3RyeU1hbmFnZXIgPSAoVGVsZXBob255UmVnaXN0cnlNYW5hZ2VyKQogICAgICAgICAgICAgICAgbUNvbnRleHQuZ2V0U3lzdGVtU2VydmljZShDb250ZXh0LlRFTEVQSE9OWV9SRUdJU1RSWV9TRVJWSUNFKTsKICAgICAgICBpZiAodGVsZXBob255UmVnaXN0cnlNYW5hZ2VyICE9IG51bGwpIHsKICAgICAgICAgICAgdGVsZXBob255UmVnaXN0cnlNYW5hZ2VyLmFkZE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcihsaXN0ZW5lciwKICAgICAgICAgICAgICAgICAgICBleGVjdXRvcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gSWYgdGhlIHRlbGVwaG9ueSByZWdpc3RyeSBpc24ndCBhdmFpbGFibGUsIHdlIHdpbGwgaW5mb3JtIHRoZSBjYWxsZXIgb24gdGhlaXIKICAgICAgICAgICAgLy8gbGlzdGVuZXIgdGhhdCBpdCBmYWlsZWQgc28gdGhleSBjYW4gdHJ5IHRvIHJlLXJlZ2lzdGVyLgogICAgICAgICAgICBsb2dlKCJhZGRPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXI6IHBrZ25hbWU9IiArIHBrZ05hbWUgKyAiIGZhaWxlZCB0byBiZSBhZGRlZCAiCiAgICAgICAgICAgICAgICAgICAgKyAiIGR1ZSB0byBURUxFUEhPTllfUkVHSVNUUllfU0VSVklDRSBiZWluZyB1bmF2YWlsYWJsZS4iKTsKICAgICAgICAgICAgZXhlY3V0b3IuZXhlY3V0ZSgoKSAtPiBsaXN0ZW5lci5vbkFkZExpc3RlbmVyRmFpbGVkKCkpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFVucmVnaXN0ZXIgdGhlIHtAbGluayBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJ9LiBUaGlzIGlzIG5vdCBzdHJpY3RseSBuZWNlc3NhcnkKICAgICAqIGFzIHRoZSBsaXN0ZW5lciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgdW5yZWdpc3RlcmVkIGlmIGFuIGF0dGVtcHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lcgogICAgICogZmFpbHMuCiAgICAgKgogICAgICogQHBhcmFtIGxpc3RlbmVyIHRoYXQgaXMgdG8gYmUgdW5yZWdpc3RlcmVkLgogICAgICovCiAgICBwdWJsaWMgdm9pZCByZW1vdmVPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyIGxpc3RlbmVyKSB7CiAgICAgICAgaWYgKGxpc3RlbmVyID09IG51bGwpIHJldHVybjsKICAgICAgICBTdHJpbmcgcGtnRm9yRGVidWcgPSBtQ29udGV4dCAhPSBudWxsID8gbUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpIDogIjx1bmtub3duPiI7CiAgICAgICAgaWYgKERCRykgewogICAgICAgICAgICBsb2dkKCJ1bnJlZ2lzdGVyIE9uU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lciBwa2dGb3JEZWJ1Zz0iICsgcGtnRm9yRGVidWcKICAgICAgICAgICAgICAgICAgICArICIgbGlzdGVuZXI9IiArIGxpc3RlbmVyKTsKICAgICAgICB9CiAgICAgICAgLy8gV2UgdXNlIHRoZSBUZWxlcGhvbnlSZWdpc3RyeSBhcyBpdCBydW5zIGluIHRoZSBzeXN0ZW0gYW5kIHRodXMgaXMgYWx3YXlzCiAgICAgICAgLy8gYXZhaWxhYmxlIHdoZXJlIGFzIFN1YnNjcmlwdGlvbkNvbnRyb2xsZXIgY291bGQgY3Jhc2ggYW5kIG5vdCBiZSBhdmFpbGFibGUKICAgICAgICBUZWxlcGhvbnlSZWdpc3RyeU1hbmFnZXIgdGVsZXBob255UmVnaXN0cnlNYW5hZ2VyID0gKFRlbGVwaG9ueVJlZ2lzdHJ5TWFuYWdlcikKICAgICAgICAgICAgICAgIG1Db250ZXh0LmdldFN5c3RlbVNlcnZpY2UoQ29udGV4dC5URUxFUEhPTllfUkVHSVNUUllfU0VSVklDRSk7CiAgICAgICAgaWYgKHRlbGVwaG9ueVJlZ2lzdHJ5TWFuYWdlciAhPSBudWxsKSB7CiAgICAgICAgICAgIHRlbGVwaG9ueVJlZ2lzdHJ5TWFuYWdlci5yZW1vdmVPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIobGlzdGVuZXIpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEEgbGlzdGVuZXIgY2xhc3MgZm9yIG1vbml0b3JpbmcgY2hhbmdlcyB0byB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mb30gcmVjb3JkcyBvZiBvcHBvcnR1bmlzdGljCiAgICAgKiBzdWJzY3JpcHRpb25zLgogICAgICogPHA+CiAgICAgKiBPdmVycmlkZSB0aGUgb25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWQgbWV0aG9kIGluIHRoZSBvYmplY3QgdGhhdCBleHRlbmRzIHRoaXMKICAgICAqIG9yIHtAbGluayAjYWRkT25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcigKICAgICAqIEV4ZWN1dG9yLCBPbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyKX0KICAgICAqIHRvIHJlZ2lzdGVyIHlvdXIgbGlzdGVuZXIgYW5kIHRvIHVucmVnaXN0ZXIgaW52b2tlCiAgICAgKiB7QGxpbmsgI3JlbW92ZU9uT3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoCiAgICAgKiBPbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyKX0KICAgICAqIDxwPgogICAgICogUGVybWlzc2lvbnMgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUEhPTkVfU1RBVEUgaXMgcmVxdWlyZWQKICAgICAqIGZvciAjb25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWQgdG8gYmUgaW52b2tlZC4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBjbGFzcyBPbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyIHsKICAgICAgICAvKioKICAgICAgICAgKiBDYWxsYmFjayBpbnZva2VkIHdoZW4gdGhlcmUgaXMgYW55IGNoYW5nZSB0byBhbnkgU3Vic2NyaXB0aW9uSW5mby4gVHlwaWNhbGx5CiAgICAgICAgICogdGhpcyBtZXRob2Qgd291bGQgaW52b2tlIHtAbGluayAjZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mb0xpc3R9CiAgICAgICAgICovCiAgICAgICAgcHVibGljIHZvaWQgb25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWQoKSB7CiAgICAgICAgICAgIGlmIChEQkcpIGxvZygib25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWQ6IE5PVCBPVkVSUklEREVOIik7CiAgICAgICAgfQoKICAgICAgICBwcml2YXRlIHZvaWQgbG9nKFN0cmluZyBzKSB7CiAgICAgICAgICAgIFJsb2cuZChMT0dfVEFHLCBzKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWdpc3RlciBmb3IgY2hhbmdlcyB0byB0aGUgbGlzdCBvZiBvcHBvcnR1bmlzdGljIHN1YnNjcmlwdGlvbiByZWNvcmRzIG9yIHRvIHRoZQogICAgICogaW5kaXZpZHVhbCByZWNvcmRzIHRoZW1zZWx2ZXMuIFdoZW4gYSBjaGFuZ2Ugb2NjdXJzIHRoZSBvbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZAogICAgICogbWV0aG9kIG9mIHRoZSBsaXN0ZW5lciB3aWxsIGJlIGludm9rZWQgaW1tZWRpYXRlbHkgaWYgdGhlcmUgaGFzIGJlZW4gYSBub3RpZmljYXRpb24uCiAgICAgKgogICAgICogQHBhcmFtIGxpc3RlbmVyIGFuIGluc3RhbmNlIG9mIHtAbGluayBPbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyfSB3aXRoCiAgICAgKiAgICAgICAgICAgICAgICAgb25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWQgb3ZlcnJpZGRlbi4KICAgICAqLwogICAgcHVibGljIHZvaWQgYWRkT25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcigKICAgICAgICAgICAgQE5vbk51bGwgQENhbGxiYWNrRXhlY3V0b3IgRXhlY3V0b3IgZXhlY3V0b3IsCiAgICAgICAgICAgIEBOb25OdWxsIE9uT3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIgbGlzdGVuZXIpIHsKICAgICAgICBpZiAoZXhlY3V0b3IgPT0gbnVsbCB8fCBsaXN0ZW5lciA9PSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIFN0cmluZyBwa2dOYW1lID0gbUNvbnRleHQgIT0gbnVsbCA/IG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSA6ICI8dW5rbm93bj4iOwogICAgICAgIGlmIChEQkcpIHsKICAgICAgICAgICAgbG9nZCgicmVnaXN0ZXIgYWRkT25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lciBwa2dOYW1lPSIgKyBwa2dOYW1lCiAgICAgICAgICAgICAgICAgICAgKyAiIGxpc3RlbmVyPSIgKyBsaXN0ZW5lcik7CiAgICAgICAgfQoKICAgICAgICAvLyBXZSB1c2UgdGhlIFRlbGVwaG9ueVJlZ2lzdHJ5IGFzIGl0IHJ1bnMgaW4gdGhlIHN5c3RlbSBhbmQgdGh1cyBpcyBhbHdheXMKICAgICAgICAvLyBhdmFpbGFibGUgd2hlcmUgYXMgU3Vic2NyaXB0aW9uQ29udHJvbGxlciBjb3VsZCBjcmFzaCBhbmQgbm90IGJlIGF2YWlsYWJsZQogICAgICAgIFRlbGVwaG9ueVJlZ2lzdHJ5TWFuYWdlciB0ZWxlcGhvbnlSZWdpc3RyeU1hbmFnZXIgPSAoVGVsZXBob255UmVnaXN0cnlNYW5hZ2VyKQogICAgICAgICAgICAgICAgbUNvbnRleHQuZ2V0U3lzdGVtU2VydmljZShDb250ZXh0LlRFTEVQSE9OWV9SRUdJU1RSWV9TRVJWSUNFKTsKICAgICAgICBpZiAodGVsZXBob255UmVnaXN0cnlNYW5hZ2VyICE9IG51bGwpIHsKICAgICAgICAgICAgdGVsZXBob255UmVnaXN0cnlNYW5hZ2VyLmFkZE9uT3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIoCiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIsIGV4ZWN1dG9yKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBVbnJlZ2lzdGVyIHRoZSB7QGxpbmsgT25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcn0gdGhhdCBpcyBjdXJyZW50bHkKICAgICAqIGxpc3RlbmluZyBvcHBvcnR1bmlzdGljIHN1YnNjcmlwdGlvbnMgY2hhbmdlLiBUaGlzIGlzIG5vdCBzdHJpY3RseSBuZWNlc3NhcnkKICAgICAqIGFzIHRoZSBsaXN0ZW5lciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgdW5yZWdpc3RlcmVkIGlmIGFuIGF0dGVtcHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lcgogICAgICogZmFpbHMuCiAgICAgKgogICAgICogQHBhcmFtIGxpc3RlbmVyIHRoYXQgaXMgdG8gYmUgdW5yZWdpc3RlcmVkLgogICAgICovCiAgICBwdWJsaWMgdm9pZCByZW1vdmVPbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyKAogICAgICAgICAgICBATm9uTnVsbCBPbk9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyIGxpc3RlbmVyKSB7CiAgICAgICAgUHJlY29uZGl0aW9ucy5jaGVja05vdE51bGwobGlzdGVuZXIsICJsaXN0ZW5lciBjYW5ub3QgYmUgbnVsbCIpOwogICAgICAgIFN0cmluZyBwa2dGb3JEZWJ1ZyA9IG1Db250ZXh0ICE9IG51bGwgPyBtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCkgOiAiPHVua25vd24+IjsKICAgICAgICBpZiAoREJHKSB7CiAgICAgICAgICAgIGxvZ2QoInVucmVnaXN0ZXIgT25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lciBwa2dGb3JEZWJ1Zz0iCiAgICAgICAgICAgICAgICAgICAgKyBwa2dGb3JEZWJ1ZyArICIgbGlzdGVuZXI9IiArIGxpc3RlbmVyKTsKICAgICAgICB9CiAgICAgICAgVGVsZXBob255UmVnaXN0cnlNYW5hZ2VyIHRlbGVwaG9ueVJlZ2lzdHJ5TWFuYWdlciA9IChUZWxlcGhvbnlSZWdpc3RyeU1hbmFnZXIpCiAgICAgICAgICAgICAgICBtQ29udGV4dC5nZXRTeXN0ZW1TZXJ2aWNlKENvbnRleHQuVEVMRVBIT05ZX1JFR0lTVFJZX1NFUlZJQ0UpOwogICAgICAgIGlmICh0ZWxlcGhvbnlSZWdpc3RyeU1hbmFnZXIgIT0gbnVsbCkgewogICAgICAgICAgICB0ZWxlcGhvbnlSZWdpc3RyeU1hbmFnZXIucmVtb3ZlT25PcHBvcnR1bmlzdGljU3Vic2NyaXB0aW9uc0NoYW5nZWRMaXN0ZW5lcihsaXN0ZW5lcik7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBhY3RpdmUgU3Vic2NyaXB0aW9uSW5mbyB3aXRoIHRoZSBpbnB1dCBzdWJJZC4KICAgICAqCiAgICAgKiA8cD5SZXF1aXJlcyBQZXJtaXNzaW9uOiB7QGxpbmsgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uI1JFQURfUEhPTkVfU1RBVEUgUkVBRF9QSE9ORV9TVEFURX0KICAgICAqIG9yIHRoYXQgdGhlIGNhbGxpbmcgYXBwIGhhcyBjYXJyaWVyIHByaXZpbGVnZXMgKHNlZQogICAgICoge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjaGFzQ2FycmllclByaXZpbGVnZXN9KS4KICAgICAqCiAgICAgKiBAcGFyYW0gc3ViSWQgVGhlIHVuaXF1ZSBTdWJzY3JpcHRpb25JbmZvIGtleSBpbiBkYXRhYmFzZS4KICAgICAqIEByZXR1cm4gU3Vic2NyaXB0aW9uSW5mbywgbWF5YmUgbnVsbCBpZiBpdHMgbm90IGFjdGl2ZS4KICAgICAqLwogICAgQFN1cHByZXNzQXV0b0RvYyAvLyBCbG9ja2VkIGJ5IGIvNzI5NjcyMzYgLSBubyBzdXBwb3J0IGZvciBjYXJyaWVyIHByaXZpbGVnZXMKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgU3Vic2NyaXB0aW9uSW5mbyBnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvKGludCBzdWJJZCkgewogICAgICAgIGlmIChWREJHKSBsb2dkKCJbZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mb10rIHN1YklkPSIgKyBzdWJJZCk7CiAgICAgICAgaWYgKCFpc1ZhbGlkU3Vic2NyaXB0aW9uSWQoc3ViSWQpKSB7CiAgICAgICAgICAgIGlmIChEQkcpIHsKICAgICAgICAgICAgICAgIGxvZ2QoIltnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvXS0gaW52YWxpZCBzdWJJZCIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KCiAgICAgICAgU3Vic2NyaXB0aW9uSW5mbyBzdWJJbmZvID0gbnVsbDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHN1YkluZm8gPSBpU3ViLmdldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm8oc3ViSWQsIG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgbUNvbnRleHQuZ2V0QXR0cmlidXRpb25UYWcoKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc3ViSW5mbzsKICAgIH0KCiAgICAvKioKICAgICAqIEdldHMgYW4gYWN0aXZlIFN1YnNjcmlwdGlvbkluZm8ge0BsaW5rIFN1YnNjcmlwdGlvbkluZm99IGFzc29jaWF0ZWQgd2l0aCB0aGUgU2ltIEljY0lkLgogICAgICoKICAgICAqIEBwYXJhbSBpY2NJZCB0aGUgSWNjSWQgb2YgU0lNIGNhcmQKICAgICAqIEByZXR1cm4gU3Vic2NyaXB0aW9uSW5mbywgbWF5YmUgbnVsbCBpZiBpdHMgbm90IGFjdGl2ZQogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUFJJVklMRUdFRF9QSE9ORV9TVEFURSkKICAgIEBOdWxsYWJsZQogICAgQFN5c3RlbUFwaQogICAgcHVibGljIFN1YnNjcmlwdGlvbkluZm8gZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mb0ZvckljYyhATm9uTnVsbCBTdHJpbmcgaWNjSWQpIHsKICAgICAgICBpZiAoVkRCRykgbG9nZCgiW2dldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9Gb3JJY2NJbmRleF0rIGljY0lkPSIgKyBpY2NJZCk7CiAgICAgICAgaWYgKGljY0lkID09IG51bGwpIHsKICAgICAgICAgICAgbG9nZCgiW2dldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9Gb3JJY2NJbmRleF0tIG51bGwgaWNjaWQiKTsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQoKICAgICAgICBTdWJzY3JpcHRpb25JbmZvIHJlc3VsdCA9IG51bGw7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXN1bHQgPSBpU3ViLmdldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9Gb3JJY2NJZChpY2NJZCwgbUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpLAogICAgICAgICAgICAgICAgICAgICAgICBtQ29udGV4dC5nZXRBdHRyaWJ1dGlvblRhZygpKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIGFjdGl2ZSBTdWJzY3JpcHRpb25JbmZvIGFzc29jaWF0ZWQgd2l0aCB0aGUgc2xvdEluZGV4CiAgICAgKgogICAgICogPHA+UmVxdWlyZXMgUGVybWlzc2lvbjoge0BsaW5rIGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbiNSRUFEX1BIT05FX1NUQVRFIFJFQURfUEhPTkVfU1RBVEV9CiAgICAgKiBvciB0aGF0IHRoZSBjYWxsaW5nIGFwcCBoYXMgY2FycmllciBwcml2aWxlZ2VzIChzZWUKICAgICAqIHtAbGluayBUZWxlcGhvbnlNYW5hZ2VyI2hhc0NhcnJpZXJQcml2aWxlZ2VzfSkuCiAgICAgKgogICAgICogQHBhcmFtIHNsb3RJbmRleCB0aGUgc2xvdCB3aGljaCB0aGUgc3Vic2NyaXB0aW9uIGlzIGluc2VydGVkCiAgICAgKiBAcmV0dXJuIFN1YnNjcmlwdGlvbkluZm8sIG1heWJlIG51bGwgaWYgaXRzIG5vdCBhY3RpdmUKICAgICAqLwogICAgQFN1cHByZXNzQXV0b0RvYyAvLyBCbG9ja2VkIGJ5IGIvNzI5NjcyMzYgLSBubyBzdXBwb3J0IGZvciBjYXJyaWVyIHByaXZpbGVnZXMKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgU3Vic2NyaXB0aW9uSW5mbyBnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvRm9yU2ltU2xvdEluZGV4KGludCBzbG90SW5kZXgpIHsKICAgICAgICBpZiAoVkRCRykgbG9nZCgiW2dldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9Gb3JTaW1TbG90SW5kZXhdKyBzbG90SW5kZXg9IiArIHNsb3RJbmRleCk7CiAgICAgICAgaWYgKCFpc1ZhbGlkU2xvdEluZGV4KHNsb3RJbmRleCkpIHsKICAgICAgICAgICAgbG9nZCgiW2dldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9Gb3JTaW1TbG90SW5kZXhdLSBpbnZhbGlkIHNsb3RJbmRleCIpOwogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CgogICAgICAgIFN1YnNjcmlwdGlvbkluZm8gcmVzdWx0ID0gbnVsbDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlTdWIuZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mb0ZvclNpbVNsb3RJbmRleChzbG90SW5kZXgsCiAgICAgICAgICAgICAgICAgICAgICAgIG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSwgbUNvbnRleHQuZ2V0QXR0cmlidXRpb25UYWcoKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQHJldHVybiBMaXN0IG9mIGFsbCBTdWJzY3JpcHRpb25JbmZvIHJlY29yZHMgaW4gZGF0YWJhc2UsCiAgICAgKiBpbmNsdWRlIHRob3NlIHRoYXQgd2VyZSBpbnNlcnRlZCBiZWZvcmUsIG1heWJlIGVtcHR5IGJ1dCBub3QgbnVsbC4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBVbnN1cHBvcnRlZEFwcFVzYWdlCiAgICBwdWJsaWMgTGlzdDxTdWJzY3JpcHRpb25JbmZvPiBnZXRBbGxTdWJzY3JpcHRpb25JbmZvTGlzdCgpIHsKICAgICAgICBpZiAoVkRCRykgbG9nZCgiW2dldEFsbFN1YnNjcmlwdGlvbkluZm9MaXN0XSsiKTsKCiAgICAgICAgTGlzdDxTdWJzY3JpcHRpb25JbmZvPiByZXN1bHQgPSBudWxsOwoKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmVzdWx0ID0gaVN1Yi5nZXRBbGxTdWJJbmZvTGlzdChtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCksCiAgICAgICAgICAgICAgICAgICAgICAgIG1Db250ZXh0LmdldEF0dHJpYnV0aW9uVGFnKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KCiAgICAgICAgaWYgKHJlc3VsdCA9PSBudWxsKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheUxpc3Q8PigpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBTdWJzY3JpcHRpb25JbmZvKHMpIG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIFNJTShzKS4gVGhlIHJlY29yZHMgd2lsbCBiZSBzb3J0ZWQKICAgICAqIGJ5IHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFNpbVNsb3RJbmRleH0gdGhlbiBieSB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mbyNnZXRTdWJzY3JpcHRpb25JZH0uCiAgICAgKgogICAgICogPHA+UmVxdWlyZXMgUGVybWlzc2lvbjoge0BsaW5rIGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbiNSRUFEX1BIT05FX1NUQVRFIFJFQURfUEhPTkVfU1RBVEV9CiAgICAgKiBvciB0aGF0IHRoZSBjYWxsaW5nIGFwcCBoYXMgY2FycmllciBwcml2aWxlZ2VzIChzZWUKICAgICAqIHtAbGluayBUZWxlcGhvbnlNYW5hZ2VyI2hhc0NhcnJpZXJQcml2aWxlZ2VzfSkuIEluIHRoZSBsYXR0ZXIgY2FzZSwgb25seSByZWNvcmRzIGFjY2Vzc2libGUKICAgICAqIHRvIHRoZSBjYWxsaW5nIGFwcCBhcmUgcmV0dXJuZWQuCiAgICAgKgogICAgICogQHJldHVybiBTb3J0ZWQgbGlzdCBvZiB0aGUgY3VycmVudGx5IHtAbGluayBTdWJzY3JpcHRpb25JbmZvfSByZWNvcmRzIGF2YWlsYWJsZSBvbiB0aGUgZGV2aWNlLgogICAgICogPHVsPgogICAgICogPGxpPgogICAgICogSWYgbnVsbCBpcyByZXR1cm5lZCB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmtub3duIGJ1dCBpZiBhIHtAbGluayBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJ9CiAgICAgKiBoYXMgYmVlbiByZWdpc3RlcmVkIHtAbGluayBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIjb25TdWJzY3JpcHRpb25zQ2hhbmdlZH0gd2lsbCBiZQogICAgICogaW52b2tlZCBpbiB0aGUgZnV0dXJlLgogICAgICogPC9saT4KICAgICAqIDxsaT4KICAgICAqIElmIHRoZSBsaXN0IGlzIGVtcHR5IHRoZW4gdGhlcmUgYXJlIG5vIHtAbGluayBTdWJzY3JpcHRpb25JbmZvfSByZWNvcmRzIGN1cnJlbnRseSBhdmFpbGFibGUuCiAgICAgKiA8L2xpPgogICAgICogPGxpPgogICAgICogaWYgdGhlIGxpc3QgaXMgbm9uLWVtcHR5IHRoZSBsaXN0IGlzIHNvcnRlZCBieSB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mbyNnZXRTaW1TbG90SW5kZXh9CiAgICAgKiB0aGVuIGJ5IHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFN1YnNjcmlwdGlvbklkfS4KICAgICAqIDwvbGk+CiAgICAgKiA8L3VsPgogICAgICovCiAgICBAU3VwcHJlc3NBdXRvRG9jIC8vIEJsb2NrZWQgYnkgYi83Mjk2NzIzNiAtIG5vIHN1cHBvcnQgZm9yIGNhcnJpZXIgcHJpdmlsZWdlcwogICAgQFJlcXVpcmVzUGVybWlzc2lvbihhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uUkVBRF9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBMaXN0PFN1YnNjcmlwdGlvbkluZm8+IGdldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9MaXN0KCkgewogICAgICAgIHJldHVybiBnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvTGlzdCgvKiB1c2VyVmlzaWJsZW9ubHkgKi90cnVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBib3RoIGhpZGRlbiBhbmQgdmlzaWJsZSBTdWJzY3JpcHRpb25JbmZvKHMpIG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIFNJTShzKS4KICAgICAqIFRoZSByZWNvcmRzIHdpbGwgYmUgc29ydGVkIGJ5IHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFNpbVNsb3RJbmRleH0KICAgICAqIHRoZW4gYnkge0BsaW5rIFN1YnNjcmlwdGlvbkluZm8jZ2V0U3Vic2NyaXB0aW9uSWR9LgogICAgICoKICAgICAqIEhpZGRlbiBzdWJzY3JpcHRpb25zIHJlZmVyIHRvIHRob3NlIGFyZSBub3QgbWVhbnQgdmlzaWJsZSB0byB0aGUgdXNlcnMuCiAgICAgKiBGb3IgZXhhbXBsZSwgYW4gb3Bwb3J0dW5pc3RpYyBzdWJzY3JpcHRpb24gdGhhdCBpcyBncm91cGVkIHdpdGggb3RoZXIKICAgICAqIHN1YnNjcmlwdGlvbnMgc2hvdWxkIHJlbWFpbiBpbnZpc2libGUgdG8gdXNlcnMgYXMgdGhleSBhcmUgb25seSBmdW5jdGlvbmFsbHkKICAgICAqIHN1cHBsZW1lbnRhcnkgdG8gcHJpbWFyeSBvbmVzLgogICAgICoKICAgICAqIDxwPlJlcXVpcmVzIFBlcm1pc3Npb246IHtAbGluayBhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24jUkVBRF9QSE9ORV9TVEFURSBSRUFEX1BIT05FX1NUQVRFfQogICAgICogb3IgdGhhdCB0aGUgY2FsbGluZyBhcHAgaGFzIGNhcnJpZXIgcHJpdmlsZWdlcyAoc2VlCiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlc30pLiBJbiB0aGUgbGF0dGVyIGNhc2UsIG9ubHkgcmVjb3JkcyBhY2Nlc3NpYmxlCiAgICAgKiB0byB0aGUgY2FsbGluZyBhcHAgYXJlIHJldHVybmVkLgogICAgICoKICAgICAqIEByZXR1cm4gU29ydGVkIGxpc3Qgb2YgdGhlIGN1cnJlbnRseSBhdmFpbGFibGUge0BsaW5rIFN1YnNjcmlwdGlvbkluZm99CiAgICAgKiByZWNvcmRzIG9uIHRoZSBkZXZpY2UuCiAgICAgKiBUaGlzIGlzIHNpbWlsYXIgdG8ge0BsaW5rICNnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvTGlzdH0gZXhjZXB0IHRoYXQgaXQgd2lsbCByZXR1cm4KICAgICAqIGJvdGggYWN0aXZlIGFuZCBoaWRkZW4gU3Vic2NyaXB0aW9uSW5mb3MuCiAgICAgKgogICAgICovCiAgICBwdWJsaWMgQE5vbk51bGwgTGlzdDxTdWJzY3JpcHRpb25JbmZvPiBnZXRDb21wbGV0ZUFjdGl2ZVN1YnNjcmlwdGlvbkluZm9MaXN0KCkgewogICAgICAgIExpc3Q8U3Vic2NyaXB0aW9uSW5mbz4gY29tcGxldGVMaXN0ID0gZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mb0xpc3QoCiAgICAgICAgICAgICAgICAvKiB1c2VyVmlzaWJsZW9ubHkgKi9mYWxzZSk7CiAgICAgICAgaWYgKGNvbXBsZXRlTGlzdCA9PSBudWxsKSB7CiAgICAgICAgICAgIGNvbXBsZXRlTGlzdCA9IG5ldyBBcnJheUxpc3Q8PigpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY29tcGxldGVMaXN0OwogICAgfQoKICAgIC8qKgogICAgKiBUaGlzIGlzIHNpbWlsYXIgdG8ge0BsaW5rICNnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvTGlzdCgpfSwgYnV0IGlmIHVzZXJWaXNpYmxlT25seQogICAgKiBpcyB0cnVlLCBpdCB3aWxsIGZpbHRlciBvdXQgdGhlIGhpZGRlbiBzdWJzY3JpcHRpb25zLgogICAgKgogICAgKiBAaGlkZQogICAgKi8KICAgIHB1YmxpYyBATnVsbGFibGUgTGlzdDxTdWJzY3JpcHRpb25JbmZvPiBnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvTGlzdChib29sZWFuIHVzZXJWaXNpYmxlT25seSkgewogICAgICAgIExpc3Q8U3Vic2NyaXB0aW9uSW5mbz4gYWN0aXZlTGlzdCA9IG51bGw7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBhY3RpdmVMaXN0ID0gaVN1Yi5nZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvTGlzdChtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCksCiAgICAgICAgICAgICAgICAgICAgICAgIG1Db250ZXh0LmdldEF0dHJpYnV0aW9uVGFnKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KCiAgICAgICAgaWYgKCF1c2VyVmlzaWJsZU9ubHkgfHwgYWN0aXZlTGlzdCA9PSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybiBhY3RpdmVMaXN0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBhY3RpdmVMaXN0LnN0cmVhbSgpLmZpbHRlcihzdWJJbmZvIC0+IGlzU3Vic2NyaXB0aW9uVmlzaWJsZShzdWJJbmZvKSkKICAgICAgICAgICAgICAgICAgICAuY29sbGVjdChDb2xsZWN0b3JzLnRvTGlzdCgpKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXRzIHRoZSBTdWJzY3JpcHRpb25JbmZvKHMpIG9mIGFsbCBhdmFpbGFibGUgc3Vic2NyaXB0aW9ucywgaWYgYW55LgogICAgICoKICAgICAqIDxwPkF2YWlsYWJsZSBzdWJzY3JpcHRpb25zIGluY2x1ZGUgYWN0aXZlIG9uZXMgKHRob3NlIHdpdGggYSBub24tbmVnYXRpdmUKICAgICAqIHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFNpbVNsb3RJbmRleCgpfSkgYXMgd2VsbCBhcyBpbmFjdGl2ZSBidXQgaW5zdGFsbGVkIGVtYmVkZGVkCiAgICAgKiBzdWJzY3JpcHRpb25zLgogICAgICoKICAgICAqIDxwPlRoZSByZWNvcmRzIHdpbGwgYmUgc29ydGVkIGJ5IHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFNpbVNsb3RJbmRleH0gdGhlbiBieQogICAgICoge0BsaW5rIFN1YnNjcmlwdGlvbkluZm8jZ2V0U3Vic2NyaXB0aW9uSWR9LgogICAgICoKICAgICAqIEByZXR1cm4gU29ydGVkIGxpc3Qgb2YgdGhlIGN1cnJlbnQge0BsaW5rIFN1YnNjcmlwdGlvbkluZm99IHJlY29yZHMgYXZhaWxhYmxlIG9uIHRoZQogICAgICogZGV2aWNlLgogICAgICogPHVsPgogICAgICogPGxpPgogICAgICogSWYgbnVsbCBpcyByZXR1cm5lZCB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmtub3duIGJ1dCBpZiBhCiAgICAgKiB7QGxpbmsgT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyfSBoYXMgYmVlbiByZWdpc3RlcmVkCiAgICAgKiB7QGxpbmsgT25TdWJzY3JpcHRpb25zQ2hhbmdlZExpc3RlbmVyI29uU3Vic2NyaXB0aW9uc0NoYW5nZWR9IHdpbGwgYmUgaW52b2tlZCBpbiB0aGUgZnV0dXJlLgogICAgICogPGxpPgogICAgICogSWYgdGhlIGxpc3QgaXMgZW1wdHkgdGhlbiB0aGVyZSBhcmUgbm8ge0BsaW5rIFN1YnNjcmlwdGlvbkluZm99IHJlY29yZHMgY3VycmVudGx5IGF2YWlsYWJsZS4KICAgICAqIDxsaT4KICAgICAqIGlmIHRoZSBsaXN0IGlzIG5vbi1lbXB0eSB0aGUgbGlzdCBpcyBzb3J0ZWQgYnkge0BsaW5rIFN1YnNjcmlwdGlvbkluZm8jZ2V0U2ltU2xvdEluZGV4fQogICAgICogdGhlbiBieSB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mbyNnZXRTdWJzY3JpcHRpb25JZH0uCiAgICAgKiA8L3VsPgogICAgICoKICAgICAqIDxwPgogICAgICogUGVybWlzc2lvbnMgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUFJJVklMRUdFRF9QSE9ORV9TVEFURSBpcyByZXF1aXJlZAogICAgICogZm9yICNnZXRBdmFpbGFibGVTdWJzY3JpcHRpb25JbmZvTGlzdCB0byBiZSBpbnZva2VkLgogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgcHVibGljIExpc3Q8U3Vic2NyaXB0aW9uSW5mbz4gZ2V0QXZhaWxhYmxlU3Vic2NyaXB0aW9uSW5mb0xpc3QoKSB7CiAgICAgICAgTGlzdDxTdWJzY3JpcHRpb25JbmZvPiByZXN1bHQgPSBudWxsOwoKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmVzdWx0ID0gaVN1Yi5nZXRBdmFpbGFibGVTdWJzY3JpcHRpb25JbmZvTGlzdChtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCksCiAgICAgICAgICAgICAgICAgICAgICAgIG1Db250ZXh0LmdldEF0dHJpYnV0aW9uVGFnKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogR2V0cyB0aGUgU3Vic2NyaXB0aW9uSW5mbyhzKSBvZiBhbGwgZW1iZWRkZWQgc3Vic2NyaXB0aW9ucyBhY2Nlc3NpYmxlIHRvIHRoZSBjYWxsaW5nIGFwcCwgaWYKICAgICAqIGFueS4KICAgICAqCiAgICAgKiA8cD5Pbmx5IHRob3NlIHN1YnNjcmlwdGlvbnMgZm9yIHdoaWNoIHRoZSBjYWxsaW5nIGFwcCBoYXMgY2FycmllciBwcml2aWxlZ2VzIHBlciB0aGUKICAgICAqIHN1YnNjcmlwdGlvbiBtZXRhZGF0YSwgaWYgYW55LCB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSByZXR1cm5lZCBsaXN0LgogICAgICoKICAgICAqIDxwPlRoZSByZWNvcmRzIHdpbGwgYmUgc29ydGVkIGJ5IHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFNpbVNsb3RJbmRleH0gdGhlbiBieQogICAgICoge0BsaW5rIFN1YnNjcmlwdGlvbkluZm8jZ2V0U3Vic2NyaXB0aW9uSWR9LgogICAgICoKICAgICAqIEByZXR1cm4gU29ydGVkIGxpc3Qgb2YgdGhlIGN1cnJlbnQgZW1iZWRkZWQge0BsaW5rIFN1YnNjcmlwdGlvbkluZm99IHJlY29yZHMgYXZhaWxhYmxlIG9uIHRoZQogICAgICogZGV2aWNlIHdoaWNoIGFyZSBhY2Nlc3NpYmxlIHRvIHRoZSBjYWxsZXIuCiAgICAgKiA8dWw+CiAgICAgKiA8bGk+CiAgICAgKiBJZiBudWxsIGlzIHJldHVybmVkIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVua25vd24gYnV0IGlmIGEKICAgICAqIHtAbGluayBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXJ9IGhhcyBiZWVuIHJlZ2lzdGVyZWQKICAgICAqIHtAbGluayBPblN1YnNjcmlwdGlvbnNDaGFuZ2VkTGlzdGVuZXIjb25TdWJzY3JpcHRpb25zQ2hhbmdlZH0gd2lsbCBiZSBpbnZva2VkIGluIHRoZSBmdXR1cmUuCiAgICAgKiA8bGk+CiAgICAgKiBJZiB0aGUgbGlzdCBpcyBlbXB0eSB0aGVuIHRoZXJlIGFyZSBubyB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mb30gcmVjb3JkcyBjdXJyZW50bHkgYXZhaWxhYmxlLgogICAgICogPGxpPgogICAgICogaWYgdGhlIGxpc3QgaXMgbm9uLWVtcHR5IHRoZSBsaXN0IGlzIHNvcnRlZCBieSB7QGxpbmsgU3Vic2NyaXB0aW9uSW5mbyNnZXRTaW1TbG90SW5kZXh9CiAgICAgKiB0aGVuIGJ5IHtAbGluayBTdWJzY3JpcHRpb25JbmZvI2dldFN1YnNjcmlwdGlvbklkfS4KICAgICAqIDwvdWw+CiAgICAgKi8KICAgIHB1YmxpYyBMaXN0PFN1YnNjcmlwdGlvbkluZm8+IGdldEFjY2Vzc2libGVTdWJzY3JpcHRpb25JbmZvTGlzdCgpIHsKICAgICAgICBMaXN0PFN1YnNjcmlwdGlvbkluZm8+IHJlc3VsdCA9IG51bGw7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXN1bHQgPSBpU3ViLmdldEFjY2Vzc2libGVTdWJzY3JpcHRpb25JbmZvTGlzdChtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogUmVxdWVzdCBhIHJlZnJlc2ggb2YgdGhlIHBsYXRmb3JtIGNhY2hlIG9mIHByb2ZpbGUgaW5mb3JtYXRpb24gZm9yIHRoZSBlVUlDQyB3aGljaAogICAgICogY29ycmVzcG9uZHMgdG8gdGhlIGNhcmQgSUQgcmV0dXJuZWQgYnkge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjZ2V0Q2FyZElkRm9yRGVmYXVsdEV1aWNjKCl9LgogICAgICoKICAgICAqIDxwPlNob3VsZCBiZSBjYWxsZWQgYnkgdGhlIEV1aWNjU2VydmljZSBpbXBsZW1lbnRhdGlvbiB3aGVuZXZlciB0aGlzIGluZm9ybWF0aW9uIGNoYW5nZXMgZHVlCiAgICAgKiB0byBhbiBvcGVyYXRpb24gZG9uZSBvdXRzaWRlIHRoZSBzY29wZSBvZiBhIHJlcXVlc3QgaW5pdGlhdGVkIGJ5IHRoZSBwbGF0Zm9ybSB0byB0aGUKICAgICAqIEV1aWNjU2VydmljZS4gVGhlcmUgaXMgbm8gbmVlZCB0byByZWZyZXNoIGZvciBkb3dubG9hZHMsIGRlbGV0ZXMsIG9yIG90aGVyIG9wZXJhdGlvbnMgdGhhdAogICAgICogd2VyZSBtYWRlIHRocm91Z2ggdGhlIEV1aWNjU2VydmljZS4KICAgICAqCiAgICAgKiA8cD5SZXF1aXJlcyB0aGUge0BsaW5rIGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbiNXUklURV9FTUJFRERFRF9TVUJTQ1JJUFRJT05TfSBwZXJtaXNzaW9uLgogICAgICoKICAgICAqIEBzZWUge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjZ2V0Q2FyZElkRm9yRGVmYXVsdEV1aWNjKCl9IGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZSBjYXJkIElELgogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBTeXN0ZW1BcGkKICAgIHB1YmxpYyB2b2lkIHJlcXVlc3RFbWJlZGRlZFN1YnNjcmlwdGlvbkluZm9MaXN0UmVmcmVzaCgpIHsKICAgICAgICBpbnQgY2FyZElkID0gVGVsZXBob255TWFuYWdlci5mcm9tKG1Db250ZXh0KS5nZXRDYXJkSWRGb3JEZWZhdWx0RXVpY2MoKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaVN1Yi5yZXF1ZXN0RW1iZWRkZWRTdWJzY3JpcHRpb25JbmZvTGlzdFJlZnJlc2goY2FyZElkKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICBsb2dkKCJyZXF1ZXN0RW1iZWRkZWRTdWJzY3JpcHRpb25JbmZvTGlzdEZyZXNoIGZvciBjYXJkID0gIiArIGNhcmRJZCArICIgZmFpbGVkLiIpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFJlcXVlc3QgYSByZWZyZXNoIG9mIHRoZSBwbGF0Zm9ybSBjYWNoZSBvZiBwcm9maWxlIGluZm9ybWF0aW9uIGZvciB0aGUgZVVJQ0Mgd2l0aCB0aGUgZ2l2ZW4KICAgICAqIHtAY29kZSBjYXJkSWR9LgogICAgICoKICAgICAqIDxwPlNob3VsZCBiZSBjYWxsZWQgYnkgdGhlIEV1aWNjU2VydmljZSBpbXBsZW1lbnRhdGlvbiB3aGVuZXZlciB0aGlzIGluZm9ybWF0aW9uIGNoYW5nZXMgZHVlCiAgICAgKiB0byBhbiBvcGVyYXRpb24gZG9uZSBvdXRzaWRlIHRoZSBzY29wZSBvZiBhIHJlcXVlc3QgaW5pdGlhdGVkIGJ5IHRoZSBwbGF0Zm9ybSB0byB0aGUKICAgICAqIEV1aWNjU2VydmljZS4gVGhlcmUgaXMgbm8gbmVlZCB0byByZWZyZXNoIGZvciBkb3dubG9hZHMsIGRlbGV0ZXMsIG9yIG90aGVyIG9wZXJhdGlvbnMgdGhhdAogICAgICogd2VyZSBtYWRlIHRocm91Z2ggdGhlIEV1aWNjU2VydmljZS4KICAgICAqCiAgICAgKiA8cD5SZXF1aXJlcyB0aGUge0BsaW5rIGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbiNXUklURV9FTUJFRERFRF9TVUJTQ1JJUFRJT05TfSBwZXJtaXNzaW9uLgogICAgICoKICAgICAqIEBwYXJhbSBjYXJkSWQgdGhlIGNhcmQgSUQgb2YgdGhlIGVVSUNDLgogICAgICoKICAgICAqIEBzZWUge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjZ2V0Q2FyZElkRm9yRGVmYXVsdEV1aWNjKCl9IGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZSBjYXJkIElELgogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBTeXN0ZW1BcGkKICAgIHB1YmxpYyB2b2lkIHJlcXVlc3RFbWJlZGRlZFN1YnNjcmlwdGlvbkluZm9MaXN0UmVmcmVzaChpbnQgY2FyZElkKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGlTdWIucmVxdWVzdEVtYmVkZGVkU3Vic2NyaXB0aW9uSW5mb0xpc3RSZWZyZXNoKGNhcmRJZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgbG9nZCgicmVxdWVzdEVtYmVkZGVkU3Vic2NyaXB0aW9uSW5mb0xpc3RGcmVzaCBmb3IgY2FyZCA9ICIgKyBjYXJkSWQgKyAiIGZhaWxlZC4iKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBAcmV0dXJuIHRoZSBjb3VudCBvZiBhbGwgc3Vic2NyaXB0aW9ucyBpbiB0aGUgZGF0YWJhc2UsIHRoaXMgaW5jbHVkZXMKICAgICAqIGFsbCBzdWJzY3JpcHRpb25zIHRoYXQgaGF2ZSBiZWVuIHNlZW4uCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAVW5zdXBwb3J0ZWRBcHBVc2FnZQogICAgcHVibGljIGludCBnZXRBbGxTdWJzY3JpcHRpb25JbmZvQ291bnQoKSB7CiAgICAgICAgaWYgKFZEQkcpIGxvZ2QoIltnZXRBbGxTdWJzY3JpcHRpb25JbmZvQ291bnRdKyIpOwoKICAgICAgICBpbnQgcmVzdWx0ID0gMDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlTdWIuZ2V0QWxsU3ViSW5mb0NvdW50KG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgbUNvbnRleHQuZ2V0QXR0cmlidXRpb25UYWcoKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICoKICAgICAqIFJlcXVpcmVzIFBlcm1pc3Npb246IHtAbGluayBhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24jUkVBRF9QSE9ORV9TVEFURSBSRUFEX1BIT05FX1NUQVRFfQogICAgICogb3IgdGhhdCB0aGUgY2FsbGluZyBhcHAgaGFzIGNhcnJpZXIgcHJpdmlsZWdlcyAoc2VlCiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlc30pLiBJbiB0aGUgbGF0dGVyIGNhc2UsIHRoZSBjb3VudCB3aWxsIGluY2x1ZGUKICAgICAqIG9ubHkgdGhvc2Ugc3Vic2NyaXB0aW9ucyBhY2Nlc3NpYmxlIHRvIHRoZSBjYWxsZXIuCiAgICAgKgogICAgICogQHJldHVybiB0aGUgY3VycmVudCBudW1iZXIgb2YgYWN0aXZlIHN1YnNjcmlwdGlvbnMuIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGUgdmFsdWUKICAgICAqIHJldHVybmVkIGJ5IHRoaXMgbWV0aG9kIHdpbGwgYmUgdGhlIHNhbWUgYXMgdGhlIGxlbmd0aCBvZiB0aGUgbGlzdCByZXR1cm5lZCBieQogICAgICoge0BsaW5rICNnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvTGlzdH0uCiAgICAgKi8KICAgIEBTdXBwcmVzc0F1dG9Eb2MgLy8gQmxvY2tlZCBieSBiLzcyOTY3MjM2IC0gbm8gc3VwcG9ydCBmb3IgY2FycmllciBwcml2aWxlZ2VzCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbi5SRUFEX1BIT05FX1NUQVRFKQogICAgcHVibGljIGludCBnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvQ291bnQoKSB7CiAgICAgICAgaW50IHJlc3VsdCA9IDA7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXN1bHQgPSBpU3ViLmdldEFjdGl2ZVN1YkluZm9Db3VudChtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCksCiAgICAgICAgICAgICAgICAgICAgICAgIG1Db250ZXh0LmdldEF0dHJpYnV0aW9uVGFnKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIEByZXR1cm4gdGhlIG1heGltdW0gbnVtYmVyIG9mIGFjdGl2ZSBzdWJzY3JpcHRpb25zIHRoYXQgd2lsbCBiZSByZXR1cm5lZCBieQogICAgICoge0BsaW5rICNnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvTGlzdH0gYW5kIHRoZSB2YWx1ZSByZXR1cm5lZCBieQogICAgICoge0BsaW5rICNnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvQ291bnR9LgogICAgICovCiAgICBwdWJsaWMgaW50IGdldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9Db3VudE1heCgpIHsKICAgICAgICBpbnQgcmVzdWx0ID0gMDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlTdWIuZ2V0QWN0aXZlU3ViSW5mb0NvdW50TWF4KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQWRkIGEgbmV3IFN1YnNjcmlwdGlvbkluZm8gdG8gU3Vic2NyaXB0aW9uSW5mbyBkYXRhYmFzZSBpZiBuZWVkZWQKICAgICAqIEBwYXJhbSBpY2NJZCB0aGUgSWNjSWQgb2YgdGhlIFNJTSBjYXJkCiAgICAgKiBAcGFyYW0gc2xvdEluZGV4IHRoZSBzbG90IHdoaWNoIHRoZSBTSU0gaXMgaW5zZXJ0ZWQKICAgICAqIEByZXR1cm4gdGhlIFVSTCBvZiB0aGUgbmV3bHkgY3JlYXRlZCByb3cgb3IgdGhlIHVwZGF0ZWQgcm93CiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgVXJpIGFkZFN1YnNjcmlwdGlvbkluZm9SZWNvcmQoU3RyaW5nIGljY0lkLCBpbnQgc2xvdEluZGV4KSB7CiAgICAgICAgaWYgKFZEQkcpIGxvZ2QoIlthZGRTdWJzY3JpcHRpb25JbmZvUmVjb3JkXSsgaWNjSWQ6IiArIGljY0lkICsgIiBzbG90SW5kZXg6IiArIHNsb3RJbmRleCk7CiAgICAgICAgaWYgKGljY0lkID09IG51bGwpIHsKICAgICAgICAgICAgbG9nZCgiW2FkZFN1YnNjcmlwdGlvbkluZm9SZWNvcmRdLSBudWxsIGljY0lkIik7CiAgICAgICAgfQogICAgICAgIGlmICghaXNWYWxpZFNsb3RJbmRleChzbG90SW5kZXgpKSB7CiAgICAgICAgICAgIGxvZ2QoIlthZGRTdWJzY3JpcHRpb25JbmZvUmVjb3JkXS0gaW52YWxpZCBzbG90SW5kZXgiKTsKICAgICAgICB9CgogICAgICAgIGFkZFN1YnNjcmlwdGlvbkluZm9SZWNvcmQoaWNjSWQsIG51bGwsIHNsb3RJbmRleCwgU1VCU0NSSVBUSU9OX1RZUEVfTE9DQUxfU0lNKTsKCiAgICAgICAgLy8gRklYTUU6IEFsd2F5cyByZXR1cm5zIG51bGw/CiAgICAgICAgcmV0dXJuIG51bGw7CgogICAgfQoKICAgIC8qKgogICAgICogQWRkIGEgbmV3IFN1YnNjcmlwdGlvbkluZm8gdG8gU3Vic2NyaXB0aW9uSW5mbyBkYXRhYmFzZSBpZiBuZWVkZWQKICAgICAqIEBwYXJhbSB1bmlxdWVJZCBUaGlzIGlzIHRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHN1YnNjcmlwdGlvbiB3aXRoaW4gdGhlCiAgICAgKiAgICAgICAgICAgICAgICAgc3BlY2lmaWMgc3Vic2NyaXB0aW9uIHR5cGUuCiAgICAgKiBAcGFyYW0gZGlzcGxheU5hbWUgaHVtYW4tcmVhZGFibGUgbmFtZSBvZiB0aGUgZGV2aWNlIHRoZSBzdWJzY3JpcHRpb24gY29ycmVzcG9uZHMgdG8uCiAgICAgKiBAcGFyYW0gc2xvdEluZGV4IHRoZSBzbG90IGFzc2lnbmVkIHRvIHRoaXMgc3Vic2NyaXB0aW9uLiBJdCBpcyBpZ25vcmVkIGZvciBzdWJzY3JpcHRpb25UeXBlCiAgICAgKiAgICAgICAgICAgICAgICAgIG9mIHtAbGluayAjU1VCU0NSSVBUSU9OX1RZUEVfUkVNT1RFX1NJTX0uCiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uVHlwZSB0aGUge0BsaW5rICNTVUJTQ1JJUFRJT05fVFlQRX0KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyB2b2lkIGFkZFN1YnNjcmlwdGlvbkluZm9SZWNvcmQoU3RyaW5nIHVuaXF1ZUlkLCBTdHJpbmcgZGlzcGxheU5hbWUsIGludCBzbG90SW5kZXgsCiAgICAgICAgICAgIGludCBzdWJzY3JpcHRpb25UeXBlKSB7CiAgICAgICAgaWYgKFZEQkcpIHsKICAgICAgICAgICAgbG9nZCgiW2FkZFN1YnNjcmlwdGlvbkluZm9SZWNvcmRdKyB1bmlxdWVJZDoiICsgdW5pcXVlSWQKICAgICAgICAgICAgICAgICAgICArICIsIGRpc3BsYXlOYW1lOiIgKyBkaXNwbGF5TmFtZSArICIsIHNsb3RJbmRleDoiICsgc2xvdEluZGV4CiAgICAgICAgICAgICAgICAgICAgKyAiLCBzdWJzY3JpcHRpb25UeXBlOiAiICsgc3Vic2NyaXB0aW9uVHlwZSk7CiAgICAgICAgfQogICAgICAgIGlmICh1bmlxdWVJZCA9PSBudWxsKSB7CiAgICAgICAgICAgIExvZy5lKExPR19UQUcsICJbYWRkU3Vic2NyaXB0aW9uSW5mb1JlY29yZF0tIHVuaXF1ZUlkIGlzIG51bGwiKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViID09IG51bGwpIHsKICAgICAgICAgICAgICAgIExvZy5lKExPR19UQUcsICJbYWRkU3Vic2NyaXB0aW9uSW5mb1JlY29yZF0tIElTdWIgc2VydmljZSBpcyBudWxsIik7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaW50IHJlc3VsdCA9IGlTdWIuYWRkU3ViSW5mbyh1bmlxdWVJZCwgZGlzcGxheU5hbWUsIHNsb3RJbmRleCwgc3Vic2NyaXB0aW9uVHlwZSk7CiAgICAgICAgICAgIGlmIChyZXN1bHQgPCAwKSB7CiAgICAgICAgICAgICAgICBMb2cuZShMT0dfVEFHLCAiQWRkaW5nIG9mIHN1YnNjcmlwdGlvbiBkaWRuJ3Qgc3VjY2VlZDogZXJyb3IgPSAiICsgcmVzdWx0KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxvZ2QoInN1Y2Nlc3NmdWxseSBhZGRlZCBuZXcgc3Vic2NyaXB0aW9uIik7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogUmVtb3ZlIFN1YnNjcmlwdGlvbkluZm8gcmVjb3JkIGZyb20gdGhlIFN1YnNjcmlwdGlvbkluZm8gZGF0YWJhc2UKICAgICAqIEBwYXJhbSB1bmlxdWVJZCBUaGlzIGlzIHRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHN1YnNjcmlwdGlvbiB3aXRoaW4gdGhlIHNwZWNpZmljCiAgICAgKiAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uIHR5cGUuCiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uVHlwZSB0aGUge0BsaW5rICNTVUJTQ1JJUFRJT05fVFlQRX0KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyB2b2lkIHJlbW92ZVN1YnNjcmlwdGlvbkluZm9SZWNvcmQoU3RyaW5nIHVuaXF1ZUlkLCBpbnQgc3Vic2NyaXB0aW9uVHlwZSkgewogICAgICAgIGlmIChWREJHKSB7CiAgICAgICAgICAgIGxvZ2QoIltyZW1vdmVTdWJzY3JpcHRpb25JbmZvUmVjb3JkXSsgdW5pcXVlSWQ6IiArIHVuaXF1ZUlkCiAgICAgICAgICAgICAgICAgICAgKyAiLCBzdWJzY3JpcHRpb25UeXBlOiAiICsgc3Vic2NyaXB0aW9uVHlwZSk7CiAgICAgICAgfQogICAgICAgIGlmICh1bmlxdWVJZCA9PSBudWxsKSB7CiAgICAgICAgICAgIExvZy5lKExPR19UQUcsICJbYWRkU3Vic2NyaXB0aW9uSW5mb1JlY29yZF0tIHVuaXF1ZUlkIGlzIG51bGwiKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViID09IG51bGwpIHsKICAgICAgICAgICAgICAgIExvZy5lKExPR19UQUcsICJbcmVtb3ZlU3Vic2NyaXB0aW9uSW5mb1JlY29yZF0tIElTdWIgc2VydmljZSBpcyBudWxsIik7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaW50IHJlc3VsdCA9IGlTdWIucmVtb3ZlU3ViSW5mbyh1bmlxdWVJZCwgc3Vic2NyaXB0aW9uVHlwZSk7CiAgICAgICAgICAgIGlmIChyZXN1bHQgPCAwKSB7CiAgICAgICAgICAgICAgICBMb2cuZShMT0dfVEFHLCAiUmVtb3ZhbCBvZiBzdWJzY3JpcHRpb24gZGlkbid0IHN1Y2NlZWQ6IGVycm9yID0gIiArIHJlc3VsdCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBsb2dkKCJzdWNjZXNzZnVsbHkgcmVtb3ZlZCBzdWJzY3JpcHRpb24iKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgU0lNIGljb24gdGludCBjb2xvciBmb3Igc3Vic2NyaXB0aW9uIElECiAgICAgKiBAcGFyYW0gdGludCB0aGUgUkdCIHZhbHVlIG9mIGljb24gdGludCBjb2xvciBvZiB0aGUgU0lNCiAgICAgKiBAcGFyYW0gc3ViSWQgdGhlIHVuaXF1ZSBTdWJzY3JpdHBpb24gSUQgaW4gZGF0YWJhc2UKICAgICAqIEByZXR1cm4gdGhlIG51bWJlciBvZiByZWNvcmRzIHVwZGF0ZWQKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oTWFuaWZlc3QucGVybWlzc2lvbi5NT0RJRllfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgaW50IHNldEljb25UaW50KEBDb2xvckludCBpbnQgdGludCwgaW50IHN1YklkKSB7CiAgICAgICAgaWYgKFZEQkcpIGxvZ2QoIltzZXRJY29uVGludF0rIHRpbnQ6IiArIHRpbnQgKyAiIHN1YklkOiIgKyBzdWJJZCk7CiAgICAgICAgcmV0dXJuIHNldFN1YnNjcmlwdGlvblByb3BlcnR5SGVscGVyKHN1YklkLCAic2V0SWNvblRpbnQiLAogICAgICAgICAgICAgICAgKGlTdWIpLT4gaVN1Yi5zZXRJY29uVGludCh0aW50LCBzdWJJZCkKICAgICAgICApOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHRoZSBkaXNwbGF5IG5hbWUgZm9yIGEgc3Vic2NyaXB0aW9uIElECiAgICAgKiBAcGFyYW0gZGlzcGxheU5hbWUgdGhlIGRpc3BsYXkgbmFtZSBvZiBTSU0gY2FyZAogICAgICogQHBhcmFtIHN1YklkIHRoZSB1bmlxdWUgU3Vic2NyaXRwaW9uIElEIGluIGRhdGFiYXNlCiAgICAgKiBAcGFyYW0gbmFtZVNvdXJjZSBTSU0gZGlzcGxheSBuYW1lIHNvdXJjZQogICAgICogQHJldHVybiB0aGUgbnVtYmVyIG9mIHJlY29yZHMgdXBkYXRlZCBvciA8IDAgaWYgaW52YWxpZCBzdWJJZAogICAgICogQGhpZGUKICAgICAqLwogICAgQFJlcXVpcmVzUGVybWlzc2lvbihNYW5pZmVzdC5wZXJtaXNzaW9uLk1PRElGWV9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBpbnQgc2V0RGlzcGxheU5hbWUoQE51bGxhYmxlIFN0cmluZyBkaXNwbGF5TmFtZSwgaW50IHN1YklkLAogICAgICAgICAgICBAU2ltRGlzcGxheU5hbWVTb3VyY2UgaW50IG5hbWVTb3VyY2UpIHsKICAgICAgICBpZiAoVkRCRykgewogICAgICAgICAgICBsb2dkKCJbc2V0RGlzcGxheU5hbWVdKyAgZGlzcGxheU5hbWU6IiArIGRpc3BsYXlOYW1lICsgIiBzdWJJZDoiICsgc3ViSWQKICAgICAgICAgICAgICAgICAgICArICIgbmFtZVNvdXJjZToiICsgbmFtZVNvdXJjZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eUhlbHBlcihzdWJJZCwgInNldERpc3BsYXlOYW1lIiwKICAgICAgICAgICAgICAgIChpU3ViKS0+IGlTdWIuc2V0RGlzcGxheU5hbWVVc2luZ1NyYyhkaXNwbGF5TmFtZSwgc3ViSWQsIG5hbWVTb3VyY2UpCiAgICAgICAgKTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBwaG9uZSBudW1iZXIgYnkgc3ViSWQKICAgICAqIEBwYXJhbSBudW1iZXIgdGhlIHBob25lIG51bWJlciBvZiB0aGUgU0lNCiAgICAgKiBAcGFyYW0gc3ViSWQgdGhlIHVuaXF1ZSBTdWJzY3JpcHRpb25JbmZvIGluZGV4IGluIGRhdGFiYXNlCiAgICAgKiBAcmV0dXJuIHRoZSBudW1iZXIgb2YgcmVjb3JkcyB1cGRhdGVkCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAVW5zdXBwb3J0ZWRBcHBVc2FnZQogICAgcHVibGljIGludCBzZXREaXNwbGF5TnVtYmVyKFN0cmluZyBudW1iZXIsIGludCBzdWJJZCkgewogICAgICAgIGlmIChudW1iZXIgPT0gbnVsbCkgewogICAgICAgICAgICBsb2dkKCJbc2V0RGlzcGxheU51bWJlcl0tIGZhaWwiKTsKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc2V0U3Vic2NyaXB0aW9uUHJvcGVydHlIZWxwZXIoc3ViSWQsICJzZXREaXNwbGF5TnVtYmVyIiwKICAgICAgICAgICAgICAgIChpU3ViKS0+IGlTdWIuc2V0RGlzcGxheU51bWJlcihudW1iZXIsIHN1YklkKQogICAgICAgICk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgZGF0YSByb2FtaW5nIGJ5IHNpbUluZm8gaW5kZXgKICAgICAqIEBwYXJhbSByb2FtaW5nIDA6RG9uJ3QgYWxsb3cgZGF0YSB3aGVuIHJvYW1pbmcsIDE6QWxsb3cgZGF0YSB3aGVuIHJvYW1pbmcKICAgICAqIEBwYXJhbSBzdWJJZCB0aGUgdW5pcXVlIFN1YnNjcmlwdGlvbkluZm8gaW5kZXggaW4gZGF0YWJhc2UKICAgICAqIEByZXR1cm4gdGhlIG51bWJlciBvZiByZWNvcmRzIHVwZGF0ZWQKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBVbnN1cHBvcnRlZEFwcFVzYWdlCiAgICBwdWJsaWMgaW50IHNldERhdGFSb2FtaW5nKGludCByb2FtaW5nLCBpbnQgc3ViSWQpIHsKICAgICAgICBpZiAoVkRCRykgbG9nZCgiW3NldERhdGFSb2FtaW5nXSsgcm9hbWluZzoiICsgcm9hbWluZyArICIgc3ViSWQ6IiArIHN1YklkKTsKICAgICAgICByZXR1cm4gc2V0U3Vic2NyaXB0aW9uUHJvcGVydHlIZWxwZXIoc3ViSWQsICJzZXREYXRhUm9hbWluZyIsCiAgICAgICAgICAgICAgICAoaVN1YiktPmlTdWIuc2V0RGF0YVJvYW1pbmcocm9hbWluZywgc3ViSWQpCiAgICAgICAgKTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBzbG90SW5kZXggYXNzb2NpYXRlZCB3aXRoIHRoZSBzdWJzY3JpcHRpb24uCiAgICAgKgogICAgICogQHBhcmFtIHN1YnNjcmlwdGlvbklkIHRoZSB1bmlxdWUgU3Vic2NyaXB0aW9uSW5mbyBpbmRleCBpbiBkYXRhYmFzZQogICAgICogQHJldHVybiBzbG90SW5kZXggYXMgYSBwb3NpdGl2ZSBpbnRlZ2VyIG9yIHtAbGluayAjSU5WQUxJRF9TSU1fU0xPVF9JTkRFWH0gaWYgdGhlIHN1cHBsaWVkCiAgICAgKiBzdWJzY3JpcHRpb25JZCBkb2Vzbid0IGhhdmUgYW4gYXNzb2NpYXRlZCBzbG90IGluZGV4LgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGludCBnZXRTbG90SW5kZXgoaW50IHN1YnNjcmlwdGlvbklkKSB7CiAgICAgICAgcmV0dXJuIHNTbG90SW5kZXhDYWNoZS5xdWVyeShzdWJzY3JpcHRpb25JZCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgYW4gYXJyYXkgb2YgU3Vic2NyaXB0aW9uIElkcyBmb3Igc3BlY2lmaWVkIHNsb3QgSW5kZXguCiAgICAgKiBAcGFyYW0gc2xvdEluZGV4IHRoZSBzbG90IGluZGV4LgogICAgICogQHJldHVybiBzdWJzY3JpcHRpb24gSWRzIG9yIG51bGwgaWYgdGhlIGdpdmVuIHNsb3QgSW5kZXggaXMgbm90IHZhbGlkIG9yIHRoZXJlIGFyZSBubyBhY3RpdmUKICAgICAqIHN1YnNjcmlwdGlvbnMgaW4gdGhlIHNsb3QuCiAgICAgKi8KICAgIEBOdWxsYWJsZQogICAgcHVibGljIGludFtdIGdldFN1YnNjcmlwdGlvbklkcyhpbnQgc2xvdEluZGV4KSB7CiAgICAgICAgcmV0dXJuIGdldFN1YklkKHNsb3RJbmRleCk7CiAgICB9CgogICAgLyoqIEBoaWRlICovCiAgICBAVW5zdXBwb3J0ZWRBcHBVc2FnZQogICAgcHVibGljIHN0YXRpYyBpbnRbXSBnZXRTdWJJZChpbnQgc2xvdEluZGV4KSB7CiAgICAgICAgaWYgKCFpc1ZhbGlkU2xvdEluZGV4KHNsb3RJbmRleCkpIHsKICAgICAgICAgICAgbG9nZCgiW2dldFN1YklkXS0gZmFpbCIpOwogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CgogICAgICAgIGludFtdIHN1YklkID0gbnVsbDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHN1YklkID0gaVN1Yi5nZXRTdWJJZChzbG90SW5kZXgpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHN1YklkOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UobWF4VGFyZ2V0U2RrID0gQnVpbGQuVkVSU0lPTl9DT0RFUy5QKQogICAgcHVibGljIHN0YXRpYyBpbnQgZ2V0UGhvbmVJZChpbnQgc3ViSWQpIHsKICAgICAgICByZXR1cm4gc1Bob25lSWRDYWNoZS5xdWVyeShzdWJJZCk7CiAgICB9CgogICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCBsb2dkKFN0cmluZyBtc2cpIHsKICAgICAgICBSbG9nLmQoTE9HX1RBRywgbXNnKTsKICAgIH0KCiAgICBwcml2YXRlIHN0YXRpYyB2b2lkIGxvZ2UoU3RyaW5nIG1zZykgewogICAgICAgIFJsb2cuZShMT0dfVEFHLCBtc2cpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgc3lzdGVtJ3MgZGVmYXVsdCBzdWJzY3JpcHRpb24gaWQuCiAgICAgKgogICAgICogRm9yIGEgdm9pY2UgY2FwYWJsZSBkZXZpY2UsIGl0IHdpbGwgcmV0dXJuIGdldERlZmF1bHRWb2ljZVN1YnNjcmlwdGlvbklkLgogICAgICogRm9yIGEgZGF0YSBvbmx5IGRldmljZSwgaXQgd2lsbCByZXR1cm4gdGhlIGdldERlZmF1bHREYXRhU3Vic2NyaXB0aW9uSWQuCiAgICAgKiBNYXkgcmV0dXJuIGFuIElOVkFMSURfU1VCU0NSSVBUSU9OX0lEIG9uIGVycm9yLgogICAgICoKICAgICAqIEByZXR1cm4gdGhlICJzeXN0ZW0iIGRlZmF1bHQgc3Vic2NyaXB0aW9uIGlkLgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGludCBnZXREZWZhdWx0U3Vic2NyaXB0aW9uSWQoKSB7CiAgICAgICAgcmV0dXJuIHNEZWZhdWx0U3ViSWRDYWNoZS5xdWVyeShudWxsKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIHN5c3RlbSdzIGRlZmF1bHQgdm9pY2Ugc3Vic2NyaXB0aW9uIGlkLgogICAgICoKICAgICAqIE9uIGEgZGF0YSBvbmx5IGRldmljZSBvciBvbiBlcnJvciwgd2lsbCByZXR1cm4gSU5WQUxJRF9TVUJTQ1JJUFRJT05fSUQuCiAgICAgKgogICAgICogQHJldHVybiB0aGUgZGVmYXVsdCB2b2ljZSBzdWJzY3JpcHRpb24gSWQuCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgaW50IGdldERlZmF1bHRWb2ljZVN1YnNjcmlwdGlvbklkKCkgewogICAgICAgIGludCBzdWJJZCA9IElOVkFMSURfU1VCU0NSSVBUSU9OX0lEOwoKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgc3ViSWQgPSBpU3ViLmdldERlZmF1bHRWb2ljZVN1YklkKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQoKICAgICAgICBpZiAoVkRCRykgbG9nZCgiZ2V0RGVmYXVsdFZvaWNlU3Vic2NyaXB0aW9uSWQsIHN1YiBpZCA9ICIgKyBzdWJJZCk7CiAgICAgICAgcmV0dXJuIHN1YklkOwogICAgfQoKICAgIC8qKgogICAgICogU2V0cyB0aGUgc3lzdGVtJ3MgZGVmYXVsdCB2b2ljZSBzdWJzY3JpcHRpb24gaWQuCiAgICAgKgogICAgICogT24gYSBkYXRhLW9ubHkgZGV2aWNlLCB0aGlzIGlzIGEgbm8tb3AuCiAgICAgKgogICAgICogTWF5IHRocm93IGEge0BsaW5rIFJ1bnRpbWVFeGNlcHRpb259IGlmIHRoZSBwcm92aWRlZCBzdWJzY3JpcHRpb24gaWQgaXMgZXF1YWwgdG8KICAgICAqIHtAbGluayBTdWJzY3JpcHRpb25NYW5hZ2VyI0RFRkFVTFRfU1VCU0NSSVBUSU9OX0lEfQogICAgICoKICAgICAqIEBwYXJhbSBzdWJzY3JpcHRpb25JZCBBIHZhbGlkIHN1YnNjcmlwdGlvbiBJRCB0byBzZXQgYXMgdGhlIHN5c3RlbSBkZWZhdWx0LCBvcgogICAgICogICAgICAgICAgICAgICAgICAgICAgIHtAbGluayBTdWJzY3JpcHRpb25NYW5hZ2VyI0lOVkFMSURfU1VCU0NSSVBUSU9OX0lEfQogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgQFRlc3RBcGkKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oTWFuaWZlc3QucGVybWlzc2lvbi5NT0RJRllfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgdm9pZCBzZXREZWZhdWx0Vm9pY2VTdWJzY3JpcHRpb25JZChpbnQgc3Vic2NyaXB0aW9uSWQpIHsKICAgICAgICBpZiAoVkRCRykgbG9nZCgic2V0RGVmYXVsdFZvaWNlU3ViSWQgc3ViIGlkID0gIiArIHN1YnNjcmlwdGlvbklkKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaVN1Yi5zZXREZWZhdWx0Vm9pY2VTdWJJZChzdWJzY3JpcHRpb25JZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogU2FtZSBhcyB7QGxpbmsgI3NldERlZmF1bHRWb2ljZVN1YnNjcmlwdGlvbklkKGludCl9LCBidXQgcHJlc2VydmVkIGZvciBiYWNrd2FyZHMKICAgICAqIGNvbXBhdGliaWxpdHkuCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgdm9pZCBzZXREZWZhdWx0Vm9pY2VTdWJJZChpbnQgc3ViSWQpIHsKICAgICAgICBzZXREZWZhdWx0Vm9pY2VTdWJzY3JpcHRpb25JZChzdWJJZCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gdGhlIFN1YnNjcmlwdGlvbkluZm8gZm9yIGRlZmF1bHQgdm9pY2Ugc3Vic2NyaXB0aW9uLgogICAgICoKICAgICAqIFdpbGwgcmV0dXJuIG51bGwgb24gZGF0YSBvbmx5IGRldmljZXMsIG9yIG9uIGVycm9yLgogICAgICoKICAgICAqIEByZXR1cm4gdGhlIFN1YnNjcmlwdGlvbkluZm8gZm9yIHRoZSBkZWZhdWx0IHZvaWNlIHN1YnNjcmlwdGlvbi4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBVbnN1cHBvcnRlZEFwcFVzYWdlCiAgICBwdWJsaWMgU3Vic2NyaXB0aW9uSW5mbyBnZXREZWZhdWx0Vm9pY2VTdWJzY3JpcHRpb25JbmZvKCkgewogICAgICAgIHJldHVybiBnZXRBY3RpdmVTdWJzY3JpcHRpb25JbmZvKGdldERlZmF1bHRWb2ljZVN1YnNjcmlwdGlvbklkKCkpOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UKICAgIHB1YmxpYyBzdGF0aWMgaW50IGdldERlZmF1bHRWb2ljZVBob25lSWQoKSB7CiAgICAgICAgcmV0dXJuIGdldFBob25lSWQoZ2V0RGVmYXVsdFZvaWNlU3Vic2NyaXB0aW9uSWQoKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBzeXN0ZW0ncyBkZWZhdWx0IFNNUyBzdWJzY3JpcHRpb24gaWQuCiAgICAgKgogICAgICogT24gYSBkYXRhIG9ubHkgZGV2aWNlIG9yIG9uIGVycm9yLCB3aWxsIHJldHVybiBJTlZBTElEX1NVQlNDUklQVElPTl9JRC4KICAgICAqCiAgICAgKiBAcmV0dXJuIHRoZSBkZWZhdWx0IFNNUyBzdWJzY3JpcHRpb24gSWQuCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgaW50IGdldERlZmF1bHRTbXNTdWJzY3JpcHRpb25JZCgpIHsKICAgICAgICByZXR1cm4gc0RlZmF1bHRTbXNTdWJJZENhY2hlLnF1ZXJ5KG51bGwpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHRoZSBzdWJzY3JpcHRpb24gd2hpY2ggd2lsbCBiZSB1c2VkIGJ5IGRlZmF1bHQgZm9yIFNNUywgd2l0aCB0aGUgc3Vic2NyaXB0aW9uIHdoaWNoCiAgICAgKiB0aGUgc3VwcGxpZWQgc3Vic2NyaXB0aW9uIElEIGNvcnJlc3BvbmRzIHRvOyBvciB0aHJvdyBhIFJ1bnRpbWVFeGNlcHRpb24gaWYgdGhlIHN1cHBsaWVkCiAgICAgKiBzdWJzY3JpcHRpb24gSUQgaXMgbm90IHVzYWJsZSAoY2hlY2sgd2l0aCB7QGxpbmsgI2lzVXNhYmxlU3Vic2NyaXB0aW9uSWQoaW50KX0pLgogICAgICoKICAgICAqIEBwYXJhbSBzdWJzY3JpcHRpb25JZCB0aGUgc3VwcGxpZWQgc3Vic2NyaXB0aW9uIElECiAgICAgKgogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgQFJlcXVpcmVzUGVybWlzc2lvbihhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uTU9ESUZZX1BIT05FX1NUQVRFKQogICAgcHVibGljIHZvaWQgc2V0RGVmYXVsdFNtc1N1YklkKGludCBzdWJzY3JpcHRpb25JZCkgewogICAgICAgIGlmIChWREJHKSBsb2dkKCJzZXREZWZhdWx0U21zU3ViSWQgc3ViIGlkID0gIiArIHN1YnNjcmlwdGlvbklkKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaVN1Yi5zZXREZWZhdWx0U21zU3ViSWQoc3Vic2NyaXB0aW9uSWQpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIGV4LnJldGhyb3dGcm9tU3lzdGVtU2VydmVyKCk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJuIHRoZSBTdWJzY3JpcHRpb25JbmZvIGZvciBkZWZhdWx0IHZvaWNlIHN1YnNjcmlwdGlvbi4KICAgICAqCiAgICAgKiBXaWxsIHJldHVybiBudWxsIG9uIGRhdGEgb25seSBkZXZpY2VzLCBvciBvbiBlcnJvci4KICAgICAqCiAgICAgKiBAcmV0dXJuIHRoZSBTdWJzY3JpcHRpb25JbmZvIGZvciB0aGUgZGVmYXVsdCBTTVMgc3Vic2NyaXB0aW9uLgogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIFN1YnNjcmlwdGlvbkluZm8gZ2V0RGVmYXVsdFNtc1N1YnNjcmlwdGlvbkluZm8oKSB7CiAgICAgICAgcmV0dXJuIGdldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm8oZ2V0RGVmYXVsdFNtc1N1YnNjcmlwdGlvbklkKCkpOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UKICAgIHB1YmxpYyBpbnQgZ2V0RGVmYXVsdFNtc1Bob25lSWQoKSB7CiAgICAgICAgcmV0dXJuIGdldFBob25lSWQoZ2V0RGVmYXVsdFNtc1N1YnNjcmlwdGlvbklkKCkpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgc3lzdGVtJ3MgZGVmYXVsdCBkYXRhIHN1YnNjcmlwdGlvbiBpZC4KICAgICAqCiAgICAgKiBPbiBhIHZvaWNlIG9ubHkgZGV2aWNlIG9yIG9uIGVycm9yLCB3aWxsIHJldHVybiBJTlZBTElEX1NVQlNDUklQVElPTl9JRC4KICAgICAqCiAgICAgKiBAcmV0dXJuIHRoZSBkZWZhdWx0IGRhdGEgc3Vic2NyaXB0aW9uIElkLgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGludCBnZXREZWZhdWx0RGF0YVN1YnNjcmlwdGlvbklkKCkgewogICAgICAgIHJldHVybiBzRGVmYXVsdERhdGFTdWJJZENhY2hlLnF1ZXJ5KG51bGwpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHRoZSBzdWJzY3JpcHRpb24gd2hpY2ggd2lsbCBiZSB1c2VkIGJ5IGRlZmF1bHQgZm9yIGRhdGEsIHdpdGggdGhlIHN1YnNjcmlwdGlvbiB3aGljaAogICAgICogdGhlIHN1cHBsaWVkIHN1YnNjcmlwdGlvbiBJRCBjb3JyZXNwb25kcyB0bzsgb3IgdGhyb3cgYSBSdW50aW1lRXhjZXB0aW9uIGlmIHRoZSBzdXBwbGllZAogICAgICogc3Vic2NyaXB0aW9uIElEIGlzIG5vdCB1c2FibGUgKGNoZWNrIHdpdGgge0BsaW5rICNpc1VzYWJsZVN1YnNjcmlwdGlvbklkKGludCl9KS4KICAgICAqCiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uSWQgdGhlIHN1cHBsaWVkIHN1YnNjcmlwdGlvbiBJRAogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBTeXN0ZW1BcGkKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLk1PRElGWV9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyB2b2lkIHNldERlZmF1bHREYXRhU3ViSWQoaW50IHN1YnNjcmlwdGlvbklkKSB7CiAgICAgICAgaWYgKFZEQkcpIGxvZ2QoInNldERhdGFTdWJzY3JpcHRpb24gc3ViIGlkID0gIiArIHN1YnNjcmlwdGlvbklkKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaVN1Yi5zZXREZWZhdWx0RGF0YVN1YklkKHN1YnNjcmlwdGlvbklkKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gdGhlIFN1YnNjcmlwdGlvbkluZm8gZm9yIGRlZmF1bHQgZGF0YSBzdWJzY3JpcHRpb24uCiAgICAgKgogICAgICogV2lsbCByZXR1cm4gbnVsbCBvbiB2b2ljZSBvbmx5IGRldmljZXMsIG9yIG9uIGVycm9yLgogICAgICoKICAgICAqIEByZXR1cm4gdGhlIFN1YnNjcmlwdGlvbkluZm8gZm9yIHRoZSBkZWZhdWx0IGRhdGEgc3Vic2NyaXB0aW9uLgogICAgICogQGhpZGUKICAgICAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UKICAgIHB1YmxpYyBTdWJzY3JpcHRpb25JbmZvIGdldERlZmF1bHREYXRhU3Vic2NyaXB0aW9uSW5mbygpIHsKICAgICAgICByZXR1cm4gZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mbyhnZXREZWZhdWx0RGF0YVN1YnNjcmlwdGlvbklkKCkpOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UKICAgIHB1YmxpYyBpbnQgZ2V0RGVmYXVsdERhdGFQaG9uZUlkKCkgewogICAgICAgIHJldHVybiBnZXRQaG9uZUlkKGdldERlZmF1bHREYXRhU3Vic2NyaXB0aW9uSWQoKSk7CiAgICB9CgogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgdm9pZCBjbGVhclN1YnNjcmlwdGlvbkluZm8oKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGlTdWIuY2xlYXJTdWJJbmZvKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQoKICAgICAgICByZXR1cm47CiAgICB9CgogICAgLy9GSVhNRSB0aGlzIGlzIHZ1bG5lcmFibGUgdG8gcmFjZSBjb25kaXRpb25zCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBib29sZWFuIGFsbERlZmF1bHRzU2VsZWN0ZWQoKSB7CiAgICAgICAgaWYgKCFpc1ZhbGlkU3Vic2NyaXB0aW9uSWQoZ2V0RGVmYXVsdERhdGFTdWJzY3JpcHRpb25JZCgpKSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmICghaXNWYWxpZFN1YnNjcmlwdGlvbklkKGdldERlZmF1bHRTbXNTdWJzY3JpcHRpb25JZCgpKSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmICghaXNWYWxpZFN1YnNjcmlwdGlvbklkKGdldERlZmF1bHRWb2ljZVN1YnNjcmlwdGlvbklkKCkpKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVjayBpZiB0aGUgc3VwcGxpZWQgc3Vic2NyaXB0aW9uIElEIGlzIHZhbGlkLgogICAgICoKICAgICAqIDxwPkEgdmFsaWQgc3Vic2NyaXB0aW9uIElEIGlzIG5vdCBuZWNlc3NhcmlseSBhbiBhY3RpdmUgc3Vic2NyaXB0aW9uIElECiAgICAgKiAoc2VlIHtAbGluayAjaXNBY3RpdmVTdWJzY3JpcHRpb25JZChpbnQpfSkgb3IgYW4gdXNhYmxlIHN1YnNjcmlwdGlvbiBJRAogICAgICogKHNlZSB7QGxpbmsgI2lzVXNhYmxlU3Vic2NyaXB0aW9uSWQoaW50KX0pLiBVbmxlc3Mgc3BlY2lmaWNhbGx5IG5vdGVkLCBzdWJzY3JpcHRpb24KICAgICAqIEFQSXMgd29yayB3aXRoIGEgdmFsaWQgc3Vic2NyaXB0aW9uIElELgogICAgICoKICAgICAqIEBwYXJhbSBzdWJzY3JpcHRpb25JZCBUaGUgc3Vic2NyaXB0aW9uIElELgogICAgICogQHJldHVybiB7QGNvZGUgdHJ1ZX0gaWYgdGhlIHN1cHBsaWVkIHN1YnNjcmlwdGlvbklkIGlzIHZhbGlkOyB7QGNvZGUgZmFsc2V9IG90aGVyd2lzZS4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBib29sZWFuIGlzVmFsaWRTdWJzY3JpcHRpb25JZChpbnQgc3Vic2NyaXB0aW9uSWQpIHsKICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uSWQgPiBJTlZBTElEX1NVQlNDUklQVElPTl9JRDsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrIGlmIHRoZSBzdXBwbGllZCBzdWJzY3JpcHRpb24gSUQgaXMgdXNhYmxlLgogICAgICoKICAgICAqIDxwPkEgdXNhYmxlIHN1YnNjcmlwdGlvbiBJRCBpcyBhIHZhbGlkIHN1YnNjcmlwdGlvbiBJRCwgYnV0IG5vdCBuZWNlc3NhcmlseSBhbiBhY3RpdmUKICAgICAqIHN1YnNjcmlwdGlvbiBJRCAoc2VlIHtAbGluayAjaXNBY3RpdmVTdWJzY3JpcHRpb25JZChpbnQpfSkuIFNvbWUgc3Vic2NyaXB0aW9uIEFQSXMKICAgICAqIHJlcXVpcmUgYSB1c2FibGUgc3Vic2NyaXB0aW9uIElELCBhbmQgdGhpcyBpcyBub3RlZCBpbiB0aGVpciBkb2N1bWVudGF0aW9uOyBvdGhlcndpc2UsIGEKICAgICAqIHN1YnNjcmlwdGlvbiBJRCBkb2VzIG5vdCBuZWVkIHRvIGJlIHVzYWJsZSBmb3Igc3Vic2NyaXB0aW9uIGZ1bmN0aW9ucywgb25seSB2YWxpZC4KICAgICAqCiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uSWQgdGhlIHN1YnNjcmlwdGlvbiBJRAogICAgICogQHJldHVybiB7QGNvZGUgdHJ1ZX0gaWYgdGhlIHN1YnNjcmlwdGlvbiBJRCBpcyB1c2FibGU7IHtAY29kZSBmYWxzZX0gb3RoZXJ3aXNlLgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW4gaXNVc2FibGVTdWJzY3JpcHRpb25JZChpbnQgc3Vic2NyaXB0aW9uSWQpIHsKICAgICAgICByZXR1cm4gaXNVc2FibGVTdWJJZFZhbHVlKHN1YnNjcmlwdGlvbklkKTsKICAgIH0KCiAgICAvKioKICAgICAqIEByZXR1cm4gdHJ1ZSBpZiBzdWJJZCBpcyBhbiB1c2FibGUgc3ViSWQgdmFsdWUgZWxzZSBmYWxzZS4gQQogICAgICogdXNhYmxlIHN1YklkIG1lYW5zIGl0cyBuZWl0aGVyIGEgSU5WQUxJRF9TVUJTQ1JJUFRJT05fSUQgbm9yIGEgREVGQVVMVF9TVUJfSUQuCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAVW5zdXBwb3J0ZWRBcHBVc2FnZShtYXhUYXJnZXRTZGsgPSBCdWlsZC5WRVJTSU9OX0NPREVTLlApCiAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW4gaXNVc2FibGVTdWJJZFZhbHVlKGludCBzdWJJZCkgewogICAgICAgIHJldHVybiBzdWJJZCA+PSBNSU5fU1VCU0NSSVBUSU9OX0lEX1ZBTFVFICYmIHN1YklkIDw9IE1BWF9TVUJTQ1JJUFRJT05fSURfVkFMVUU7CiAgICB9CgogICAgLyoqIEBoaWRlICovCiAgICBAVW5zdXBwb3J0ZWRBcHBVc2FnZShtYXhUYXJnZXRTZGsgPSBCdWlsZC5WRVJTSU9OX0NPREVTLlAsIHRyYWNraW5nQnVnID0gMTE1NjA5MDIzKQogICAgcHVibGljIHN0YXRpYyBib29sZWFuIGlzVmFsaWRTbG90SW5kZXgoaW50IHNsb3RJbmRleCkgewogICAgICAgIHJldHVybiBzbG90SW5kZXggPj0gMCAmJiBzbG90SW5kZXggPCBUZWxlcGhvbnlNYW5hZ2VyLmdldERlZmF1bHQoKS5nZXRBY3RpdmVNb2RlbUNvdW50KCk7CiAgICB9CgogICAgLyoqIEBoaWRlICovCiAgICBAVW5zdXBwb3J0ZWRBcHBVc2FnZQogICAgcHVibGljIHN0YXRpYyBib29sZWFuIGlzVmFsaWRQaG9uZUlkKGludCBwaG9uZUlkKSB7CiAgICAgICAgcmV0dXJuIHBob25lSWQgPj0gMCAmJiBwaG9uZUlkIDwgVGVsZXBob255TWFuYWdlci5nZXREZWZhdWx0KCkuZ2V0QWN0aXZlTW9kZW1Db3VudCgpOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UobWF4VGFyZ2V0U2RrID0gQnVpbGQuVkVSU0lPTl9DT0RFUy5QKQogICAgcHVibGljIHN0YXRpYyB2b2lkIHB1dFBob25lSWRBbmRTdWJJZEV4dHJhKEludGVudCBpbnRlbnQsIGludCBwaG9uZUlkKSB7CiAgICAgICAgaW50W10gc3ViSWRzID0gU3Vic2NyaXB0aW9uTWFuYWdlci5nZXRTdWJJZChwaG9uZUlkKTsKICAgICAgICBpZiAoc3ViSWRzICE9IG51bGwgJiYgc3ViSWRzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgcHV0UGhvbmVJZEFuZFN1YklkRXh0cmEoaW50ZW50LCBwaG9uZUlkLCBzdWJJZHNbMF0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxvZ2QoInB1dFBob25lSWRBbmRTdWJJZEV4dHJhOiBubyB2YWxpZCBzdWJzIik7CiAgICAgICAgICAgIGludGVudC5wdXRFeHRyYShQaG9uZUNvbnN0YW50cy5QSE9ORV9LRVksIHBob25lSWQpOwogICAgICAgICAgICBpbnRlbnQucHV0RXh0cmEoRVhUUkFfU0xPVF9JTkRFWCwgcGhvbmVJZCk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgQFVuc3VwcG9ydGVkQXBwVXNhZ2UKICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBwdXRQaG9uZUlkQW5kU3ViSWRFeHRyYShJbnRlbnQgaW50ZW50LCBpbnQgcGhvbmVJZCwgaW50IHN1YklkKSB7CiAgICAgICAgaWYgKFZEQkcpIGxvZ2QoInB1dFBob25lSWRBbmRTdWJJZEV4dHJhOiBwaG9uZUlkPSIgKyBwaG9uZUlkICsgIiBzdWJJZD0iICsgc3ViSWQpOwogICAgICAgIGludGVudC5wdXRFeHRyYShFWFRSQV9TTE9UX0lOREVYLCBwaG9uZUlkKTsKICAgICAgICBpbnRlbnQucHV0RXh0cmEoUGhvbmVDb25zdGFudHMuUEhPTkVfS0VZLCBwaG9uZUlkKTsKICAgICAgICBwdXRTdWJzY3JpcHRpb25JZEV4dHJhKGludGVudCwgc3ViSWQpOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHZpc2libGUgc3Vic2NyaXB0aW9uIElkKHMpIG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIFNJTShzKS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHRoZSBsaXN0IG9mIHN1YklkJ3MgdGhhdCBhcmUgYWN0aXZlLAogICAgICogICAgICAgICBpcyBuZXZlciBudWxsIGJ1dCB0aGUgbGVuZ3RoIG1heSBiZSAwLgogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgQFJlcXVpcmVzUGVybWlzc2lvbihNYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUFJJVklMRUdFRF9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBATm9uTnVsbCBpbnRbXSBnZXRBY3RpdmVTdWJzY3JpcHRpb25JZExpc3QoKSB7CiAgICAgICAgcmV0dXJuIGdldEFjdGl2ZVN1YnNjcmlwdGlvbklkTGlzdCgvKiB2aXNpYmxlT25seSAqLyB0cnVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBib3RoIGhpZGRlbiBhbmQgdmlzaWJsZSBzdWJzY3JpcHRpb24gSWQocykgb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgU0lNKHMpLgogICAgICoKICAgICAqIEhpZGRlbiBzdWJzY3JpcHRpb25zIHJlZmVyIHRvIHRob3NlIGFyZSBub3QgbWVhbnQgdmlzaWJsZSB0byB0aGUgdXNlcnMuCiAgICAgKiBGb3IgZXhhbXBsZSwgYW4gb3Bwb3J0dW5pc3RpYyBzdWJzY3JpcHRpb24gdGhhdCBpcyBncm91cGVkIHdpdGggb3RoZXIKICAgICAqIHN1YnNjcmlwdGlvbnMgc2hvdWxkIHJlbWFpbiBpbnZpc2libGUgdG8gdXNlcnMgYXMgdGhleSBhcmUgb25seSBmdW5jdGlvbmFsbHkKICAgICAqIHN1cHBsZW1lbnRhcnkgdG8gcHJpbWFyeSBvbmVzLgogICAgICoKICAgICAqIEByZXR1cm4gdGhlIGxpc3Qgb2Ygc3ViSWQncyB0aGF0IGFyZSBhY3RpdmUsCiAgICAgKiAgICAgICAgIGlzIG5ldmVyIG51bGwgYnV0IHRoZSBsZW5ndGggbWF5IGJlIDAuCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAU3lzdGVtQXBpCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKE1hbmlmZXN0LnBlcm1pc3Npb24uUkVBRF9QUklWSUxFR0VEX1BIT05FX1NUQVRFKQogICAgcHVibGljIEBOb25OdWxsIGludFtdIGdldENvbXBsZXRlQWN0aXZlU3Vic2NyaXB0aW9uSWRMaXN0KCkgewogICAgICAgIHJldHVybiBnZXRBY3RpdmVTdWJzY3JpcHRpb25JZExpc3QoLyogdmlzaWJsZU9ubHkgKi9mYWxzZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAcmV0dXJuIGEgbm9uLW51bGwgbGlzdCBvZiBzdWJJZCdzIHRoYXQgYXJlIGFjdGl2ZS4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgQE5vbk51bGwgaW50W10gZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSWRMaXN0KGJvb2xlYW4gdmlzaWJsZU9ubHkpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaW50W10gc3ViSWQgPSBpU3ViLmdldEFjdGl2ZVN1YklkTGlzdCh2aXNpYmxlT25seSk7CiAgICAgICAgICAgICAgICBpZiAoc3ViSWQgIT0gbnVsbCkgcmV0dXJuIHN1YklkOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG5ldyBpbnRbMF07CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGRldmljZSBpcyBjb25zaWRlcmVkIHJvYW1pbmcgb24gdGhlIGN1cnJlbnQKICAgICAqIG5ldHdvcmsgZm9yIGEgc3Vic2NyaXB0aW9uLgogICAgICogPHA+CiAgICAgKiBBdmFpbGFiaWxpdHk6IE9ubHkgd2hlbiB1c2VyIHJlZ2lzdGVyZWQgdG8gYSBuZXR3b3JrLgogICAgICoKICAgICAqIEBwYXJhbSBzdWJJZCBUaGUgc3Vic2NyaXB0aW9uIElECiAgICAgKiBAcmV0dXJuIHRydWUgaWYgdGhlIG5ldHdvcmsgZm9yIHRoZSBzdWJzY3JpcHRpb24gaXMgcm9hbWluZywgZmFsc2Ugb3RoZXJ3aXNlCiAgICAgKi8KICAgIHB1YmxpYyBib29sZWFuIGlzTmV0d29ya1JvYW1pbmcoaW50IHN1YklkKSB7CiAgICAgICAgZmluYWwgaW50IHBob25lSWQgPSBnZXRQaG9uZUlkKHN1YklkKTsKICAgICAgICBpZiAocGhvbmVJZCA8IDApIHsKICAgICAgICAgICAgLy8gV2hhdCBlbHNlIGNhbiB3ZSBkbz8KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gVGVsZXBob255TWFuYWdlci5nZXREZWZhdWx0KCkuaXNOZXR3b3JrUm9hbWluZyhzdWJJZCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGEgY29uc3RhbnQgaW5kaWNhdGluZyB0aGUgc3RhdGUgb2Ygc2ltIGZvciB0aGUgc2xvdCBpbmRleC4KICAgICAqCiAgICAgKiBAcGFyYW0gc2xvdEluZGV4CiAgICAgKgogICAgICoge0BTZWUgVGVsZXBob255TWFuYWdlciNTSU1fU1RBVEVfVU5LTk9XTn0KICAgICAqIHtAU2VlIFRlbGVwaG9ueU1hbmFnZXIjU0lNX1NUQVRFX0FCU0VOVH0KICAgICAqIHtAU2VlIFRlbGVwaG9ueU1hbmFnZXIjU0lNX1NUQVRFX1BJTl9SRVFVSVJFRH0KICAgICAqIHtAU2VlIFRlbGVwaG9ueU1hbmFnZXIjU0lNX1NUQVRFX1BVS19SRVFVSVJFRH0KICAgICAqIHtAU2VlIFRlbGVwaG9ueU1hbmFnZXIjU0lNX1NUQVRFX05FVFdPUktfTE9DS0VEfQogICAgICoge0BTZWUgVGVsZXBob255TWFuYWdlciNTSU1fU1RBVEVfUkVBRFl9CiAgICAgKiB7QFNlZSBUZWxlcGhvbnlNYW5hZ2VyI1NJTV9TVEFURV9OT1RfUkVBRFl9CiAgICAgKiB7QFNlZSBUZWxlcGhvbnlNYW5hZ2VyI1NJTV9TVEFURV9QRVJNX0RJU0FCTEVEfQogICAgICoge0BTZWUgVGVsZXBob255TWFuYWdlciNTSU1fU1RBVEVfQ0FSRF9JT19FUlJPUn0KICAgICAqCiAgICAgKiB7QGhpZGV9CiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgaW50IGdldFNpbVN0YXRlRm9yU2xvdEluZGV4KGludCBzbG90SW5kZXgpIHsKICAgICAgICBpbnQgc2ltU3RhdGUgPSBUZWxlcGhvbnlNYW5hZ2VyLlNJTV9TVEFURV9VTktOT1dOOwoKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgc2ltU3RhdGUgPSBpU3ViLmdldFNpbVN0YXRlRm9yU2xvdEluZGV4KHNsb3RJbmRleCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzaW1TdGF0ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFN0b3JlIHByb3BlcnRpZXMgYXNzb2NpYXRlZCB3aXRoIFN1YnNjcmlwdGlvbkluZm8gaW4gZGF0YWJhc2UKICAgICAqIEBwYXJhbSBzdWJJZCBTdWJzY3JpcHRpb24gSWQgb2YgU3Vic2NyaXB0aW9uCiAgICAgKiBAcGFyYW0gcHJvcEtleSBDb2x1bW4gbmFtZSBpbiBkYXRhYmFzZSBhc3NvY2lhdGVkIHdpdGggU3Vic2NyaXB0aW9uSW5mbwogICAgICogQHBhcmFtIHByb3BWYWx1ZSBWYWx1ZSB0byBzdG9yZSBpbiBEQiBmb3IgcGFydGljdWxhciBzdWJJZCAmIGNvbHVtbiBuYW1lCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgc2V0U3Vic2NyaXB0aW9uUHJvcGVydHkoaW50IHN1YklkLCBTdHJpbmcgcHJvcEtleSwgU3RyaW5nIHByb3BWYWx1ZSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBpU3ViLnNldFN1YnNjcmlwdGlvblByb3BlcnR5KHN1YklkLCBwcm9wS2V5LCBwcm9wVmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFN0b3JlIHByb3BlcnRpZXMgYXNzb2NpYXRlZCB3aXRoIFN1YnNjcmlwdGlvbkluZm8gaW4gZGF0YWJhc2UKICAgICAqIEBwYXJhbSBzdWJJZCBTdWJzY3JpcHRpb24gSWQgb2YgU3Vic2NyaXB0aW9uCiAgICAgKiBAcGFyYW0gcHJvcEtleSBDb2x1bW4gbmFtZSBpbiBTdWJzY3JpcHRpb25JbmZvIGRhdGFiYXNlCiAgICAgKiBAcmV0dXJuIFZhbHVlIGFzc29jaWF0ZWQgd2l0aCBzdWJJZCBhbmQgcHJvcEtleSBjb2x1bW4gaW4gZGF0YWJhc2UKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHByaXZhdGUgc3RhdGljIFN0cmluZyBnZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eShpbnQgc3ViSWQsIFN0cmluZyBwcm9wS2V5LAogICAgICAgICAgICBDb250ZXh0IGNvbnRleHQpIHsKICAgICAgICBTdHJpbmcgcmVzdWx0VmFsdWUgPSBudWxsOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXN1bHRWYWx1ZSA9IGlTdWIuZ2V0U3Vic2NyaXB0aW9uUHJvcGVydHkoc3ViSWQsIHByb3BLZXksCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpLCBjb250ZXh0LmdldEF0dHJpYnV0aW9uVGFnKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0VmFsdWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGJvb2xlYW4gdmFsdWUgY29ycmVzcG9uZGluZyB0byBxdWVyeSByZXN1bHQuCiAgICAgKiBAcGFyYW0gc3ViSWQgU3Vic2NyaXB0aW9uIElkIG9mIFN1YnNjcmlwdGlvbgogICAgICogQHBhcmFtIHByb3BLZXkgQ29sdW1uIG5hbWUgaW4gU3Vic2NyaXB0aW9uSW5mbyBkYXRhYmFzZQogICAgICogQHBhcmFtIGRlZlZhbHVlIERlZmF1bHQgYm9vbGVhbiB2YWx1ZSB0byBiZSByZXR1cm5lZAogICAgICogQHJldHVybiBib29sZWFuIHJlc3VsdCB2YWx1ZSB0byBiZSByZXR1cm5lZAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBib29sZWFuIGdldEJvb2xlYW5TdWJzY3JpcHRpb25Qcm9wZXJ0eShpbnQgc3ViSWQsIFN0cmluZyBwcm9wS2V5LAogICAgICAgICAgICBib29sZWFuIGRlZlZhbHVlLCBDb250ZXh0IGNvbnRleHQpIHsKICAgICAgICBTdHJpbmcgcmVzdWx0ID0gZ2V0U3Vic2NyaXB0aW9uUHJvcGVydHkoc3ViSWQsIHByb3BLZXksIGNvbnRleHQpOwogICAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcmV0dXJuIEludGVnZXIucGFyc2VJbnQocmVzdWx0KSA9PSAxOwogICAgICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZXJyKSB7CiAgICAgICAgICAgICAgICBsb2dkKCJnZXRCb29sZWFuU3Vic2NyaXB0aW9uUHJvcGVydHkgTnVtYmVyRm9ybWF0IGV4Y2VwdGlvbiIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBkZWZWYWx1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgaW50ZWdlciB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHF1ZXJ5IHJlc3VsdC4KICAgICAqIEBwYXJhbSBzdWJJZCBTdWJzY3JpcHRpb24gSWQgb2YgU3Vic2NyaXB0aW9uCiAgICAgKiBAcGFyYW0gcHJvcEtleSBDb2x1bW4gbmFtZSBpbiBTdWJzY3JpcHRpb25JbmZvIGRhdGFiYXNlCiAgICAgKiBAcGFyYW0gZGVmVmFsdWUgRGVmYXVsdCBpbnRlZ2VyIHZhbHVlIHRvIGJlIHJldHVybmVkCiAgICAgKiBAcmV0dXJuIGludGVnZXIgcmVzdWx0IHZhbHVlIHRvIGJlIHJldHVybmVkCiAgICAgKiBAaGlkZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGludCBnZXRJbnRlZ2VyU3Vic2NyaXB0aW9uUHJvcGVydHkoaW50IHN1YklkLCBTdHJpbmcgcHJvcEtleSwgaW50IGRlZlZhbHVlLAogICAgICAgICAgICBDb250ZXh0IGNvbnRleHQpIHsKICAgICAgICBTdHJpbmcgcmVzdWx0ID0gZ2V0U3Vic2NyaXB0aW9uUHJvcGVydHkoc3ViSWQsIHByb3BLZXksIGNvbnRleHQpOwogICAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcmV0dXJuIEludGVnZXIucGFyc2VJbnQocmVzdWx0KTsKICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGVycikgewogICAgICAgICAgICAgICAgbG9nZCgiZ2V0SW50ZWdlclN1YnNjcmlwdGlvblByb3BlcnR5IE51bWJlckZvcm1hdCBleGNlcHRpb24iKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZGVmVmFsdWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGxvbmcgdmFsdWUgY29ycmVzcG9uZGluZyB0byBxdWVyeSByZXN1bHQuCiAgICAgKiBAcGFyYW0gc3ViSWQgU3Vic2NyaXB0aW9uIElkIG9mIFN1YnNjcmlwdGlvbgogICAgICogQHBhcmFtIHByb3BLZXkgQ29sdW1uIG5hbWUgaW4gU3Vic2NyaXB0aW9uSW5mbyBkYXRhYmFzZQogICAgICogQHBhcmFtIGRlZlZhbHVlIERlZmF1bHQgbG9uZyB2YWx1ZSB0byBiZSByZXR1cm5lZAogICAgICogQHJldHVybiBsb25nIHJlc3VsdCB2YWx1ZSB0byBiZSByZXR1cm5lZAogICAgICogQGhpZGUKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBsb25nIGdldExvbmdTdWJzY3JpcHRpb25Qcm9wZXJ0eShpbnQgc3ViSWQsIFN0cmluZyBwcm9wS2V5LCBsb25nIGRlZlZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnRleHQgY29udGV4dCkgewogICAgICAgIFN0cmluZyByZXN1bHQgPSBnZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eShzdWJJZCwgcHJvcEtleSwgY29udGV4dCk7CiAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICByZXR1cm4gTG9uZy5wYXJzZUxvbmcocmVzdWx0KTsKICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGVycikgewogICAgICAgICAgICAgICAgbG9nZCgiZ2V0TG9uZ1N1YnNjcmlwdGlvblByb3BlcnR5IE51bWJlckZvcm1hdCBleGNlcHRpb24iKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZGVmVmFsdWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSB7QGxpbmsgUmVzb3VyY2VzfSBmcm9tIHRoZSBnaXZlbiB7QGxpbmsgQ29udGV4dH0gZm9yIHRoZSBNQ0MvTU5DIGFzc29jaWF0ZWQgd2l0aAogICAgICogdGhlIHN1YnNjcmlwdGlvbi4gSWYgdGhlIHN1YnNjcmlwdGlvbiBJRCBpcyBpbnZhbGlkLCB0aGUgYmFzZSByZXNvdXJjZXMgYXJlIHJldHVybmVkIGluc3RlYWQuCiAgICAgKgogICAgICogUmVxdWlyZXMgUGVybWlzc2lvbjoge0BsaW5rIGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbiNSRUFEX1BIT05FX1NUQVRFIFJFQURfUEhPTkVfU1RBVEV9CiAgICAgKgogICAgICogQHBhcmFtIGNvbnRleHQgQ29udGV4dCBvYmplY3QKICAgICAqIEBwYXJhbSBzdWJJZCBTdWJzY3JpcHRpb24gSWQgb2YgU3Vic2NyaXB0aW9uIHdob3NlIHJlc291cmNlcyBhcmUgcmVxdWlyZWQKICAgICAqIEByZXR1cm4gUmVzb3VyY2VzIGFzc29jaWF0ZWQgd2l0aCBTdWJzY3JpcHRpb24uCiAgICAgKiBAaGlkZQogICAgICovCiAgICBATm9uTnVsbAogICAgQFN5c3RlbUFwaQogICAgcHVibGljIHN0YXRpYyBSZXNvdXJjZXMgZ2V0UmVzb3VyY2VzRm9yU3ViSWQoQE5vbk51bGwgQ29udGV4dCBjb250ZXh0LCBpbnQgc3ViSWQpIHsKICAgICAgICByZXR1cm4gZ2V0UmVzb3VyY2VzRm9yU3ViSWQoY29udGV4dCwgc3ViSWQsIGZhbHNlKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIHJlc291cmNlcyBhc3NvY2lhdGVkIHdpdGggU3Vic2NyaXB0aW9uLgogICAgICogQHBhcmFtIGNvbnRleHQgQ29udGV4dCBvYmplY3QKICAgICAqIEBwYXJhbSBzdWJJZCBTdWJzY3JpcHRpb24gSWQgb2YgU3Vic2NyaXB0aW9uIHdobydzIHJlc291cmNlcyBhcmUgcmVxdWlyZWQKICAgICAqIEBwYXJhbSB1c2VSb290TG9jYWxlIGlmIHJvb3QgbG9jYWxlIHNob3VsZCBiZSB1c2VkLiBMb2NhbGl6ZWQgbG9jYWxlIGlzIHVzZWQgaWYgZmFsc2UuCiAgICAgKiBAcmV0dXJuIFJlc291cmNlcyBhc3NvY2lhdGVkIHdpdGggU3Vic2NyaXB0aW9uLgogICAgICogQGhpZGUKICAgICAqLwogICAgQE5vbk51bGwKICAgIHB1YmxpYyBzdGF0aWMgUmVzb3VyY2VzIGdldFJlc291cmNlc0ZvclN1YklkKENvbnRleHQgY29udGV4dCwgaW50IHN1YklkLAogICAgICAgICAgICBib29sZWFuIHVzZVJvb3RMb2NhbGUpIHsKICAgICAgICAvLyBDaGVjayBpZiByZXNvdXJjZXMgZm9yIHRoaXMgY29udGV4dCBhbmQgc3ViSWQgYWxyZWFkeSBleGlzdCBpbiB0aGUgcmVzb3VyY2UgY2FjaGUuCiAgICAgICAgLy8gUmVzb3VyY2VzIHRoYXQgdXNlIHRoZSByb290IGxvY2FsZSBhcmUgbm90IGNhY2hlZC4KICAgICAgICBQYWlyPENvbnRleHQsIEludGVnZXI+IGNhY2hlS2V5ID0gbnVsbDsKICAgICAgICBpZiAoaXNWYWxpZFN1YnNjcmlwdGlvbklkKHN1YklkKSAmJiAhdXNlUm9vdExvY2FsZSkgewogICAgICAgICAgICBjYWNoZUtleSA9IFBhaXIuY3JlYXRlKGNvbnRleHQsIHN1YklkKTsKICAgICAgICAgICAgaWYgKHNSZXNvdXJjZXNDYWNoZS5jb250YWluc0tleShjYWNoZUtleSkpIHsKICAgICAgICAgICAgICAgIC8vIENhY2hlIGhpdC4gVXNlIGNhY2hlZCBSZXNvdXJjZXMuCiAgICAgICAgICAgICAgICByZXR1cm4gc1Jlc291cmNlc0NhY2hlLmdldChjYWNoZUtleSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZpbmFsIFN1YnNjcmlwdGlvbkluZm8gc3ViSW5mbyA9CiAgICAgICAgICAgICAgICBTdWJzY3JpcHRpb25NYW5hZ2VyLmZyb20oY29udGV4dCkuZ2V0QWN0aXZlU3Vic2NyaXB0aW9uSW5mbyhzdWJJZCk7CgogICAgICAgIENvbmZpZ3VyYXRpb24gb3ZlcnJpZGVDb25maWcgPSBuZXcgQ29uZmlndXJhdGlvbigpOwogICAgICAgIGlmIChzdWJJbmZvICE9IG51bGwpIHsKICAgICAgICAgICAgb3ZlcnJpZGVDb25maWcubWNjID0gc3ViSW5mby5nZXRNY2MoKTsKICAgICAgICAgICAgb3ZlcnJpZGVDb25maWcubW5jID0gc3ViSW5mby5nZXRNbmMoKTsKICAgICAgICAgICAgaWYgKG92ZXJyaWRlQ29uZmlnLm1uYyA9PSAwKSBvdmVycmlkZUNvbmZpZy5tbmMgPSBDb25maWd1cmF0aW9uLk1OQ19aRVJPOwogICAgICAgIH0KCiAgICAgICAgaWYgKHVzZVJvb3RMb2NhbGUpIHsKICAgICAgICAgICAgb3ZlcnJpZGVDb25maWcuc2V0TG9jYWxlKExvY2FsZS5ST09UKTsKICAgICAgICB9CgogICAgICAgIC8vIENyZWF0ZSBuZXcgY29udGV4dCB3aXRoIG5ldyBjb25maWd1cmF0aW9uIHNvIHRoYXQgd2UgY2FuIGF2b2lkIG1vZGlmeWluZyB0aGUgcGFzc2VkIGluCiAgICAgICAgLy8gY29udGV4dC4KICAgICAgICAvLyBOb3RlIHRoYXQgaWYgdGhlIG9yaWdpbmFsIGNvbnRleHQgY29uZmlndXJhdGlvbiBjaGFuZ2VzLCB0aGUgcmVzb3VyY2VzIGhlcmUgd2lsbCBhbHNvCiAgICAgICAgLy8gY2hhbmdlIGZvciBhbGwgdmFsdWVzIGV4Y2VwdCB0aG9zZSBvdmVycmlkZGVuIGJ5IG5ld0NvbmZpZyAoZS5nLiBpZiB0aGUgZGV2aWNlIGhhcyBhbgogICAgICAgIC8vIG9yaWVudGF0aW9uIGNoYW5nZSkuCiAgICAgICAgQ29udGV4dCBuZXdDb250ZXh0ID0gY29udGV4dC5jcmVhdGVDb25maWd1cmF0aW9uQ29udGV4dChvdmVycmlkZUNvbmZpZyk7CiAgICAgICAgUmVzb3VyY2VzIHJlcyA9IG5ld0NvbnRleHQuZ2V0UmVzb3VyY2VzKCk7CgogICAgICAgIGlmIChjYWNoZUtleSAhPSBudWxsKSB7CiAgICAgICAgICAgIC8vIFNhdmUgdGhlIG5ld2x5IGNyZWF0ZWQgUmVzb3VyY2VzIGluIHRoZSByZXNvdXJjZSBjYWNoZS4KICAgICAgICAgICAgc1Jlc291cmNlc0NhY2hlLnB1dChjYWNoZUtleSwgcmVzKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlczsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrcyBpZiB0aGUgc3VwcGxpZWQgc3Vic2NyaXB0aW9uIElEIGNvcnJlc3BvbmRzIHRvIGEgc3Vic2NyaXB0aW9uIHdoaWNoIGlzIGFjdGl2ZWx5IGluCiAgICAgKiB1c2Ugb24gdGhlIGRldmljZS4gQW4gYWN0aXZlIHN1YnNjcmlwdGlvbiBJRCBpcyBhIHZhbGlkIGFuZCB1c2FibGUgc3Vic2NyaXB0aW9uIElELgogICAgICoKICAgICAqIEBwYXJhbSBzdWJzY3JpcHRpb25JZCB0aGUgc3Vic2NyaXB0aW9uIElELgogICAgICogQHJldHVybiB7QGNvZGUgdHJ1ZX0gaWYgdGhlIHN1cHBsaWVkIHN1YnNjcmlwdGlvbiBJRCBjb3JyZXNwb25kcyB0byBhbiBhY3RpdmUgc3Vic2NyaXB0aW9uOwogICAgICoge0Bjb2RlIGZhbHNlfSBpZiBpdCBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIGFuIGFjdGl2ZSBzdWJzY3JpcHRpb247IG9yIHRocm93IGEKICAgICAqIFNlY3VyaXR5RXhjZXB0aW9uIGlmIHRoZSBjYWxsZXIgaGFzbid0IGdvdCB0aGUgcmlnaHQgcGVybWlzc2lvbi4KICAgICAqLwogICAgQFJlcXVpcmVzUGVybWlzc2lvbihhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uUkVBRF9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBib29sZWFuIGlzQWN0aXZlU3Vic2NyaXB0aW9uSWQoaW50IHN1YnNjcmlwdGlvbklkKSB7CiAgICAgICAgcmV0dXJuIGlzQWN0aXZlU3ViSWQoc3Vic2NyaXB0aW9uSWQpOwogICAgfQoKICAgIC8qKgogICAgICogQHJldHVybiB0cnVlIGlmIHRoZSBzdWIgSUQgaXMgYWN0aXZlLiBpLmUuIFRoZSBzdWIgSUQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBzdWJzY3JpcHRpb24KICAgICAqIGFuZCB0aGUgU0lNIHByb3ZpZGluZyB0aGUgc3Vic2NyaXB0aW9uIGlzIHByZXNlbnQgaW4gYSBzbG90IGFuZCBpbiAiTE9BREVEIiBzdGF0ZS4KICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBVbnN1cHBvcnRlZEFwcFVzYWdlCiAgICBwdWJsaWMgYm9vbGVhbiBpc0FjdGl2ZVN1YklkKGludCBzdWJJZCkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaVN1Yi5pc0FjdGl2ZVN1YklkKHN1YklkLCBtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCksCiAgICAgICAgICAgICAgICAgICAgICAgIG1Db250ZXh0LmdldEF0dHJpYnV0aW9uVGFnKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJpbGxpbmcgcmVsYXRpb25zaGlwIHBsYW4gYmV0d2VlbiBhIGNhcnJpZXIKICAgICAqIGFuZCBhIHNwZWNpZmljIHN1YnNjcmliZXIuCiAgICAgKiA8cD4KICAgICAqIFRoaXMgbWV0aG9kIGlzIG9ubHkgYWNjZXNzaWJsZSB0byB0aGUgZm9sbG93aW5nIG5hcnJvdyBzZXQgb2YgYXBwczoKICAgICAqIDx1bD4KICAgICAqIDxsaT5UaGUgY2FycmllciBhcHAgZm9yIHRoaXMgc3Vic2NyaWJlcklkLCBhcyBkZXRlcm1pbmVkIGJ5CiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlcygpfS4KICAgICAqIDxsaT5UaGUgY2FycmllciBhcHAgZXhwbGljaXRseSBkZWxlZ2F0ZWQgYWNjZXNzIHRocm91Z2gKICAgICAqIHtAbGluayBDYXJyaWVyQ29uZmlnTWFuYWdlciNLRVlfQ09ORklHX1BMQU5TX1BBQ0tBR0VfT1ZFUlJJREVfU1RSSU5HfS4KICAgICAqIDwvdWw+CiAgICAgKgogICAgICogQHBhcmFtIHN1YklkIHRoZSBzdWJzY3JpYmVyIHRoaXMgcmVsYXRpb25zaGlwIGFwcGxpZXMgdG8KICAgICAqIEB0aHJvd3MgU2VjdXJpdHlFeGNlcHRpb24gaWYgdGhlIGNhbGxlciBkb2Vzbid0IG1lZXQgdGhlIHJlcXVpcmVtZW50cwogICAgICogICAgICAgICAgICAgb3V0bGluZWQgYWJvdmUuCiAgICAgKi8KICAgIHB1YmxpYyBATm9uTnVsbCBMaXN0PFN1YnNjcmlwdGlvblBsYW4+IGdldFN1YnNjcmlwdGlvblBsYW5zKGludCBzdWJJZCkgewogICAgICAgIFN1YnNjcmlwdGlvblBsYW5bXSBzdWJzY3JpcHRpb25QbGFucyA9CiAgICAgICAgICAgICAgICBnZXROZXR3b3JrUG9saWN5TWFuYWdlcigpLmdldFN1YnNjcmlwdGlvblBsYW5zKHN1YklkLCBtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCkpOwogICAgICAgIHJldHVybiBzdWJzY3JpcHRpb25QbGFucyA9PSBudWxsCiAgICAgICAgICAgICAgICA/IENvbGxlY3Rpb25zLmVtcHR5TGlzdCgpIDogQXJyYXlzLmFzTGlzdChzdWJzY3JpcHRpb25QbGFucyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBiaWxsaW5nIHJlbGF0aW9uc2hpcCBwbGFuIGJldHdlZW4gYSBjYXJyaWVyCiAgICAgKiBhbmQgYSBzcGVjaWZpYyBzdWJzY3JpYmVyLgogICAgICogPHA+CiAgICAgKiBUaGlzIG1ldGhvZCBpcyBvbmx5IGFjY2Vzc2libGUgdG8gdGhlIGZvbGxvd2luZyBuYXJyb3cgc2V0IG9mIGFwcHM6CiAgICAgKiA8dWw+CiAgICAgKiA8bGk+VGhlIGNhcnJpZXIgYXBwIGZvciB0aGlzIHN1YnNjcmliZXJJZCwgYXMgZGV0ZXJtaW5lZCBieQogICAgICoge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjaGFzQ2FycmllclByaXZpbGVnZXMoKX0uCiAgICAgKiA8bGk+VGhlIGNhcnJpZXIgYXBwIGV4cGxpY2l0bHkgZGVsZWdhdGVkIGFjY2VzcyB0aHJvdWdoCiAgICAgKiB7QGxpbmsgQ2FycmllckNvbmZpZ01hbmFnZXIjS0VZX0NPTkZJR19QTEFOU19QQUNLQUdFX09WRVJSSURFX1NUUklOR30uCiAgICAgKiA8L3VsPgogICAgICoKICAgICAqIEBwYXJhbSBzdWJJZCB0aGUgc3Vic2NyaWJlciB0aGlzIHJlbGF0aW9uc2hpcCBhcHBsaWVzIHRvLiBBbiBlbXB0eSBsaXN0CiAgICAgKiAgICAgICAgICAgIG1heSBiZSBzZW50IHRvIGNsZWFyIGFueSBleGlzdGluZyBwbGFucy4KICAgICAqIEBwYXJhbSBwbGFucyB0aGUgbGlzdCBvZiBwbGFucy4gVGhlIGZpcnN0IHBsYW4gaXMgYWx3YXlzIHRoZSBwcmltYXJ5IGFuZAogICAgICogICAgICAgICAgICBtb3N0IGltcG9ydGFudCBwbGFuLiBBbnkgYWRkaXRpb25hbCBwbGFucyBhcmUgc2Vjb25kYXJ5IGFuZAogICAgICogICAgICAgICAgICBtYXkgbm90IGJlIGRpc3BsYXllZCBvciB1c2VkIGJ5IGRlY2lzaW9uIG1ha2luZyBsb2dpYy4KICAgICAqIEB0aHJvd3MgU2VjdXJpdHlFeGNlcHRpb24gaWYgdGhlIGNhbGxlciBkb2Vzbid0IG1lZXQgdGhlIHJlcXVpcmVtZW50cwogICAgICogICAgICAgICAgICAgb3V0bGluZWQgYWJvdmUuCiAgICAgKiBAdGhyb3dzIElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBpZiBwbGFucyBkb24ndCBtZWV0IHRoZSByZXF1aXJlbWVudHMKICAgICAqICAgICAgICAgICAgIGRlZmluZWQgaW4ge0BsaW5rIFN1YnNjcmlwdGlvblBsYW59LgogICAgICovCiAgICBwdWJsaWMgdm9pZCBzZXRTdWJzY3JpcHRpb25QbGFucyhpbnQgc3ViSWQsIEBOb25OdWxsIExpc3Q8U3Vic2NyaXB0aW9uUGxhbj4gcGxhbnMpIHsKICAgICAgICBnZXROZXR3b3JrUG9saWN5TWFuYWdlcigpLnNldFN1YnNjcmlwdGlvblBsYW5zKHN1YklkLAogICAgICAgICAgICAgICAgcGxhbnMudG9BcnJheShuZXcgU3Vic2NyaXB0aW9uUGxhbltwbGFucy5zaXplKCldKSwgbUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpKTsKICAgIH0KCiAgICAvKioKICAgICAqIFRlbXBvcmFyaWx5IG92ZXJyaWRlIHRoZSBiaWxsaW5nIHJlbGF0aW9uc2hpcCBwbGFuIGJldHdlZW4gYSBjYXJyaWVyIGFuZAogICAgICogYSBzcGVjaWZpYyBzdWJzY3JpYmVyIHRvIGJlIGNvbnNpZGVyZWQgdW5tZXRlcmVkLiBUaGlzIHdpbGwgYmUgcmVmbGVjdGVkCiAgICAgKiB0byBhcHBzIHZpYSB7QGxpbmsgTmV0d29ya0NhcGFiaWxpdGllcyNORVRfQ0FQQUJJTElUWV9OT1RfTUVURVJFRH0uCiAgICAgKiA8cD4KICAgICAqIFRoaXMgbWV0aG9kIGlzIG9ubHkgYWNjZXNzaWJsZSB0byB0aGUgZm9sbG93aW5nIG5hcnJvdyBzZXQgb2YgYXBwczoKICAgICAqIDx1bD4KICAgICAqIDxsaT5UaGUgY2FycmllciBhcHAgZm9yIHRoaXMgc3Vic2NyaWJlcklkLCBhcyBkZXRlcm1pbmVkIGJ5CiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlcygpfS4KICAgICAqIDxsaT5UaGUgY2FycmllciBhcHAgZXhwbGljaXRseSBkZWxlZ2F0ZWQgYWNjZXNzIHRocm91Z2gKICAgICAqIHtAbGluayBDYXJyaWVyQ29uZmlnTWFuYWdlciNLRVlfQ09ORklHX1BMQU5TX1BBQ0tBR0VfT1ZFUlJJREVfU1RSSU5HfS4KICAgICAqIDwvdWw+CiAgICAgKgogICAgICogQHBhcmFtIHN1YklkIHRoZSBzdWJzY3JpYmVyIHRoaXMgb3ZlcnJpZGUgYXBwbGllcyB0by4KICAgICAqIEBwYXJhbSBvdmVycmlkZVVubWV0ZXJlZCBzZXQgaWYgdGhlIGJpbGxpbmcgcmVsYXRpb25zaGlwIHNob3VsZCBiZQogICAgICogICAgICAgICAgICBjb25zaWRlcmVkIHVubWV0ZXJlZC4KICAgICAqIEBwYXJhbSB0aW1lb3V0TWlsbGlzIHRoZSB0aW1lb3V0IGFmdGVyIHdoaWNoIHRoZSByZXF1ZXN0ZWQgb3ZlcnJpZGUgd2lsbAogICAgICogICAgICAgICAgICBiZSBhdXRvbWF0aWNhbGx5IGNsZWFyZWQsIG9yIHtAY29kZSAwfSB0byBsZWF2ZSBpbiB0aGUKICAgICAqICAgICAgICAgICAgcmVxdWVzdGVkIHN0YXRlIHVudGlsIGV4cGxpY2l0bHkgY2xlYXJlZCwgb3IgdGhlIG5leHQgcmVib290LAogICAgICogICAgICAgICAgICB3aGljaGV2ZXIgaGFwcGVucyBmaXJzdC4KICAgICAqIEB0aHJvd3MgU2VjdXJpdHlFeGNlcHRpb24gaWYgdGhlIGNhbGxlciBkb2Vzbid0IG1lZXQgdGhlIHJlcXVpcmVtZW50cwogICAgICogICAgICAgICAgICAgb3V0bGluZWQgYWJvdmUuCiAgICAgKi8KICAgIHB1YmxpYyB2b2lkIHNldFN1YnNjcmlwdGlvbk92ZXJyaWRlVW5tZXRlcmVkKGludCBzdWJJZCwgYm9vbGVhbiBvdmVycmlkZVVubWV0ZXJlZCwKICAgICAgICAgICAgQER1cmF0aW9uTWlsbGlzTG9uZyBsb25nIHRpbWVvdXRNaWxsaXMpIHsKCiAgICAgICAgZmluYWwgaW50IG92ZXJyaWRlVmFsdWUgPSBvdmVycmlkZVVubWV0ZXJlZCA/IFNVQlNDUklQVElPTl9PVkVSUklERV9VTk1FVEVSRUQgOiAwOwogICAgICAgIGdldE5ldHdvcmtQb2xpY3lNYW5hZ2VyKCkuc2V0U3Vic2NyaXB0aW9uT3ZlcnJpZGUoc3ViSWQsIFNVQlNDUklQVElPTl9PVkVSUklERV9VTk1FVEVSRUQsCiAgICAgICAgICAgICAgICBvdmVycmlkZVZhbHVlLCB0aW1lb3V0TWlsbGlzLCBtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCkpOwogICAgfQoKICAgIC8qKgogICAgICogVGVtcG9yYXJpbHkgb3ZlcnJpZGUgdGhlIGJpbGxpbmcgcmVsYXRpb25zaGlwIHBsYW4gYmV0d2VlbiBhIGNhcnJpZXIgYW5kCiAgICAgKiBhIHNwZWNpZmljIHN1YnNjcmliZXIgdG8gYmUgY29uc2lkZXJlZCBjb25nZXN0ZWQuIFRoaXMgd2lsbCBjYXVzZSB0aGUKICAgICAqIGRldmljZSB0byBkZWxheSBjZXJ0YWluIG5ldHdvcmsgcmVxdWVzdHMgd2hlbiBwb3NzaWJsZSwgc3VjaCBhcyBkZXZlbG9wZXIKICAgICAqIGpvYnMgdGhhdCBhcmUgd2lsbGluZyB0byBydW4gaW4gYSBmbGV4aWJsZSB0aW1lIHdpbmRvdy4KICAgICAqIDxwPgogICAgICogVGhpcyBtZXRob2QgaXMgb25seSBhY2Nlc3NpYmxlIHRvIHRoZSBmb2xsb3dpbmcgbmFycm93IHNldCBvZiBhcHBzOgogICAgICogPHVsPgogICAgICogPGxpPlRoZSBjYXJyaWVyIGFwcCBmb3IgdGhpcyBzdWJzY3JpYmVySWQsIGFzIGRldGVybWluZWQgYnkKICAgICAqIHtAbGluayBUZWxlcGhvbnlNYW5hZ2VyI2hhc0NhcnJpZXJQcml2aWxlZ2VzKCl9LgogICAgICogPGxpPlRoZSBjYXJyaWVyIGFwcCBleHBsaWNpdGx5IGRlbGVnYXRlZCBhY2Nlc3MgdGhyb3VnaAogICAgICoge0BsaW5rIENhcnJpZXJDb25maWdNYW5hZ2VyI0tFWV9DT05GSUdfUExBTlNfUEFDS0FHRV9PVkVSUklERV9TVFJJTkd9LgogICAgICogPC91bD4KICAgICAqCiAgICAgKiBAcGFyYW0gc3ViSWQgdGhlIHN1YnNjcmliZXIgdGhpcyBvdmVycmlkZSBhcHBsaWVzIHRvLgogICAgICogQHBhcmFtIG92ZXJyaWRlQ29uZ2VzdGVkIHNldCBpZiB0aGUgc3Vic2NyaXB0aW9uIHNob3VsZCBiZSBjb25zaWRlcmVkCiAgICAgKiAgICAgICAgICAgIGNvbmdlc3RlZC4KICAgICAqIEBwYXJhbSB0aW1lb3V0TWlsbGlzIHRoZSB0aW1lb3V0IGFmdGVyIHdoaWNoIHRoZSByZXF1ZXN0ZWQgb3ZlcnJpZGUgd2lsbAogICAgICogICAgICAgICAgICBiZSBhdXRvbWF0aWNhbGx5IGNsZWFyZWQsIG9yIHtAY29kZSAwfSB0byBsZWF2ZSBpbiB0aGUKICAgICAqICAgICAgICAgICAgcmVxdWVzdGVkIHN0YXRlIHVudGlsIGV4cGxpY2l0bHkgY2xlYXJlZCwgb3IgdGhlIG5leHQgcmVib290LAogICAgICogICAgICAgICAgICB3aGljaGV2ZXIgaGFwcGVucyBmaXJzdC4KICAgICAqIEB0aHJvd3MgU2VjdXJpdHlFeGNlcHRpb24gaWYgdGhlIGNhbGxlciBkb2Vzbid0IG1lZXQgdGhlIHJlcXVpcmVtZW50cwogICAgICogICAgICAgICAgICAgb3V0bGluZWQgYWJvdmUuCiAgICAgKi8KICAgIHB1YmxpYyB2b2lkIHNldFN1YnNjcmlwdGlvbk92ZXJyaWRlQ29uZ2VzdGVkKGludCBzdWJJZCwgYm9vbGVhbiBvdmVycmlkZUNvbmdlc3RlZCwKICAgICAgICAgICAgQER1cmF0aW9uTWlsbGlzTG9uZyBsb25nIHRpbWVvdXRNaWxsaXMpIHsKICAgICAgICBmaW5hbCBpbnQgb3ZlcnJpZGVWYWx1ZSA9IG92ZXJyaWRlQ29uZ2VzdGVkID8gU1VCU0NSSVBUSU9OX09WRVJSSURFX0NPTkdFU1RFRCA6IDA7CiAgICAgICAgZ2V0TmV0d29ya1BvbGljeU1hbmFnZXIoKS5zZXRTdWJzY3JpcHRpb25PdmVycmlkZShzdWJJZCwgU1VCU0NSSVBUSU9OX09WRVJSSURFX0NPTkdFU1RFRCwKICAgICAgICAgICAgICAgIG92ZXJyaWRlVmFsdWUsIHRpbWVvdXRNaWxsaXMsIG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgYXBwIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgaXMgYXV0aG9yaXplZCB0byBtYW5hZ2UgdGhlIGdpdmVuIHN1YnNjcmlwdGlvbgogICAgICogYWNjb3JkaW5nIHRvIGl0cyBtZXRhZGF0YS4KICAgICAqCiAgICAgKiBPbmx5IHN1cHBvcnRlZCBmb3IgZW1iZWRkZWQgc3Vic2NyaXB0aW9ucyAoaWYge0BsaW5rIFN1YnNjcmlwdGlvbkluZm8jaXNFbWJlZGRlZH0gcmV0dXJucwogICAgICogdHJ1ZSkuIFRvIGNoZWNrIGZvciBwZXJtaXNzaW9ucyBmb3Igbm9uLWVtYmVkZGVkIHN1YnNjcmlwdGlvbiBhcyB3ZWxsLAogICAgICoge0BzZWUgYW5kcm9pZC50ZWxlcGhvbnkuVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlc30uCiAgICAgKgogICAgICogQHBhcmFtIGluZm8gVGhlIHN1YnNjcmlwdGlvbiB0byBjaGVjay4KICAgICAqIEByZXR1cm4gd2hldGhlciB0aGUgYXBwIGlzIGF1dGhvcml6ZWQgdG8gbWFuYWdlIHRoaXMgc3Vic2NyaXB0aW9uIHBlciBpdHMgbWV0YWRhdGEuCiAgICAgKi8KICAgIHB1YmxpYyBib29sZWFuIGNhbk1hbmFnZVN1YnNjcmlwdGlvbihTdWJzY3JpcHRpb25JbmZvIGluZm8pIHsKICAgICAgICByZXR1cm4gY2FuTWFuYWdlU3Vic2NyaXB0aW9uKGluZm8sIG1Db250ZXh0LmdldFBhY2thZ2VOYW1lKCkpOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGFwcCBpcyBhdXRob3JpemVkIHRvIG1hbmFnZSB0aGUgZ2l2ZW4gc3Vic2NyaXB0aW9uLiBBbiBhcHAgY2FuIG9ubHkKICAgICAqIGJlIGF1dGhvcml6ZWQgaWYgaXQgaXMgaW5jbHVkZWQgaW4gdGhlIHtAbGluayBhbmRyb2lkLnRlbGVwaG9ueS5VaWNjQWNjZXNzUnVsZX0gb2YgdGhlCiAgICAgKiB7QGxpbmsgYW5kcm9pZC50ZWxlcGhvbnkuU3Vic2NyaXB0aW9uSW5mb30gd2l0aCB0aGUgYWNjZXNzIHN0YXR1cy4KICAgICAqCiAgICAgKiBPbmx5IHN1cHBvcnRlZCBmb3IgZW1iZWRkZWQgc3Vic2NyaXB0aW9ucyAoaWYge0BsaW5rIFN1YnNjcmlwdGlvbkluZm8jaXNFbWJlZGRlZH0gcmV0dXJucwogICAgICogdHJ1ZSkuIFRvIGNoZWNrIGZvciBwZXJtaXNzaW9ucyBmb3Igbm9uLWVtYmVkZGVkIHN1YnNjcmlwdGlvbiBhcyB3ZWxsLAogICAgICoge0BzZWUgYW5kcm9pZC50ZWxlcGhvbnkuVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlc30uCiAgICAgKgogICAgICogQHBhcmFtIGluZm8gVGhlIHN1YnNjcmlwdGlvbiB0byBjaGVjay4KICAgICAqIEBwYXJhbSBwYWNrYWdlTmFtZSBQYWNrYWdlIG5hbWUgb2YgdGhlIGFwcCB0byBjaGVjay4KICAgICAqIEByZXR1cm4gd2hldGhlciB0aGUgYXBwIGlzIGF1dGhvcml6ZWQgdG8gbWFuYWdlIHRoaXMgc3Vic2NyaXB0aW9uIHBlciBpdHMgYWNjZXNzIHJ1bGVzLgogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgcHVibGljIGJvb2xlYW4gY2FuTWFuYWdlU3Vic2NyaXB0aW9uKEBOb25OdWxsIFN1YnNjcmlwdGlvbkluZm8gaW5mbywKICAgICAgICAgICAgQE5vbk51bGwgU3RyaW5nIHBhY2thZ2VOYW1lKSB7CiAgICAgICAgaWYgKGluZm8gPT0gbnVsbCB8fCBpbmZvLmdldEFsbEFjY2Vzc1J1bGVzKCkgPT0gbnVsbCB8fCBwYWNrYWdlTmFtZSA9PSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgUGFja2FnZU1hbmFnZXIgcGFja2FnZU1hbmFnZXIgPSBtQ29udGV4dC5nZXRQYWNrYWdlTWFuYWdlcigpOwogICAgICAgIFBhY2thZ2VJbmZvIHBhY2thZ2VJbmZvOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHBhY2thZ2VJbmZvID0gcGFja2FnZU1hbmFnZXIuZ2V0UGFja2FnZUluZm8ocGFja2FnZU5hbWUsCiAgICAgICAgICAgICAgICBQYWNrYWdlTWFuYWdlci5HRVRfU0lHTklOR19DRVJUSUZJQ0FURVMpOwogICAgICAgIH0gY2F0Y2ggKFBhY2thZ2VNYW5hZ2VyLk5hbWVOb3RGb3VuZEV4Y2VwdGlvbiBlKSB7CiAgICAgICAgICAgIGxvZ2QoIlVua25vd24gcGFja2FnZTogIiArIHBhY2thZ2VOYW1lKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBmb3IgKFVpY2NBY2Nlc3NSdWxlIHJ1bGUgOiBpbmZvLmdldEFsbEFjY2Vzc1J1bGVzKCkpIHsKICAgICAgICAgICAgaWYgKHJ1bGUuZ2V0Q2FycmllclByaXZpbGVnZVN0YXR1cyhwYWNrYWdlSW5mbykKICAgICAgICAgICAgICAgICAgICA9PSBUZWxlcGhvbnlNYW5hZ2VyLkNBUlJJRVJfUFJJVklMRUdFX1NUQVRVU19IQVNfQUNDRVNTKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgd2hpY2ggc3Vic2NyaXB0aW9uIGlzIHByZWZlcnJlZCBmb3IgY2VsbHVsYXIgZGF0YS4KICAgICAqIEl0J3MgYWxzbyB1c3VhbGx5IHRoZSBzdWJzY3JpcHRpb24gd2Ugc2V0IHVwIGludGVybmV0IGNvbm5lY3Rpb24gb24uCiAgICAgKgogICAgICogUHJlZmVycmVkRGF0YSBvdmVyd3JpdGVzIHVzZXIgc2V0dGluZyBvZiBkZWZhdWx0IGRhdGEgc3Vic2NyaXB0aW9uLiBBbmQgaXQncyB1c2VkCiAgICAgKiBieSBBbHRlcm5hdGl2ZU5ldHdvcmtTZXJ2aWNlIG9yIGNhcnJpZXIgYXBwcyB0byBzd2l0Y2ggcHJpbWFyeSBhbmQgQ0JSUwogICAgICogc3Vic2NyaXB0aW9uIGR5bmFtaWNhbGx5IGluIG11bHRpLVNJTSBkZXZpY2VzLgogICAgICoKICAgICAqIEBwYXJhbSBzdWJJZCB3aGljaCBzdWJzY3JpcHRpb24gaXMgcHJlZmVycmVkIHRvIGZvciBjZWxsdWxhciBkYXRhLiBJZiBpdCdzCiAgICAgKiAgICAgICAgICAgICAge0BsaW5rIFN1YnNjcmlwdGlvbk1hbmFnZXIjREVGQVVMVF9TVUJTQ1JJUFRJT05fSUR9LCBpdCBtZWFucwogICAgICogICAgICAgICAgICAgIGl0J3MgdW5zZXQgYW5kIHtAbGluayBTdWJzY3JpcHRpb25NYW5hZ2VyI2dldERlZmF1bHREYXRhU3Vic2NyaXB0aW9uSWQoKX0KICAgICAqICAgICAgICAgICAgICBpcyB1c2VkIHRvIGRldGVybWluZSB3aGljaCBtb2RlbSBpcyBwcmVmZXJyZWQuCiAgICAgKiBAcGFyYW0gbmVlZFZhbGlkYXRpb24gd2hldGhlciBUZWxlcGhvbnkgd2lsbCB3YWl0IHVudGlsIHRoZSBuZXR3b3JrIGlzIHZhbGlkYXRlZCBieQogICAgICogICAgICAgICAgICAgIGNvbm5lY3Rpdml0eSBzZXJ2aWNlIGJlZm9yZSBzd2l0Y2hpbmcgZGF0YSB0byBpdC4gTW9yZSBkZXRhaWxzIHNlZQogICAgICogICAgICAgICAgICAgIHtAbGluayBOZXR3b3JrQ2FwYWJpbGl0aWVzI05FVF9DQVBBQklMSVRZX1ZBTElEQVRFRH0uCiAgICAgKiBAcGFyYW0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIG9mIHdoZXJlIHRoZSBjYWxsYmFjayB3aWxsIGV4ZWN1dGUuCiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQ2FsbGJhY2sgd2lsbCBiZSB0cmlnZ2VyZWQgb25jZSBpdCBzdWNjZWVkcyBvciBmYWlsZWQuCiAgICAgKiAgICAgICAgICAgICAgICAgUGFzcyBudWxsIGlmIGRvbid0IGNhcmUgYWJvdXQgdGhlIHJlc3VsdC4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICoKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgQFJlcXVpcmVzUGVybWlzc2lvbihhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uTU9ESUZZX1BIT05FX1NUQVRFKQogICAgcHVibGljIHZvaWQgc2V0UHJlZmVycmVkRGF0YVN1YnNjcmlwdGlvbklkKGludCBzdWJJZCwgYm9vbGVhbiBuZWVkVmFsaWRhdGlvbiwKICAgICAgICAgICAgQE51bGxhYmxlIEBDYWxsYmFja0V4ZWN1dG9yIEV4ZWN1dG9yIGV4ZWN1dG9yLCBATnVsbGFibGUKICAgICAgICAgICAgQFRlbGVwaG9ueU1hbmFnZXIuU2V0T3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvblJlc3VsdCBDb25zdW1lcjxJbnRlZ2VyPiBjYWxsYmFjaykgewogICAgICAgIGlmIChWREJHKSBsb2dkKCJbc2V0UHJlZmVycmVkRGF0YVN1YnNjcmlwdGlvbklkXSsgc3ViSWQ6IiArIHN1YklkKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgPT0gbnVsbCkgcmV0dXJuOwoKICAgICAgICAgICAgSVNldE9wcG9ydHVuaXN0aWNEYXRhQ2FsbGJhY2sgY2FsbGJhY2tTdHViID0gbmV3IElTZXRPcHBvcnR1bmlzdGljRGF0YUNhbGxiYWNrLlN0dWIoKSB7CiAgICAgICAgICAgICAgICBAT3ZlcnJpZGUKICAgICAgICAgICAgICAgIHB1YmxpYyB2b2lkIG9uQ29tcGxldGUoaW50IHJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgIGlmIChleGVjdXRvciA9PSBudWxsIHx8IGNhbGxiYWNrID09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBmaW5hbCBsb25nIGlkZW50aXR5ID0gQmluZGVyLmNsZWFyQ2FsbGluZ0lkZW50aXR5KCk7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgZXhlY3V0b3IuZXhlY3V0ZSgoKSAtPiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5hY2NlcHQocmVzdWx0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgICAgQmluZGVyLnJlc3RvcmVDYWxsaW5nSWRlbnRpdHkoaWRlbnRpdHkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgaVN1Yi5zZXRQcmVmZXJyZWREYXRhU3Vic2NyaXB0aW9uSWQoc3ViSWQsIG5lZWRWYWxpZGF0aW9uLCBjYWxsYmFja1N0dWIpOwogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgd2hpY2ggc3Vic2NyaXB0aW9uIGlzIHByZWZlcnJlZCBmb3IgY2VsbHVsYXIgZGF0YS4KICAgICAqIEl0J3MgYWxzbyB1c3VhbGx5IHRoZSBzdWJzY3JpcHRpb24gd2Ugc2V0IHVwIGludGVybmV0IGNvbm5lY3Rpb24gb24uCiAgICAgKgogICAgICogUHJlZmVycmVkRGF0YSBvdmVyd3JpdGVzIHVzZXIgc2V0dGluZyBvZiBkZWZhdWx0IGRhdGEgc3Vic2NyaXB0aW9uLiBBbmQgaXQncyB1c2VkCiAgICAgKiBieSBBbHRlcm5hdGl2ZU5ldHdvcmtTZXJ2aWNlIG9yIGNhcnJpZXIgYXBwcyB0byBzd2l0Y2ggcHJpbWFyeSBhbmQgQ0JSUwogICAgICogc3Vic2NyaXB0aW9uIGR5bmFtaWNhbGx5IGluIG11bHRpLVNJTSBkZXZpY2VzLgogICAgICoKICAgICAqIEByZXR1cm4gcHJlZmVycmVkIHN1YnNjcmlwdGlvbiBpZCBmb3IgY2VsbHVsYXIgZGF0YS4ge0BsaW5rIERFRkFVTFRfU1VCU0NSSVBUSU9OX0lEfSBpZgogICAgICogdGhlcmUncyBubyBwcmVmZXJlZCBzdWJzY3JpcHRpb24uCiAgICAgKgogICAgICogQGhpZGUKICAgICAqCiAgICAgKi8KICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oTWFuaWZlc3QucGVybWlzc2lvbi5SRUFEX1BSSVZJTEVHRURfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgaW50IGdldFByZWZlcnJlZERhdGFTdWJzY3JpcHRpb25JZCgpIHsKICAgICAgICBpbnQgcHJlZmVycmVkU3ViSWQgPSBTdWJzY3JpcHRpb25NYW5hZ2VyLkRFRkFVTFRfU1VCU0NSSVBUSU9OX0lEOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBwcmVmZXJyZWRTdWJJZCA9IGlTdWIuZ2V0UHJlZmVycmVkRGF0YVN1YnNjcmlwdGlvbklkKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgLy8gaWdub3JlIGl0CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcHJlZmVycmVkU3ViSWQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gb3Bwb3J0dW5pc3RpYyBzdWJzY3JpcHRpb25zIHRoYXQgY2FuIGJlIHZpc2libGUgdG8gdGhlIGNhbGxlci4KICAgICAqIE9wcG9ydHVuaXN0aWMgc3Vic2NyaXB0aW9ucyBhcmUgZm9yIG9wcG9ydHVuaXN0aWMgbmV0d29ya3MsIHdoaWNoIGFyZSBjZWxsdWxhcgogICAgICogbmV0d29ya3Mgd2l0aCBsaW1pdGVkIGNhcGFiaWxpdGllcyBhbmQgY292ZXJhZ2UsIGZvciBleGFtcGxlLCBDQlJTLgogICAgICoKICAgICAqIDxwPlJlcXVpcmVzIFBlcm1pc3Npb246CiAgICAgKiB7QGxpbmsgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uI1JFQURfUEhPTkVfU1RBVEUgUkVBRF9QSE9ORV9TVEFURX0KICAgICAqIG9yIHRoYXQgdGhlIGNhbGxpbmcgYXBwIGhhcyBjYXJyaWVyIHByaXZpbGVnZXMgKHNlZQogICAgICoge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjaGFzQ2FycmllclByaXZpbGVnZXN9KS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHRoZSBsaXN0IG9mIG9wcG9ydHVuaXN0aWMgc3Vic2NyaXB0aW9uIGluZm8uIElmIG5vbmUgZXhpc3RzLCBhbiBlbXB0eSBsaXN0LgogICAgICovCiAgICBAU3VwcHJlc3NBdXRvRG9jIC8vIEJsb2NrZWQgYnkgYi83Mjk2NzIzNiAtIG5vIHN1cHBvcnQgZm9yIGNhcnJpZXIgcHJpdmlsZWdlcwogICAgQFJlcXVpcmVzUGVybWlzc2lvbihhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24uUkVBRF9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBATm9uTnVsbCBMaXN0PFN1YnNjcmlwdGlvbkluZm8+IGdldE9wcG9ydHVuaXN0aWNTdWJzY3JpcHRpb25zKCkgewogICAgICAgIFN0cmluZyBjb250ZXh0UGtnID0gbUNvbnRleHQgIT0gbnVsbCA/IG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSA6ICI8dW5rbm93bj4iOwogICAgICAgIFN0cmluZyBjb250ZXh0QXR0cmlidXRpb25UYWcgPSBtQ29udGV4dCAhPSBudWxsID8gbUNvbnRleHQuZ2V0QXR0cmlidXRpb25UYWcoKSA6IG51bGw7CiAgICAgICAgTGlzdDxTdWJzY3JpcHRpb25JbmZvPiBzdWJJbmZvTGlzdCA9IG51bGw7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBzdWJJbmZvTGlzdCA9IGlTdWIuZ2V0T3Bwb3J0dW5pc3RpY1N1YnNjcmlwdGlvbnMoY29udGV4dFBrZywKICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dEF0dHJpYnV0aW9uVGFnKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIGlmIChzdWJJbmZvTGlzdCA9PSBudWxsKSB7CiAgICAgICAgICAgIHN1YkluZm9MaXN0ID0gbmV3IEFycmF5TGlzdDw+KCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc3ViSW5mb0xpc3Q7CiAgICB9CgogICAgLyoqCiAgICAgKiBTd2l0Y2ggdG8gYSBjZXJ0YWluIHN1YnNjcmlwdGlvbgogICAgICoKICAgICAqICBAcGFyYW0gc3ViSWQgc3ViIGlkCiAgICAgKiAgQHBhcmFtIGNhbGxiYWNrSW50ZW50IHBlbmRpbmcgaW50ZW50IHRoYXQgd2lsbCBiZSBzZW50IGFmdGVyIG9wZXJhdGlvbiBpcyBkb25lLgogICAgICovCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbi5XUklURV9FTUJFRERFRF9TVUJTQ1JJUFRJT05TKQogICAgcHVibGljIHZvaWQgc3dpdGNoVG9TdWJzY3JpcHRpb24oaW50IHN1YklkLCBATm9uTnVsbCBQZW5kaW5nSW50ZW50IGNhbGxiYWNrSW50ZW50KSB7CiAgICAgICAgUHJlY29uZGl0aW9ucy5jaGVja05vdE51bGwoY2FsbGJhY2tJbnRlbnQsICJjYWxsYmFja0ludGVudCBjYW5ub3QgYmUgbnVsbCIpOwogICAgICAgIEV1aWNjTWFuYWdlciBldWljY01hbmFnZXIgPSBuZXcgRXVpY2NNYW5hZ2VyKG1Db250ZXh0KTsKICAgICAgICBldWljY01hbmFnZXIuc3dpdGNoVG9TdWJzY3JpcHRpb24oc3ViSWQsIGNhbGxiYWNrSW50ZW50KTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCB3aGV0aGVyIGEgc3Vic2NyaXB0aW9uIGlzIG9wcG9ydHVuaXN0aWMsIHRoYXQgaXMsIHdoZXRoZXIgdGhlIG5ldHdvcmsgaXQgY29ubmVjdHMKICAgICAqIHRvIGhhcyBsaW1pdGVkIGNvdmVyYWdlLiBGb3IgZXhhbXBsZSwgQ0JSUy4gU2V0dGluZyBhIHN1YnNjcmlwdGlvbiBvcHBvcnR1bmlzdGljIGhhcwogICAgICogZm9sbG93aW5nIGltcGFjdHM6CiAgICAgKiAgMSkgRXZlbiBpZiBpdCdzIGFjdGl2ZSwgaXQgd2lsbCBiZSBkb3JtYW50IG1vc3Qgb2YgdGhlIHRpbWUuIFRoZSBtb2RlbSB3aWxsIG5vdCB0cnkKICAgICAqICAgICB0byBzY2FuIG9yIGNhbXAgdW50aWwgaXQga25vd3MgYW4gYXZhaWxhYmxlIG5ldHdvcmsgaXMgbmVhcmJ5IHRvIHNhdmUgcG93ZXIuCiAgICAgKiAgMikgVGVsZXBob255IHJlbGllcyBvbiBzeXN0ZW0gYXBwIG9yIGNhcnJpZXIgaW5wdXQgdG8gbm90aWZ5IG5lYXJieSBhdmFpbGFibGUgbmV0d29ya3MuCiAgICAgKiAgICAgU2VlIHtAbGluayBUZWxlcGhvbnlNYW5hZ2VyI3VwZGF0ZUF2YWlsYWJsZU5ldHdvcmtzKExpc3QsIEV4ZWN1dG9yLCBDb25zdW1lcil9CiAgICAgKiAgICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uCiAgICAgKiAgMykgSW4gbXVsdGktU0lNIGRldmljZXMsIHdoZW4gdGhlIG5ldHdvcmsgaXMgbmVhcmJ5IGFuZCBjYW1wZWQsIHN5c3RlbSBtYXkgYXV0b21hdGljYWxseQogICAgICogICAgIHN3aXRjaCBpbnRlcm5ldCBkYXRhIGJldHdlZW4gaXQgYW5kIGRlZmF1bHQgZGF0YSBzdWJzY3JpcHRpb24sIGJhc2VkIG9uIGNhcnJpZXIKICAgICAqICAgICByZWNvbW1lbmRhdGlvbiBhbmQgaXRzIHNpZ25hbCBzdHJlbmd0aCBhbmQgbWV0ZXJlZC1uZXNzLCBldGMuCiAgICAgKgogICAgICoKICAgICAqIENhbGxlciB3aWxsIGVpdGhlciBoYXZlIHtAbGluayBhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24jTU9ESUZZX1BIT05FX1NUQVRFfSBvciBjYXJyaWVyCiAgICAgKiBwcml2aWxlZ2UgcGVybWlzc2lvbiBvZiB0aGUgc3Vic2NyaXB0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSBvcHBvcnR1bmlzdGljIHdoZXRoZXIgaXTigJlzIG9wcG9ydHVuaXN0aWMgc3Vic2NyaXB0aW9uLgogICAgICogQHBhcmFtIHN1YklkIHRoZSB1bmlxdWUgU3Vic2NyaXB0aW9uSW5mbyBpbmRleCBpbiBkYXRhYmFzZQogICAgICogQHJldHVybiB7QGNvZGUgdHJ1ZX0gaWYgdGhlIG9wZXJhdGlvbiBpcyBzdWNjZWVkLCB7QGNvZGUgZmFsc2V9IG90aGVyd2lzZS4KICAgICAqLwogICAgQFN1cHByZXNzQXV0b0RvYyAvLyBCbG9ja2VkIGJ5IGIvNzI5NjcyMzYgLSBubyBzdXBwb3J0IGZvciBjYXJyaWVyIHByaXZpbGVnZXMKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLk1PRElGWV9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBib29sZWFuIHNldE9wcG9ydHVuaXN0aWMoYm9vbGVhbiBvcHBvcnR1bmlzdGljLCBpbnQgc3ViSWQpIHsKICAgICAgICBpZiAoVkRCRykgbG9nZCgiW3NldE9wcG9ydHVuaXN0aWNdKyBvcHBvcnR1bmlzdGljOiIgKyBvcHBvcnR1bmlzdGljICsgIiBzdWJJZDoiICsgc3ViSWQpOwogICAgICAgIHJldHVybiBzZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eUhlbHBlcihzdWJJZCwgInNldE9wcG9ydHVuaXN0aWMiLAogICAgICAgICAgICAgICAgKGlTdWIpLT4gaVN1Yi5zZXRPcHBvcnR1bmlzdGljKAogICAgICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bmlzdGljLCBzdWJJZCwgbUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpKSkgPT0gMTsKICAgIH0KCiAgICAvKioKICAgICAqIEluZm9ybSBTdWJzY3JpcHRpb25NYW5hZ2VyIHRoYXQgc3Vic2NyaXB0aW9ucyBpbiB0aGUgbGlzdCBhcmUgYnVuZGxlZAogICAgICogYXMgYSBncm91cC4gSXQgY2FuIGJlIG11bHRpcGxlIHByaW1hcnkgKG5vbi1vcHBvcnR1bmlzdGljKSBzdWJzY3JpcHRpb25zLAogICAgICogb3Igb25lIG9yIG1vcmUgcHJpbWFyeSBwbHVzIG9uZSBvciBtb3JlIG9wcG9ydHVuaXN0aWMgc3Vic2NyaXB0aW9ucy4KICAgICAqCiAgICAgKiBUaGlzIEFQSSB3aWxsIGFsd2F5cyBjcmVhdGUgYSBuZXcgaW1tdXRhYmxlIGdyb3VwIGFuZCBhc3NpZ24gZ3JvdXAgVVVJRCB0byBhbGwgdGhlCiAgICAgKiBzdWJzY3JpcHRpb25zLCByZWdhcmRsZXNzIHdoZXRoZXIgdGhleSBhcmUgaW4gYSBncm91cCBhbHJlYWR5IG9yIG5vdC4KICAgICAqCiAgICAgKiBHcm91cGVkIHN1YnNjcmlwdGlvbnMgd2lsbCBoYXZlIGJlbG93IGJlaGF2aW9yczoKICAgICAqIDEpIFRoZXkgd2lsbCBzaGFyZSB0aGUgc2FtZSB1c2VyIHNldHRpbmdzLgogICAgICogMikgVGhlIG9wcG9ydHVuaXN0aWMgc3Vic2NyaXB0aW9ucyBpbiB0aGUgZ3JvdXAgaXMgY29uc2lkZXJlZCBpbnZpc2libGUgYW5kIHdpbGwgbm90CiAgICAgKiAgICByZXR1cm4gZnJvbSB7QGxpbmsgI2dldEFjdGl2ZVN1YnNjcmlwdGlvbkluZm9MaXN0KCl9LCB1bmxlc3MgY2FsbGVyIGhhcyBjYXJyaWVyCiAgICAgKiAgICBwcml2aWxlZ2UgcGVybWlzc2lvbiBvZiB0aGUgc3Vic2NyaXB0aW9ucy4KICAgICAqIDMpIFRoZSBvcHBvcnR1bmlzdGljIHN1YnNjcmlwdGlvbnMgaW4gdGhlIGdyb3VwIGNhbid0IGJlIGFjdGl2ZSBieSBpdHNlbGYuIElmIGFsbCBvdGhlcgogICAgICogICAgbm9uLW9wcG9ydHVuaXN0aWMgb25lcyBhcmUgZGVhY3RpdmF0ZWQgKHVucGx1Z2dlZCBvciBkaXNhYmxlZCBpbiBTZXR0aW5ncyksCiAgICAgKiAgICB0aGUgb3Bwb3J0dW5pc3RpYyBvbmVzIHdpbGwgYmUgZGVhY3RpdmF0ZWQgYXV0b21hdGljYWxseS4KICAgICAqCiAgICAgKiBDYWxsZXIgd2lsbCBlaXRoZXIgaGF2ZSB7QGxpbmsgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uI01PRElGWV9QSE9ORV9TVEFURX0KICAgICAqIHBlcm1pc3Npb24gb3IgaGFkIGNhcnJpZXIgcHJpdmlsZWdlIHBlcm1pc3Npb24gb24gdGhlIHN1YnNjcmlwdGlvbnM6CiAgICAgKiB7QGxpbmsgVGVsZXBob255TWFuYWdlciNoYXNDYXJyaWVyUHJpdmlsZWdlcygpfSBvcgogICAgICoge0BsaW5rICNjYW5NYW5hZ2VTdWJzY3JpcHRpb24oU3Vic2NyaXB0aW9uSW5mbyl9CiAgICAgKgogICAgICogQHRocm93cyBTZWN1cml0eUV4Y2VwdGlvbiBpZiB0aGUgY2FsbGVyIGRvZXNuJ3QgbWVldCB0aGUgcmVxdWlyZW1lbnRzCiAgICAgKiAgICAgICAgICAgICBvdXRsaW5lZCBhYm92ZS4KICAgICAqIEB0aHJvd3MgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGlmIGFueSBvZiB0aGUgc3Vic2NyaXB0aW9ucyBpbiB0aGUgbGlzdCBkb2Vzbid0IGV4aXN0LgogICAgICogQHRocm93cyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24gaWYgVGVsZXBob255IHNlcnZpY2UgaXMgaW4gYmFkIHN0YXRlLgogICAgICoKICAgICAqIEBwYXJhbSBzdWJJZExpc3QgbGlzdCBvZiBzdWJJZCB0aGF0IHdpbGwgYmUgaW4gdGhlIHNhbWUgZ3JvdXAKICAgICAqIEByZXR1cm4gZ3JvdXBVVUlEIGEgVVVJRCBhc3NpZ25lZCB0byB0aGUgc3Vic2NyaXB0aW9uIGdyb3VwLgogICAgICoKICAgICAqLwogICAgQFN1cHByZXNzQXV0b0RvYyAvLyBCbG9ja2VkIGJ5IGIvNzI5NjcyMzYgLSBubyBzdXBwb3J0IGZvciBjYXJyaWVyIHByaXZpbGVnZXMKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLk1PRElGWV9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBATm9uTnVsbCBQYXJjZWxVdWlkIGNyZWF0ZVN1YnNjcmlwdGlvbkdyb3VwKEBOb25OdWxsIExpc3Q8SW50ZWdlcj4gc3ViSWRMaXN0KSB7CiAgICAgICAgUHJlY29uZGl0aW9ucy5jaGVja05vdE51bGwoc3ViSWRMaXN0LCAiY2FuJ3QgY3JlYXRlIGdyb3VwIGZvciBudWxsIHN1YklkIGxpc3QiKTsKICAgICAgICBTdHJpbmcgcGtnRm9yRGVidWcgPSBtQ29udGV4dCAhPSBudWxsID8gbUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpIDogIjx1bmtub3duPiI7CiAgICAgICAgaWYgKFZEQkcpIHsKICAgICAgICAgICAgbG9nZCgiW2NyZWF0ZVN1YnNjcmlwdGlvbkdyb3VwXSIpOwogICAgICAgIH0KCiAgICAgICAgUGFyY2VsVXVpZCBncm91cFV1aWQgPSBudWxsOwogICAgICAgIGludFtdIHN1YklkQXJyYXkgPSBzdWJJZExpc3Quc3RyZWFtKCkubWFwVG9JbnQoaS0+aSkudG9BcnJheSgpOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBncm91cFV1aWQgPSBpU3ViLmNyZWF0ZVN1YnNjcmlwdGlvbkdyb3VwKHN1YklkQXJyYXksIHBrZ0ZvckRlYnVnKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmICghaXNTeXN0ZW1Qcm9jZXNzKCkpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKCJ0ZWxlcGhvbnkgc2VydmljZSBpcyBudWxsLiIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIGxvZ2UoImNyZWF0ZVN1YnNjcmlwdGlvbkdyb3VwIFJlbW90ZUV4Y2VwdGlvbiAiICsgZXgpOwogICAgICAgICAgICBpZiAoIWlzU3lzdGVtUHJvY2VzcygpKSB7CiAgICAgICAgICAgICAgICBleC5yZXRocm93QXNSdW50aW1lRXhjZXB0aW9uKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBncm91cFV1aWQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBBZGQgYSBsaXN0IG9mIHN1YnNjcmlwdGlvbnMgaW50byBhIGdyb3VwLgogICAgICogU2VlIHtAbGluayAjY3JlYXRlU3Vic2NyaXB0aW9uR3JvdXAoTGlzdCl9IGZvciBtb3JlIGRldGFpbHMuCiAgICAgKgogICAgICogQ2FsbGVyIHdpbGwgZWl0aGVyIGhhdmUge0BsaW5rIGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbiNNT0RJRllfUEhPTkVfU1RBVEV9CiAgICAgKiBwZXJtaXNzaW9uIG9yIGhhZCBjYXJyaWVyIHByaXZpbGVnZSBwZXJtaXNzaW9uIG9uIHRoZSBzdWJzY3JpcHRpb25zOgogICAgICoge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjaGFzQ2FycmllclByaXZpbGVnZXMoKX0gb3IKICAgICAqIHtAbGluayAjY2FuTWFuYWdlU3Vic2NyaXB0aW9uKFN1YnNjcmlwdGlvbkluZm8pfQogICAgICoKICAgICAqIEB0aHJvd3MgU2VjdXJpdHlFeGNlcHRpb24gaWYgdGhlIGNhbGxlciBkb2Vzbid0IG1lZXQgdGhlIHJlcXVpcmVtZW50cwogICAgICogICAgICAgICAgICAgb3V0bGluZWQgYWJvdmUuCiAgICAgKiBAdGhyb3dzIElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiBpZiB0aGUgc29tZSBzdWJzY3JpcHRpb25zIGluIHRoZSBsaXN0IGRvZXNuJ3QgZXhpc3QuCiAgICAgKiBAdGhyb3dzIElsbGVnYWxTdGF0ZUV4Y2VwdGlvbiBpZiBUZWxlcGhvbnkgc2VydmljZSBpcyBpbiBiYWQgc3RhdGUuCiAgICAgKgogICAgICogQHBhcmFtIHN1YklkTGlzdCBsaXN0IG9mIHN1YklkIHRoYXQgbmVlZCBhZGRpbmcgaW50byB0aGUgZ3JvdXAKICAgICAqIEBwYXJhbSBncm91cFV1aWQgdGhlIGdyb3VwVXVpZCB0aGUgc3Vic2NyaXB0aW9ucyBhcmUgYmVpbmcgYWRkZWQgdG8uCiAgICAgKgogICAgICovCiAgICBAU3VwcHJlc3NBdXRvRG9jIC8vIEJsb2NrZWQgYnkgYi83Mjk2NzIzNiAtIG5vIHN1cHBvcnQgZm9yIGNhcnJpZXIgcHJpdmlsZWdlcwogICAgQFJlcXVpcmVzUGVybWlzc2lvbihNYW5pZmVzdC5wZXJtaXNzaW9uLk1PRElGWV9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyB2b2lkIGFkZFN1YnNjcmlwdGlvbnNJbnRvR3JvdXAoQE5vbk51bGwgTGlzdDxJbnRlZ2VyPiBzdWJJZExpc3QsCiAgICAgICAgICAgIEBOb25OdWxsIFBhcmNlbFV1aWQgZ3JvdXBVdWlkKSB7CiAgICAgICAgUHJlY29uZGl0aW9ucy5jaGVja05vdE51bGwoc3ViSWRMaXN0LCAic3ViSWRMaXN0IGNhbid0IGJlIG51bGwuIik7CiAgICAgICAgUHJlY29uZGl0aW9ucy5jaGVja05vdE51bGwoZ3JvdXBVdWlkLCAiZ3JvdXBVdWlkIGNhbid0IGJlIG51bGwuIik7CiAgICAgICAgU3RyaW5nIHBrZ0ZvckRlYnVnID0gbUNvbnRleHQgIT0gbnVsbCA/IG1Db250ZXh0LmdldE9wUGFja2FnZU5hbWUoKSA6ICI8dW5rbm93bj4iOwogICAgICAgIGlmIChWREJHKSB7CiAgICAgICAgICAgIGxvZ2QoIlthZGRTdWJzY3JpcHRpb25zSW50b0dyb3VwXSIpOwogICAgICAgIH0KCiAgICAgICAgaW50W10gc3ViSWRBcnJheSA9IHN1YklkTGlzdC5zdHJlYW0oKS5tYXBUb0ludChpLT5pKS50b0FycmF5KCk7CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBpU3ViLmFkZFN1YnNjcmlwdGlvbnNJbnRvR3JvdXAoc3ViSWRBcnJheSwgZ3JvdXBVdWlkLCBwa2dGb3JEZWJ1Zyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoIWlzU3lzdGVtUHJvY2VzcygpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbigidGVsZXBob255IHNlcnZpY2UgaXMgbnVsbC4iKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICBsb2dlKCJhZGRTdWJzY3JpcHRpb25zSW50b0dyb3VwIFJlbW90ZUV4Y2VwdGlvbiAiICsgZXgpOwogICAgICAgICAgICBpZiAoIWlzU3lzdGVtUHJvY2VzcygpKSB7CiAgICAgICAgICAgICAgICBleC5yZXRocm93QXNSdW50aW1lRXhjZXB0aW9uKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgcHJpdmF0ZSBib29sZWFuIGlzU3lzdGVtUHJvY2VzcygpIHsKICAgICAgICByZXR1cm4gUHJvY2Vzcy5teVVpZCgpID09IFByb2Nlc3MuU1lTVEVNX1VJRDsKICAgIH0KCiAgICAvKioKICAgICAqIFJlbW92ZSBhIGxpc3Qgb2Ygc3Vic2NyaXB0aW9ucyBmcm9tIHRoZWlyIHN1YnNjcmlwdGlvbiBncm91cC4KICAgICAqIFNlZSB7QGxpbmsgI2NyZWF0ZVN1YnNjcmlwdGlvbkdyb3VwKExpc3QpfSBmb3IgbW9yZSBkZXRhaWxzLgogICAgICoKICAgICAqIENhbGxlciB3aWxsIGVpdGhlciBoYXZlIHtAbGluayBhbmRyb2lkLk1hbmlmZXN0LnBlcm1pc3Npb24jTU9ESUZZX1BIT05FX1NUQVRFfQogICAgICogcGVybWlzc2lvbiBvciBoYWQgY2FycmllciBwcml2aWxlZ2UgcGVybWlzc2lvbiBvbiB0aGUgc3Vic2NyaXB0aW9uczoKICAgICAqIHtAbGluayBUZWxlcGhvbnlNYW5hZ2VyI2hhc0NhcnJpZXJQcml2aWxlZ2VzKCl9IG9yCiAgICAgKiB7QGxpbmsgI2Nhbk1hbmFnZVN1YnNjcmlwdGlvbihTdWJzY3JpcHRpb25JbmZvKX0KICAgICAqCiAgICAgKiBAdGhyb3dzIFNlY3VyaXR5RXhjZXB0aW9uIGlmIHRoZSBjYWxsZXIgZG9lc24ndCBtZWV0IHRoZSByZXF1aXJlbWVudHMKICAgICAqICAgICAgICAgICAgIG91dGxpbmVkIGFib3ZlLgogICAgICogQHRocm93cyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gaWYgdGhlIHNvbWUgc3Vic2NyaXB0aW9ucyBpbiB0aGUgbGlzdCBkb2Vzbid0IGJlbG9uZwogICAgICogICAgICAgICAgICAgdGhlIHNwZWNpZmllZCBncm91cC4KICAgICAqIEB0aHJvd3MgSWxsZWdhbFN0YXRlRXhjZXB0aW9uIGlmIFRlbGVwaG9ueSBzZXJ2aWNlIGlzIGluIGJhZCBzdGF0ZS4KICAgICAqCiAgICAgKiBAcGFyYW0gc3ViSWRMaXN0IGxpc3Qgb2Ygc3ViSWQgdGhhdCBuZWVkIHJlbW92aW5nIGZyb20gdGhlaXIgZ3JvdXBzLgogICAgICoKICAgICAqLwogICAgQFN1cHByZXNzQXV0b0RvYyAvLyBCbG9ja2VkIGJ5IGIvNzI5NjcyMzYgLSBubyBzdXBwb3J0IGZvciBjYXJyaWVyIHByaXZpbGVnZXMKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oTWFuaWZlc3QucGVybWlzc2lvbi5NT0RJRllfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgdm9pZCByZW1vdmVTdWJzY3JpcHRpb25zRnJvbUdyb3VwKEBOb25OdWxsIExpc3Q8SW50ZWdlcj4gc3ViSWRMaXN0LAogICAgICAgICAgICBATm9uTnVsbCBQYXJjZWxVdWlkIGdyb3VwVXVpZCkgewogICAgICAgIFByZWNvbmRpdGlvbnMuY2hlY2tOb3ROdWxsKHN1YklkTGlzdCwgInN1YklkTGlzdCBjYW4ndCBiZSBudWxsLiIpOwogICAgICAgIFByZWNvbmRpdGlvbnMuY2hlY2tOb3ROdWxsKGdyb3VwVXVpZCwgImdyb3VwVXVpZCBjYW4ndCBiZSBudWxsLiIpOwogICAgICAgIFN0cmluZyBwa2dGb3JEZWJ1ZyA9IG1Db250ZXh0ICE9IG51bGwgPyBtQ29udGV4dC5nZXRPcFBhY2thZ2VOYW1lKCkgOiAiPHVua25vd24+IjsKICAgICAgICBpZiAoVkRCRykgewogICAgICAgICAgICBsb2dkKCJbcmVtb3ZlU3Vic2NyaXB0aW9uc0Zyb21Hcm91cF0iKTsKICAgICAgICB9CgogICAgICAgIGludFtdIHN1YklkQXJyYXkgPSBzdWJJZExpc3Quc3RyZWFtKCkubWFwVG9JbnQoaS0+aSkudG9BcnJheSgpOwoKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaVN1Yi5yZW1vdmVTdWJzY3JpcHRpb25zRnJvbUdyb3VwKHN1YklkQXJyYXksIGdyb3VwVXVpZCwgcGtnRm9yRGVidWcpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCFpc1N5c3RlbVByb2Nlc3MoKSkgewogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oInRlbGVwaG9ueSBzZXJ2aWNlIGlzIG51bGwuIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgbG9nZSgicmVtb3ZlU3Vic2NyaXB0aW9uc0Zyb21Hcm91cCBSZW1vdGVFeGNlcHRpb24gIiArIGV4KTsKICAgICAgICAgICAgaWYgKCFpc1N5c3RlbVByb2Nlc3MoKSkgewogICAgICAgICAgICAgICAgZXgucmV0aHJvd0FzUnVudGltZUV4Y2VwdGlvbigpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogR2V0IHN1YnNjcmlwdGlvbkluZm8gbGlzdCBvZiBzdWJzY3JpcHRpb25zIHRoYXQgYXJlIGluIHRoZSBzYW1lIGdyb3VwIG9mIGdpdmVuIHN1YklkLgogICAgICogU2VlIHtAbGluayAjY3JlYXRlU3Vic2NyaXB0aW9uR3JvdXAoTGlzdCl9IGZvciBtb3JlIGRldGFpbHMuCiAgICAgKgogICAgICogQ2FsbGVyIHdpbGwgZWl0aGVyIGhhdmUge0BsaW5rIGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbiNSRUFEX1BIT05FX1NUQVRFfQogICAgICogcGVybWlzc2lvbiBvciBoYWQgY2FycmllciBwcml2aWxlZ2UgcGVybWlzc2lvbiBvbiB0aGUgc3Vic2NyaXB0aW9uLgogICAgICoge0BsaW5rIFRlbGVwaG9ueU1hbmFnZXIjaGFzQ2FycmllclByaXZpbGVnZXMoKX0KICAgICAqCiAgICAgKiBAdGhyb3dzIElsbGVnYWxTdGF0ZUV4Y2VwdGlvbiBpZiBUZWxlcGhvbnkgc2VydmljZSBpcyBpbiBiYWQgc3RhdGUuCiAgICAgKiBAdGhyb3dzIFNlY3VyaXR5RXhjZXB0aW9uIGlmIHRoZSBjYWxsZXIgZG9lc24ndCBtZWV0IHRoZSByZXF1aXJlbWVudHMKICAgICAqICAgICAgICAgICAgIG91dGxpbmVkIGFib3ZlLgogICAgICoKICAgICAqIEBwYXJhbSBncm91cFV1aWQgb2Ygd2hpY2ggbGlzdCBvZiBzdWJJbmZvIHdpbGwgYmUgcmV0dXJuZWQuCiAgICAgKiBAcmV0dXJuIGxpc3Qgb2Ygc3Vic2NyaXB0aW9uSW5mbyB0aGF0IGJlbG9uZyB0byB0aGUgc2FtZSBncm91cCwgaW5jbHVkaW5nIHRoZSBnaXZlbgogICAgICogc3Vic2NyaXB0aW9uIGl0c2VsZi4gSXQgd2lsbCByZXR1cm4gYW4gZW1wdHkgbGlzdCBpZiBubyBzdWJzY3JpcHRpb24gYmVsb25ncyB0byB0aGUgZ3JvdXAuCiAgICAgKgogICAgICovCiAgICBAU3VwcHJlc3NBdXRvRG9jIC8vIEJsb2NrZWQgYnkgYi83Mjk2NzIzNiAtIG5vIHN1cHBvcnQgZm9yIGNhcnJpZXIgcHJpdmlsZWdlcwogICAgQFJlcXVpcmVzUGVybWlzc2lvbihNYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgQE5vbk51bGwgTGlzdDxTdWJzY3JpcHRpb25JbmZvPiBnZXRTdWJzY3JpcHRpb25zSW5Hcm91cChATm9uTnVsbCBQYXJjZWxVdWlkIGdyb3VwVXVpZCkgewogICAgICAgIFByZWNvbmRpdGlvbnMuY2hlY2tOb3ROdWxsKGdyb3VwVXVpZCwgImdyb3VwVXVpZCBjYW4ndCBiZSBudWxsIik7CiAgICAgICAgU3RyaW5nIGNvbnRleHRQa2cgPSBtQ29udGV4dCAhPSBudWxsID8gbUNvbnRleHQuZ2V0T3BQYWNrYWdlTmFtZSgpIDogIjx1bmtub3duPiI7CiAgICAgICAgU3RyaW5nIGNvbnRleHRBdHRyaWJ1dGlvblRhZyA9IG1Db250ZXh0ICE9IG51bGwgPyBtQ29udGV4dC5nZXRBdHRyaWJ1dGlvblRhZygpIDogbnVsbDsKICAgICAgICBpZiAoVkRCRykgewogICAgICAgICAgICBsb2dkKCJbZ2V0U3Vic2NyaXB0aW9uc0luR3JvdXBdKyBncm91cFV1aWQ6IiArIGdyb3VwVXVpZCk7CiAgICAgICAgfQoKICAgICAgICBMaXN0PFN1YnNjcmlwdGlvbkluZm8+IHJlc3VsdCA9IG51bGw7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlTdWIuZ2V0U3Vic2NyaXB0aW9uc0luR3JvdXAoZ3JvdXBVdWlkLCBjb250ZXh0UGtnLAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0QXR0cmlidXRpb25UYWcpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCFpc1N5c3RlbVByb2Nlc3MoKSkgewogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oInRlbGVwaG9ueSBzZXJ2aWNlIGlzIG51bGwuIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChSZW1vdGVFeGNlcHRpb24gZXgpIHsKICAgICAgICAgICAgbG9nZSgicmVtb3ZlU3Vic2NyaXB0aW9uc0Zyb21Hcm91cCBSZW1vdGVFeGNlcHRpb24gIiArIGV4KTsKICAgICAgICAgICAgaWYgKCFpc1N5c3RlbVByb2Nlc3MoKSkgewogICAgICAgICAgICAgICAgZXgucmV0aHJvd0FzUnVudGltZUV4Y2VwdGlvbigpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogV2hldGhlciBhIHN1YnNjcmlwdGlvbiBpcyB2aXNpYmxlIHRvIEFQSSBjYWxsZXIuIElmIGl0J3MgYSBidW5kbGVkIG9wcG9ydHVuaXN0aWMKICAgICAqIHN1YnNjcmlwdGlvbiwgaXQgc2hvdWxkIGJlIGhpZGRlbiBhbnl3aGVyZSBpbiBTZXR0aW5ncywgZGlhbGVyLCBzdGF0dXMgYmFyIGV0Yy4KICAgICAqIEV4Y2VwdGlvbiBpcyBpZiBjYWxsZXIgb3ducyBjYXJyaWVyIHByaXZpbGVnZSwgaW4gd2hpY2ggY2FzZSB0aGV5IHdpbGwKICAgICAqIHdhbnQgdG8gc2VlIHRoZWlyIG93biBoaWRkZW4gc3Vic2NyaXB0aW9ucy4KICAgICAqCiAgICAgKiBAcGFyYW0gaW5mbyB0aGUgc3Vic2NyaXB0aW9uSW5mbyB0byBjaGVjayBhZ2FpbnN0LgogICAgICogQHJldHVybiB0cnVlIGlmIHRoaXMgc3Vic2NyaXB0aW9uIHNob3VsZCBiZSB2aXNpYmxlIHRvIHRoZSBBUEkgY2FsbGVyLgogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBib29sZWFuIGlzU3Vic2NyaXB0aW9uVmlzaWJsZShTdWJzY3JpcHRpb25JbmZvIGluZm8pIHsKICAgICAgICBpZiAoaW5mbyA9PSBudWxsKSByZXR1cm4gZmFsc2U7CiAgICAgICAgLy8gSWYgc3Vic2NyaXB0aW9uIGlzIE5PVCBncm91cGVkIG9wcG9ydHVuaXN0aWMgc3Vic2NyaXB0aW9uLCBpdCdzIHZpc2libGUuCiAgICAgICAgaWYgKGluZm8uZ2V0R3JvdXBVdWlkKCkgPT0gbnVsbCB8fCAhaW5mby5pc09wcG9ydHVuaXN0aWMoKSkgcmV0dXJuIHRydWU7CgogICAgICAgIC8vIElmIHRoZSBjYWxsZXIgaXMgdGhlIGNhcnJpZXIgYXBwIGFuZCBvd25zIHRoZSBzdWJzY3JpcHRpb24sIGl0IHNob3VsZCBiZSB2aXNpYmxlCiAgICAgICAgLy8gdG8gdGhlIGNhbGxlci4KICAgICAgICBib29sZWFuIGhhc0NhcnJpZXJQcml2aWxlZ2VQZXJtaXNzaW9uID0gVGVsZXBob255TWFuYWdlci5mcm9tKG1Db250ZXh0KQogICAgICAgICAgICAgICAgLmhhc0NhcnJpZXJQcml2aWxlZ2VzKGluZm8uZ2V0U3Vic2NyaXB0aW9uSWQoKSkKICAgICAgICAgICAgICAgIHx8IGNhbk1hbmFnZVN1YnNjcmlwdGlvbihpbmZvKTsKICAgICAgICByZXR1cm4gaGFzQ2FycmllclByaXZpbGVnZVBlcm1pc3Npb247CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gYSBsaXN0IG9mIHN1YnNjcmlwdGlvbnMgdGhhdCBhcmUgYXZhaWxhYmxlIGFuZCB2aXNpYmxlIHRvIHRoZSB1c2VyLgogICAgICogVXNlZCBieSBTZXR0aW5ncyBhcHAgdG8gc2hvdyBhIGxpc3Qgb2Ygc3Vic2NyaXB0aW9ucyBmb3IgdXNlciB0byBwaWNrLgogICAgICoKICAgICAqIDxwPgogICAgICogUGVybWlzc2lvbnMgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUFJJVklMRUdFRF9QSE9ORV9TVEFURSBpcyByZXF1aXJlZAogICAgICogZm9yIGdldFNlbGVjdGFibGVTdWJzY3JpcHRpb25JbmZvTGlzdCB0byBiZSBpbnZva2VkLgogICAgICogQHJldHVybiBsaXN0IG9mIHVzZXIgc2VsZWN0YWJsZSBzdWJzY3JpcHRpb25zLgogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBATnVsbGFibGUgTGlzdDxTdWJzY3JpcHRpb25JbmZvPiBnZXRTZWxlY3RhYmxlU3Vic2NyaXB0aW9uSW5mb0xpc3QoKSB7CiAgICAgICAgTGlzdDxTdWJzY3JpcHRpb25JbmZvPiBhdmFpbGFibGVMaXN0ID0gZ2V0QXZhaWxhYmxlU3Vic2NyaXB0aW9uSW5mb0xpc3QoKTsKICAgICAgICBpZiAoYXZhaWxhYmxlTGlzdCA9PSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIE11bHRpcGxlIHN1YnNjcmlwdGlvbnMgaW4gYSBncm91cCBzaG91bGQgb25seSBoYXZlIG9uZSByZXByZXNlbnRhdGl2ZS4KICAgICAgICAgICAgLy8gSXQgc2hvdWxkIGJlIHRoZSBjdXJyZW50IGFjdGl2ZSBwcmltYXJ5IHN1YnNjcmlwdGlvbiBpZiBhbnksIG9yIGFueQogICAgICAgICAgICAvLyBwcmltYXJ5IHN1YnNjcmlwdGlvbi4KICAgICAgICAgICAgTGlzdDxTdWJzY3JpcHRpb25JbmZvPiBzZWxlY3RhYmxlTGlzdCA9IG5ldyBBcnJheUxpc3Q8PigpOwogICAgICAgICAgICBNYXA8UGFyY2VsVXVpZCwgU3Vic2NyaXB0aW9uSW5mbz4gZ3JvdXBNYXAgPSBuZXcgSGFzaE1hcDw+KCk7CgogICAgICAgICAgICBmb3IgKFN1YnNjcmlwdGlvbkluZm8gaW5mbyA6IGF2YWlsYWJsZUxpc3QpIHsKICAgICAgICAgICAgICAgIC8vIE9wcG9ydHVuaXN0aWMgc3Vic2NyaXB0aW9ucyBhcmUgY29uc2lkZXJlZCBpbnZpc2libGUKICAgICAgICAgICAgICAgIC8vIHRvIHVzZXJzIHNvIHRoZXkgc2hvdWxkIG5ldmVyIGJlIHJldHVybmVkLgogICAgICAgICAgICAgICAgaWYgKCFpc1N1YnNjcmlwdGlvblZpc2libGUoaW5mbykpIGNvbnRpbnVlOwoKICAgICAgICAgICAgICAgIFBhcmNlbFV1aWQgZ3JvdXBVdWlkID0gaW5mby5nZXRHcm91cFV1aWQoKTsKICAgICAgICAgICAgICAgIGlmIChncm91cFV1aWQgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIC8vIERvZXNuJ3QgYmVsb25nIHRvIGFueSBncm91cC4gQWRkIGluIHRoZSBsaXN0LgogICAgICAgICAgICAgICAgICAgIHNlbGVjdGFibGVMaXN0LmFkZChpbmZvKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWdyb3VwTWFwLmNvbnRhaW5zS2V5KGdyb3VwVXVpZCkKICAgICAgICAgICAgICAgICAgICAgICAgfHwgKGdyb3VwTWFwLmdldChncm91cFV1aWQpLmdldFNpbVNsb3RJbmRleCgpID09IElOVkFMSURfU0lNX1NMT1RfSU5ERVgKICAgICAgICAgICAgICAgICAgICAgICAgJiYgaW5mby5nZXRTaW1TbG90SW5kZXgoKSAhPSBJTlZBTElEX1NJTV9TTE9UX0lOREVYKSkgewogICAgICAgICAgICAgICAgICAgIC8vIElmIGl0IGJlbG9uZ3MgdG8gYSBncm91cCB0aGF0IGhhcyBuZXZlciBiZWVuIHJlY29yZGVkIG9yIGl0J3MgdGhlIGN1cnJlbnQKICAgICAgICAgICAgICAgICAgICAvLyBhY3RpdmUgc3Vic2NyaXB0aW9uLCBhZGQgaXQgaW4gdGhlIGxpc3QuCiAgICAgICAgICAgICAgICAgICAgc2VsZWN0YWJsZUxpc3QucmVtb3ZlKGdyb3VwTWFwLmdldChncm91cFV1aWQpKTsKICAgICAgICAgICAgICAgICAgICBzZWxlY3RhYmxlTGlzdC5hZGQoaW5mbyk7CiAgICAgICAgICAgICAgICAgICAgZ3JvdXBNYXAucHV0KGdyb3VwVXVpZCwgaW5mbyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWxlY3RhYmxlTGlzdDsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBFbmFibGVzIG9yIGRpc2FibGVzIGEgc3Vic2NyaXB0aW9uLiBUaGlzIGlzIGN1cnJlbnRseSB1c2VkIGluIHRoZSBzZXR0aW5ncyBwYWdlLiBJdCB3aWxsCiAgICAgKiBmYWlsIGFuZCByZXR1cm4gZmFsc2UgaWYgb3BlcmF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgb3IgZmFpbGVkLgogICAgICoKICAgICAqIFRvIGRpc2FibGUgYW4gYWN0aXZlIHN1YnNjcmlwdGlvbiBvbiBhIHBoeXNpY2FsIChub24tRXVpY2MpIFNJTSwKICAgICAqIHtAbGluayAjY2FuRGlzYWJsZVBoeXNpY2FsU3Vic2NyaXB0aW9ufSBuZWVkcyB0byBiZSB0cnVlLgogICAgICoKICAgICAqIDxwPgogICAgICogUGVybWlzc2lvbnMgYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLk1PRElGWV9QSE9ORV9TVEFURSBpcyByZXF1aXJlZAogICAgICoKICAgICAqIEBwYXJhbSBlbmFibGUgd2hldGhlciB1c2VyIGlzIHR1cm5pbmcgaXQgb24gb3Igb2ZmLgogICAgICogQHBhcmFtIHN1YnNjcmlwdGlvbklkIFN1YnNjcmlwdGlvbiB0byBiZSBlbmFibGVkIG9yIGRpc2FibGVkLgogICAgICogICAgICAgICAgICAgICAgICAgICAgIEl0IGNvdWxkIGJlIGEgZVNJTSBvciBwU0lNIHN1YnNjcmlwdGlvbi4KICAgICAqCiAgICAgKiBAcmV0dXJuIHdoZXRoZXIgdGhlIG9wZXJhdGlvbiBpcyBzdWNjZXNzZnVsLgogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIEBTeXN0ZW1BcGkKICAgIEBSZXF1aXJlc1Blcm1pc3Npb24oYW5kcm9pZC5NYW5pZmVzdC5wZXJtaXNzaW9uLk1PRElGWV9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBib29sZWFuIHNldFN1YnNjcmlwdGlvbkVuYWJsZWQoaW50IHN1YnNjcmlwdGlvbklkLCBib29sZWFuIGVuYWJsZSkgewogICAgICAgIGlmIChWREJHKSB7CiAgICAgICAgICAgIGxvZ2QoInNldFN1YnNjcmlwdGlvbkFjdGl2YXRlZCBzdWJJZD0gIiArIHN1YnNjcmlwdGlvbklkICsgIiBlbmFibGUgIiArIGVuYWJsZSk7CiAgICAgICAgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IFRlbGVwaG9ueU1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uU2VydmljZSgpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaVN1Yi5zZXRTdWJzY3JpcHRpb25FbmFibGVkKGVuYWJsZSwgc3Vic2NyaXB0aW9uSWQpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHVpY2MgYXBwbGljYXRpb25zIGJlaW5nIGVuYWJsZWQgb3IgZGlzYWJsZWQuCiAgICAgKiBUaGUgdmFsdWUgd2lsbCBiZSByZW1lbWJlcmVkIG9uIHRoZSBzdWJzY3JpcHRpb24gYW5kIHdpbGwgYmUgYXBwbGllZCB3aGVuZXZlciBpdCdzIHByZXNlbnQuCiAgICAgKiBJZiB0aGUgc3Vic2NyaXB0aW9uIGluIGN1cnJlbnRseSBwcmVzZW50LCBpdCB3aWxsIGFsc28gYXBwbHkgdGhlIHNldHRpbmcgdG8gbW9kZW0KICAgICAqIGltbWVkaWF0ZWx5LgogICAgICoKICAgICAqIFBlcm1pc3Npb25zIGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbi5NT0RJRllfUEhPTkVfU1RBVEUgaXMgcmVxdWlyZWQKICAgICAqCiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uSWQgd2hpY2ggc3Vic2NyaXB0aW9uIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcGFyYW0gZW5hYmxlZCB3aGV0aGVyIHVpY2MgYXBwbGljYXRpb25zIGFyZSBlbmFibGVkIG9yIGRpc2FibGVkLgogICAgICogQGhpZGUKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgQFJlcXVpcmVzUGVybWlzc2lvbihNYW5pZmVzdC5wZXJtaXNzaW9uLk1PRElGWV9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyB2b2lkIHNldFVpY2NBcHBsaWNhdGlvbnNFbmFibGVkKGludCBzdWJzY3JpcHRpb25JZCwgYm9vbGVhbiBlbmFibGVkKSB7CiAgICAgICAgaWYgKFZEQkcpIHsKICAgICAgICAgICAgbG9nZCgic2V0VWljY0FwcGxpY2F0aW9uc0VuYWJsZWQgc3ViSWQ9ICIgKyBzdWJzY3JpcHRpb25JZCArICIgZW5hYmxlICIgKyBlbmFibGVkKTsKICAgICAgICB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gSVN1Yi5TdHViLmFzSW50ZXJmYWNlKAogICAgICAgICAgICAgICAgICAgIFRlbGVwaG9ueUZyYW1ld29ya0luaXRpYWxpemVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0VGVsZXBob255U2VydmljZU1hbmFnZXIoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldFN1YnNjcmlwdGlvblNlcnZpY2VSZWdpc3RlcmVyKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXQoKSk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGlTdWIuc2V0VWljY0FwcGxpY2F0aW9uc0VuYWJsZWQoZW5hYmxlZCwgc3Vic2NyaXB0aW9uSWQpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFdoZXRoZXIgaXQncyBzdXBwb3J0ZWQgdG8gZGlzYWJsZSAvIHJlLWVuYWJsZSBhIHN1YnNjcmlwdGlvbiBvbiBhIHBoeXNpY2FsIChub24tZXVpY2MpIFNJTS4KICAgICAqCiAgICAgKiBQaHlzaWNhbCBTSU0gcmVmZXJzIG5vbi1ldWljYywgb3IgYWthIG5vbi1wcm9ncmFtbWFibGUgU0lNLgogICAgICoKICAgICAqIEl0IHByb3ZpZGVzIHdoZXRoZXIgYSBwaHlzaWNhbCBTSU0gY2FyZCBjYW4gYmUgZGlzYWJsZWQgd2l0aG91dCB0YWtpbmcgaXQgb3V0LCB3aGljaCBpcyBkb25lCiAgICAgKiB2aWEge0BsaW5rICNzZXRTdWJzY3JpcHRpb25FbmFibGVkKGludCwgYm9vbGVhbil9IEFQSS4KICAgICAqCiAgICAgKiBSZXF1aXJlcyBQZXJtaXNzaW9uOiBSRUFEX1BSSVZJTEVHRURfUEhPTkVfU1RBVEUuCiAgICAgKgogICAgICogQHJldHVybiB3aGV0aGVyIGNhbiBkaXNhYmxlIHN1YnNjcmlwdGlvbnMgb24gcGh5c2ljYWwgU0lNcy4KICAgICAqCiAgICAgKiBAaGlkZQogICAgICovCiAgICBAU3lzdGVtQXBpCiAgICBAUmVxdWlyZXNQZXJtaXNzaW9uKGFuZHJvaWQuTWFuaWZlc3QucGVybWlzc2lvbi5SRUFEX1BSSVZJTEVHRURfUEhPTkVfU1RBVEUpCiAgICBwdWJsaWMgYm9vbGVhbiBjYW5EaXNhYmxlUGh5c2ljYWxTdWJzY3JpcHRpb24oKSB7CiAgICAgICAgaWYgKFZEQkcpIHsKICAgICAgICAgICAgbG9nZCgiY2FuRGlzYWJsZVBoeXNpY2FsU3Vic2NyaXB0aW9uIik7CiAgICAgICAgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIElTdWIgaVN1YiA9IElTdWIuU3R1Yi5hc0ludGVyZmFjZSgKICAgICAgICAgICAgICAgICAgICBUZWxlcGhvbnlGcmFtZXdvcmtJbml0aWFsaXplcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldFRlbGVwaG9ueVNlcnZpY2VNYW5hZ2VyKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlUmVnaXN0ZXJlcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KCkpOwogICAgICAgICAgICBpZiAoaVN1YiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaVN1Yi5jYW5EaXNhYmxlUGh5c2ljYWxTdWJzY3JpcHRpb24oKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIERPIE5PVCBVU0UuCiAgICAgKiBUaGlzIEFQSSBpcyBkZXNpZ25lZCBmb3IgZmVhdHVyZXMgdGhhdCBhcmUgbm90IGZpbmlzaGVkIGF0IHRoaXMgcG9pbnQuIERvIG5vdCBjYWxsIHRoaXMgQVBJLgogICAgICogQGhpZGUKICAgICAqIFRPRE8gYi8xMzU1NDc1MTI6IGZ1cnRoZXIgY2xlYW4gdXAKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgQFJlcXVpcmVzUGVybWlzc2lvbihNYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUFJJVklMRUdFRF9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBib29sZWFuIGlzU3Vic2NyaXB0aW9uRW5hYmxlZChpbnQgc3Vic2NyaXB0aW9uSWQpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBJU3ViIGlTdWIgPSBUZWxlcGhvbnlNYW5hZ2VyLmdldFN1YnNjcmlwdGlvblNlcnZpY2UoKTsKICAgICAgICAgICAgaWYgKGlTdWIgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGlTdWIuaXNTdWJzY3JpcHRpb25FbmFibGVkKHN1YnNjcmlwdGlvbklkKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIERPIE5PVCBVU0UuCiAgICAgKiBUaGlzIEFQSSBpcyBkZXNpZ25lZCBmb3IgZmVhdHVyZXMgdGhhdCBhcmUgbm90IGZpbmlzaGVkIGF0IHRoaXMgcG9pbnQuIERvIG5vdCBjYWxsIHRoaXMgQVBJLgogICAgICogQGhpZGUKICAgICAqIFRPRE8gYi8xMzU1NDc1MTI6IGZ1cnRoZXIgY2xlYW4gdXAKICAgICAqLwogICAgQFN5c3RlbUFwaQogICAgQFJlcXVpcmVzUGVybWlzc2lvbihNYW5pZmVzdC5wZXJtaXNzaW9uLlJFQURfUFJJVklMRUdFRF9QSE9ORV9TVEFURSkKICAgIHB1YmxpYyBpbnQgZ2V0RW5hYmxlZFN1YnNjcmlwdGlvbklkKGludCBzbG90SW5kZXgpIHsKICAgICAgICBpbnQgc3ViSWQgPSBJTlZBTElEX1NVQlNDUklQVElPTl9JRDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHN1YklkID0gaVN1Yi5nZXRFbmFibGVkU3Vic2NyaXB0aW9uSWQoc2xvdEluZGV4KTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFJlbW90ZUV4Y2VwdGlvbiBleCkgewogICAgICAgICAgICAvLyBpZ25vcmUgaXQKICAgICAgICB9CgogICAgICAgIGlmIChWREJHKSBsb2dkKCJnZXRFbmFibGVkU3Vic2NyaXB0aW9uSWQsIHN1YklkID0gIiArIHN1YklkKTsKICAgICAgICByZXR1cm4gc3ViSWQ7CiAgICB9CgogICAgcHJpdmF0ZSBpbnRlcmZhY2UgQ2FsbElTdWJNZXRob2RIZWxwZXIgewogICAgICAgIGludCBjYWxsTWV0aG9kKElTdWIgaVN1YikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjsKICAgIH0KCiAgICBwcml2YXRlIGludCBzZXRTdWJzY3JpcHRpb25Qcm9wZXJ0eUhlbHBlcihpbnQgc3ViSWQsIFN0cmluZyBtZXRob2ROYW1lLAogICAgICAgICAgICBDYWxsSVN1Yk1ldGhvZEhlbHBlciBoZWxwZXIpIHsKICAgICAgICBpZiAoIWlzVmFsaWRTdWJzY3JpcHRpb25JZChzdWJJZCkpIHsKICAgICAgICAgICAgbG9nZCgiWyIgKyBtZXRob2ROYW1lICsgIl0iICsgIi0gZmFpbCIpOwogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfQoKICAgICAgICBpbnQgcmVzdWx0ID0gMDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgSVN1YiBpU3ViID0gVGVsZXBob255TWFuYWdlci5nZXRTdWJzY3JpcHRpb25TZXJ2aWNlKCk7CiAgICAgICAgICAgIGlmIChpU3ViICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGhlbHBlci5jYWxsTWV0aG9kKGlTdWIpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoUmVtb3RlRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgICAgIC8vIGlnbm9yZSBpdAogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBhY3RpdmUgZGF0YSBzdWJzY3JpcHRpb24gaWQuIEFjdGl2ZSBkYXRhIHN1YnNjcmlwdGlvbiByZWZlcnMgdG8gdGhlIHN1YnNjcmlwdGlvbgogICAgICogY3VycmVudGx5IGNob3NlbiB0byBwcm92aWRlIGNlbGx1bGFyIGludGVybmV0IGNvbm5lY3Rpb24gdG8gdGhlIHVzZXIuIFRoaXMgbWF5IGJlCiAgICAgKiBkaWZmZXJlbnQgZnJvbSBnZXREZWZhdWx0RGF0YVN1YnNjcmlwdGlvbklkKCkuIEVnLiBPcHBvcnR1bmlzdGljcyBkYXRhCiAgICAgKgogICAgICogU2VlIHtAbGluayBQaG9uZVN0YXRlTGlzdGVuZXIjb25BY3RpdmVEYXRhU3Vic2NyaXB0aW9uSWRDaGFuZ2VkKGludCl9IGZvciB0aGUgZGV0YWlscy4KICAgICAqCiAgICAgKiBAcmV0dXJuIEFjdGl2ZSBkYXRhIHN1YnNjcmlwdGlvbiBpZCBpZiBhbnkgaXMgY2hvc2VuLCBvcgogICAgICogU3Vic2NyaXB0aW9uTWFuYWdlci5JTlZBTElEX1NVQlNDUklQVElPTl9JRCBpZiBub3QuCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgaW50IGdldEFjdGl2ZURhdGFTdWJzY3JpcHRpb25JZCgpIHsKICAgICAgICByZXR1cm4gc0FjdGl2ZURhdGFTdWJJZENhY2hlLnF1ZXJ5KG51bGwpOwogICAgfQoKICAgIC8qKgogICAgICogSGVscGVyIG1ldGhvZCB0aGF0IHB1dHMgYSBzdWJzY3JpcHRpb24gaWQgb24gYW4gaW50ZW50IHdpdGggdGhlIGNvbnN0YW50czoKICAgICAqIFBob25lQ29uc3RhbnQuU1VCU0NSSVBUSU9OX0tFWSBhbmQgU3Vic2NyaXB0aW9uTWFuYWdlci5FWFRSQV9TVUJTQ1JJUFRJT05fSU5ERVguCiAgICAgKiBCb3RoIGNvbnN0YW50cyBhcmUgdXNlZCB0byBzdXBwb3J0IGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiAgT25jZSB3ZSBrbm93IHdlIGdvdCBhbGwgcGxhY2VzLAogICAgICogd2UgY2FuIHJlbW92ZSBQaG9uZUNvbnN0YW50cy5TVUJTQ1JJUFRJT05fS0VZLgogICAgICogQHBhcmFtIGludGVudCBJbnRlbnQgdG8gcHV0IHN1YiBpZCBvbi4KICAgICAqIEBwYXJhbSBzdWJJZCBTdWJzY3JpcHRpb25JZCB0byBwdXQgb24gaW50ZW50LgogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBwdXRTdWJzY3JpcHRpb25JZEV4dHJhKEludGVudCBpbnRlbnQsIGludCBzdWJJZCkgewogICAgICAgIGludGVudC5wdXRFeHRyYShTdWJzY3JpcHRpb25NYW5hZ2VyLkVYVFJBX1NVQlNDUklQVElPTl9JTkRFWCwgc3ViSWQpOwogICAgICAgIGludGVudC5wdXRFeHRyYShQaG9uZUNvbnN0YW50cy5TVUJTQ1JJUFRJT05fS0VZLCBzdWJJZCk7CiAgICB9CgogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgaW52YWxpZGF0ZURlZmF1bHRTdWJJZENhY2hlcygpIHsKICAgICAgICBQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGUuaW52YWxpZGF0ZUNhY2hlKENBQ0hFX0tFWV9ERUZBVUxUX1NVQl9JRF9QUk9QRVJUWSk7CiAgICB9CgogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgaW52YWxpZGF0ZURlZmF1bHREYXRhU3ViSWRDYWNoZXMoKSB7CiAgICAgICAgUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlLmludmFsaWRhdGVDYWNoZShDQUNIRV9LRVlfREVGQVVMVF9EQVRBX1NVQl9JRF9QUk9QRVJUWSk7CiAgICB9CgogICAgLyoqIEBoaWRlICovCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgaW52YWxpZGF0ZURlZmF1bHRTbXNTdWJJZENhY2hlcygpIHsKICAgICAgICBQcm9wZXJ0eUludmFsaWRhdGVkQ2FjaGUuaW52YWxpZGF0ZUNhY2hlKENBQ0hFX0tFWV9ERUZBVUxUX1NNU19TVUJfSURfUFJPUEVSVFkpOwogICAgfQoKICAgIC8qKiBAaGlkZSAqLwogICAgcHVibGljIHN0YXRpYyB2b2lkIGludmFsaWRhdGVBY3RpdmVEYXRhU3ViSWRDYWNoZXMoKSB7CiAgICAgICAgUHJvcGVydHlJbnZhbGlkYXRlZENhY2hlLmludmFsaWRhdGVDYWNoZShDQUNIRV9LRVlfQUNUSVZFX0RBVEFfU1VCX0lEX1BST1BFUlRZKTsKICAgIH0KCiAgICAvKiogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBpbnZhbGlkYXRlU2xvdEluZGV4Q2FjaGVzKCkgewogICAgICAgIFByb3BlcnR5SW52YWxpZGF0ZWRDYWNoZS5pbnZhbGlkYXRlQ2FjaGUoQ0FDSEVfS0VZX1NMT1RfSU5ERVhfUFJPUEVSVFkpOwogICAgfQoKICAgIC8qKgogICAgICogQWxsb3dzIGEgdGVzdCBwcm9jZXNzIHRvIGRpc2FibGUgY2xpZW50LXNpZGUgY2FjaGluZyBvcGVyYXRpb25zLgogICAgICoKICAgICAqIEBoaWRlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBkaXNhYmxlQ2FjaGluZygpIHsKICAgICAgICBzRGVmYXVsdFN1YklkQ2FjaGUuZGlzYWJsZUxvY2FsKCk7CiAgICAgICAgc0RlZmF1bHREYXRhU3ViSWRDYWNoZS5kaXNhYmxlTG9jYWwoKTsKICAgICAgICBzQWN0aXZlRGF0YVN1YklkQ2FjaGUuZGlzYWJsZUxvY2FsKCk7CiAgICAgICAgc0RlZmF1bHRTbXNTdWJJZENhY2hlLmRpc2FibGVMb2NhbCgpOwogICAgICAgIHNTbG90SW5kZXhDYWNoZS5kaXNhYmxlTG9jYWwoKTsKICAgICAgICBzUGhvbmVJZENhY2hlLmRpc2FibGVMb2NhbCgpOwogICAgfQoKICAgIC8qKgogICAgICogQ2xlYXJzIGFsbCBwcm9jZXNzLWxvY2FsIGJpbmRlciBjYWNoZXMuCiAgICAgKgogICAgICogQGhpZGUgKi8KICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBjbGVhckNhY2hlcygpIHsKICAgICAgICBzRGVmYXVsdFN1YklkQ2FjaGUuY2xlYXIoKTsKICAgICAgICBzRGVmYXVsdERhdGFTdWJJZENhY2hlLmNsZWFyKCk7CiAgICAgICAgc0FjdGl2ZURhdGFTdWJJZENhY2hlLmNsZWFyKCk7CiAgICAgICAgc0RlZmF1bHRTbXNTdWJJZENhY2hlLmNsZWFyKCk7CiAgICAgICAgc1Nsb3RJbmRleENhY2hlLmNsZWFyKCk7CiAgICAgICAgc1Bob25lSWRDYWNoZS5jbGVhcigpOwogICAgfQp9Cg==</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">cHVibGljIGNsYXNzIHRlc3Qgewp9Cg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgICAgICAvLyBJbnRlbnQgZm9yIGNsaWNrIGFuZCBkaXNtaXNzIGFjdGlvbgo=</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">Ly8gLi4uCg==</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgICAgICB2YWwgY2xpY2tJbnRlbnQgPSBJbnRlbnQoY29udGV4dCwgU2F2ZVNlc3Npb25EYXRhU2VydmljZTo6Y2xhc3MuamF2YSkKICAgICAgICBjbGlja0ludGVudC5hY3Rpb24gPSBUcmFja2VyQWN0aW9ucy5OT1RJRklDQVRJT05fQ0xJQ0sKICAgICAgICB2YWwgY2xpY2tEYXRhID0gTm90aWZpY2F0aW9uRHRvKAogICAgICAgICAgICB0eXBlID0gIlRPRE8iLCAvKiBoYXJkY29kZWQgYXMgb2Ygbm93ICovCiAgICAgICAgICAgIHRpdGxlID0gdGl0bGUsCiAgICAgICAgICAgIGltYWdlID0gaWNvbi50b1N0cmluZygpLCAvKiBtb3N0bHkgd291bGQgcGFhcyBlaXRoZXIgbG9jYWwgaW1hZ2UgdXJpIG9yIHJlbW90ZSB1cmwgKi8KICAgICAgICAgICAgY2xpY2tlZCA9IHRydWUsCiAgICAgICAgICAgIG1lc3NhZ2UgPSBkZXNjcmlwdGlvbiwKICAgICAgICAgICAgdGltZVN0YXllZEluVHJheSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpIC0gc2VudFRpbWVTdGFtcAogICAgICAgICkKICAgICAgICBjbGlja0ludGVudC5wdXRFeHRyYSgidmFsdWUiLCBjbGlja0RhdGEpCiAgICAgICAgdmFsIGNsaWNrUGVuZGluZ0ludGVudDogUGVuZGluZ0ludGVudCA9CiAgICAgICAgICAgIFBlbmRpbmdJbnRlbnQuZ2V0U2VydmljZShjb250ZXh0LCAwLCBjbGlja0ludGVudCwgUGVuZGluZ0ludGVudC5GTEFHX0lNTVVUQUJMRSkKCgogICAgICAgIHZhbCBkaXNtaXNzSW50ZW50ID0gSW50ZW50KGNvbnRleHQsIFNhdmVTZXNzaW9uRGF0YVNlcnZpY2U6OmNsYXNzLmphdmEpCiAgICAgICAgZGlzbWlzc0ludGVudC5hY3Rpb24gPSBUcmFja2VyQWN0aW9ucy5OT1RJRklDQVRJT05fRElTTUlTUwogICAgICAgIHZhbCBkaXNtaXNzRGF0YSA9IE5vdGlmaWNhdGlvbkR0bygKICAgICAgICAgICAgdHlwZSA9ICJUT0RPIiwgLyogaGFyZGNvZGVkIGFzIG9mIG5vdyAqLwogICAgICAgICAgICB0aXRsZSA9IHRpdGxlLAogICAgICAgICAgICBpbWFnZSA9IGljb24udG9TdHJpbmcoKSwgLyogbW9zdGx5IHdvdWxkIHBhYXMgZWl0aGVyIGxvY2FsIGltYWdlIHVyaSBvciByZW1vdGUgdXJsICovCiAgICAgICAgICAgIGRpc21pc3NlZCA9IHRydWUsCiAgICAgICAgICAgIG1lc3NhZ2UgPSBkZXNjcmlwdGlvbiwKICAgICAgICAgICAgdGltZVN0YXllZEluVHJheSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpIC0gc2VudFRpbWVTdGFtcAogICAgICAgICkKICAgICAgICBkaXNtaXNzSW50ZW50LnB1dEV4dHJhKCJ2YWx1ZSIsIGRpc21pc3NEYXRhKQogICAgICAgIHZhbCBkaXNtaXNzUGVuZGluZ0ludGVudDogUGVuZGluZ0ludGVudCA9CiAgICAgICAgICAgIFBlbmRpbmdJbnRlbnQuZ2V0U2VydmljZShjb250ZXh0LCAwLCBkaXNtaXNzSW50ZW50LCBQZW5kaW5nSW50ZW50LkZMQUdfSU1NVVRBQkxFKQo=</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgICAgICBVc2VyVHJhY2tlci5hcHBEYXRhKFNlcmlhbGl6ZWRIYXNoTWFwKGhhc2hNYXBPZigidGl0bGUiIHRvIHRpdGxlKSkpCg==</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgICAgICB2YWwgY2xpY2tJbnRlbnQgPSBJbnRlbnQoY29udGV4dCwgU2F2ZVNlc3Npb25EYXRhU2VydmljZTo6Y2xhc3MuamF2YSkK</text>
      </register>
      <register name=":" type="4">
        <text encoding="base64">dw==</text>
      </register>
    </registers>
  </component>
  <component name="VimSearchSettings">
    <search>
      <last-search encoding="base64">QWN0aXZpdHkuUkVTVUxUX09LQVk=</last-search>
      <last-pattern encoding="base64">QWN0aXZpdHkuUkVTVUxUX09LQVk=</last-pattern>
      <last-dir encoding="base64">MQ==</last-dir>
      <show-last encoding="base64">dHJ1ZQ==</show-last>
    </search>
  </component>
</application>